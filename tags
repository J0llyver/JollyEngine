!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$(VERBOSE).SILENT	Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	Makefile	/^% : %,v$/;"	t
%	Makefile	/^% : RCS\/%$/;"	t
%	Makefile	/^% : RCS\/%,v$/;"	t
%	Makefile	/^% : SCCS\/s.%$/;"	t
%	Makefile	/^% : s.%$/;"	t
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
AcceptDragDropPayload	src/vendor/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItem	src/vendor/imgui/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	src/vendor/imgui/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowNavDirFlags	src/vendor/imgui/imgui_internal.h	/^    int                     ActiveIdAllowNavDirFlags;           \/\/ Active widget allows using /;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdAllowOverlap	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdBlockNavInputFlags	src/vendor/imgui/imgui_internal.h	/^    int                     ActiveIdBlockNavInputFlags;$/;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdClickOffset	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdHasBeenEditedBefore	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	src/vendor/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or na/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	src/vendor/imgui/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
Add	src/vendor/imgui/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Data.Size) {/;"	f	struct:ImPool	typeref:typename:T *
Add	src/vendor/imgui/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	src/vendor/imgui/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCurve	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const /;"	f	class:ImDrawList	typeref:typename:void
AddBuffer	src/VertexArray.cpp	/^void VertexArray::AddBuffer(const VertexBuffer& vb, const VertexBufferLayout& layout){$/;"	f	class:VertexArray	typeref:typename:void
AddCallback	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	src/vendor/imgui/imgui.h	/^    inline void     AddChar(ImWchar c)  { SetBit(c); }                          \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddConvexPolyFilled	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	src/vendor/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	src/vendor/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(unsigned int id, int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawListToDrawData	src/vendor/imgui/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	typeref:typename:void	file:
AddFont	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	src/vendor/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::AddGlyph(ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float/;"	f	class:ImFont	typeref:typename:void
AddImage	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const I/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, con/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, /;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	src/vendor/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	src/vendor/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	src/vendor/imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	src/vendor/imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddPolyline	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, bool close/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
AddRanges	src/vendor/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, ImDrawCorn/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, ImDr/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& a, const ImVec2& c, ImU32 col_upr_left, I/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	src/vendor/imgui/imgui.cpp	/^static void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddText	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	src/vendor/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	src/vendor/imgui/imgui.cpp	/^static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	src/vendor/imgui/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AdvanceX	src/vendor/imgui/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AlignFirstTextHeightToWidgets	src/vendor/imgui/imgui.h	/^    static inline void  AlignFirstTextHeightToWidgets()       { AlignTextToFramePadding(); }$/;"	f	namespace:ImGui	typeref:typename:void
AlignTextToFramePadding	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
Alpha	src/vendor/imgui/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AngleMax12	src/vendor/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	src/vendor/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AntiAliasedFill	src/vendor/imgui/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliasing on filled shapes (rounded /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	src/vendor/imgui/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliasing on lines\/borders. Disable/;"	m	struct:ImGuiStyle	typeref:typename:bool
Appearing	src/vendor/imgui/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ArrowButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascent	src/vendor/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AutoFitChildAxises	src/vendor/imgui/imgui_internal.h	/^    int                     AutoFitChildAxises;$/;"	m	struct:ImGuiWindow	typeref:typename:int
AutoFitFramesX	src/vendor/imgui/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:int
AutoFitFramesY	src/vendor/imgui/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:int
AutoFitOnlyGrows	src/vendor/imgui/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoPosLastDirection	src/vendor/imgui/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	src/vendor/imgui/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	src/vendor/imgui/imgui_demo.cpp	/^    bool                AutoScroll;     \/\/ Keep scrolling if already at the bottom$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BackendFlags	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	src/vendor/imgui/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	src/vendor/imgui/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	src/vendor/imgui/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	src/vendor/imgui/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	src/vendor/imgui/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:void *
BackgroundDrawList	src/vendor/imgui/imgui_internal.h	/^    ImDrawList              BackgroundDrawList;                 \/\/ First draw list to be rende/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
Backup	src/vendor/imgui/imgui_internal.h	/^    void Backup()           { ImGuiWindow* window = GImGui->CurrentWindow; LastItemId = window->/;"	f	struct:ImGuiItemHoveredDataBackup	typeref:typename:void
BackupActiveIdIsAlive	src/vendor/imgui/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	src/vendor/imgui/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	src/vendor/imgui/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	src/vendor/imgui/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	src/vendor/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon603f4350010a	typeref:typename:float[2]
BackupGroupOffset	src/vendor/imgui/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupIndent	src/vendor/imgui/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	src/vendor/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon603f4350010a	typeref:typename:int[2]
BackupValue	src/vendor/imgui/imgui_internal.h	/^    ImVec4      BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	src/vendor/imgui/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
Begin	src/vendor/imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	src/vendor/imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_first_use, float bg_alpha_o/;"	f	class:ImGui	typeref:typename:bool
Begin	src/vendor/imgui/imgui.cpp	/^void ImGuiListClipper::Begin(int count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_f/;"	f	class:ImGui	typeref:typename:bool
BeginChild	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags/;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	src/vendor/imgui/imgui.cpp	/^static bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool borde/;"	f	class:ImGui	typeref:typename:bool	file:
BeginChildFrame	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginColumns	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	src/vendor/imgui/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDragDropSource	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	src/vendor/imgui/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginMainMenuBar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginOrderWithinContext	src/vendor/imgui/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Order within entire imgui c/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	src/vendor/imgui/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Order within immediate pare/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, int mouse_button, bool also_over_items)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	src/vendor/imgui/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>BeginPopupStack;                    \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	src/vendor/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	src/vendor/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	src/vendor/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	src/vendor/imgui/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:void
BeginTooltipEx	src/vendor/imgui/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, bool override_previous_tooltip)$/;"	f	class:ImGui	typeref:typename:void
BgAlphaVal	src/vendor/imgui/imgui_internal.h	/^    float                       BgAlphaVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
Bind	src/IndexBuffer.cpp	/^void IndexBuffer::Bind() const {$/;"	f	class:IndexBuffer	typeref:typename:void
Bind	src/Shader.cpp	/^void Shader::Bind() const {$/;"	f	class:Shader	typeref:typename:void
Bind	src/Texture.cpp	/^void Texture::Bind(unsigned int slot) const {$/;"	f	class:Texture	typeref:typename:void
Bind	src/VertexArray.cpp	/^void VertexArray::Bind() const {$/;"	f	class:VertexArray	typeref:typename:void
Bind	src/VertexBuffer.cpp	/^void VertexBuffer::Bind() const {$/;"	f	class:VertexBuffer	typeref:typename:void
BringWindowToDisplayBack	src/vendor/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	src/vendor/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	src/vendor/imgui/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	src/vendor/imgui/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	src/vendor/imgui/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	src/vendor/imgui/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
BufCapacityA	src/vendor/imgui/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	src/vendor/imgui/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	src/vendor/imgui/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	src/vendor/imgui/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Build	src/vendor/imgui/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	src/vendor/imgui/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	src/vendor/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
Bullet	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	src/vendor/imgui/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CMAKE_AR	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_ARCHIVE_OUTPUT_DIRECTORY	CMakeLists.txt	/^set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\/lib)$/;"	v
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/jacky\/Projects\/JollyEngine$/;"	m
CMAKE_C11_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C90_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_CYGWIN	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_CYGWIN	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_GNUCC	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_MINGW	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_COMPILER_IS_MINGW	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_CROSSCOMPILING	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER	CMakeLists.txt	/^set (CMAKE_CXX_COMPILER \/usr\/bin\/g++)$/;"	v
CMAKE_CXX_COMPILER_ABI	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_ARG1	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_CXX_COMPILER_ID	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_VERSION	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "10.2.0")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/10.2.0;\/usr\/include\/c++\/10./;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0;\/usr\/lib/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_C_ABI_COMPILED	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v
CMAKE_C_COMPILER	CMakeLists.txt	/^set (CMAKE_C_COMPILER \/usr\/bin\/g++)$/;"	v
CMAKE_C_COMPILER_ABI	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_ARG1	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_C_COMPILER_ID	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LOADED	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_VERSION	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "10.2.0")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_IGNORE_EXTENSIONS	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0\/include;/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0;\/usr\/lib;\//;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LINKER_PREFERENCE	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")$/;"	v
CMAKE_DEPENDS_CHECK_CXX	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_GENERATOR	CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_LANGUAGES	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.8.3-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM_NAME	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.8.3-arch1-1")$/;"	v
CMAKE_INSTALL_COMPONENT	cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "Debug")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_OUTPUT_DIRECTORY	CMakeLists.txt	/^set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\/lib)$/;"	v
CMAKE_LINKER	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_MAKEFILE_DEPENDS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MT	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_RANLIB	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/jacky\/Projects\/JollyEngine")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/jacky\/Projects\/JollyEngine")$/;"	v
CMAKE_RUNTIME_OUTPUT_DIRECTORY	CMakeLists.txt	/^set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\/bin)$/;"	v
CMAKE_SIZEOF_VOID_P	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/jacky\/Projects\/JollyEngine$/;"	m
CMAKE_SYSTEM	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.8.3-arch1-1")$/;"	v
CMAKE_SYSTEM_LOADED	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	CMakeFiles/3.18.2/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.8.3-arch1-1")$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	CMakeFiles/JollyEngine.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
COLUMNS_HIT_RECT_HALF_WIDTH	src/vendor/imgui/imgui_widgets.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
COMPILER_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CPP_VERSION_COMPILE_FLAG	CMakeLists.txt	/^set (CPP_VERSION_COMPILE_FLAG -std=c++1z)$/;"	v
CXX_STD	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CYGWIN	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
CYGWIN	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
C_DIALECT	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
CalcContentSize	src/vendor/imgui/imgui.cpp	/^static ImVec2 CalcContentSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcCustomRectUV	src/vendor/imgui/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcExtraSpace	src/vendor/imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::CalcExtraSpace(float avail_w)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
CalcFontSize	src/vendor/imgui/imgui_internal.h	/^    float       CalcFontSize() const        { ImGuiContext& g = *GImGui; float scale = g.FontBas/;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemRectClosestPoint	src/vendor/imgui/imgui.h	/^    static inline ImVec2 CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge = false, float/;"	f	namespace:ImGui	typeref:typename:ImVec2
CalcItemSize	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	src/vendor/imgui/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcListClipping	src/vendor/imgui/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, /;"	f	class:ImGui	typeref:typename:void
CalcMaxPopupHeightFromItemCount	src/vendor/imgui/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	src/vendor/imgui/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges)$/;"	f	typeref:typename:ImVec2	file:
CalcResizePosSizeFromAnyCorner	src/vendor/imgui/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcSizeAfterConstraint	src/vendor/imgui/imgui.cpp	/^static ImVec2 CalcSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)$/;"	f	typeref:typename:ImVec2	file:
CalcSizeAutoFit	src/vendor/imgui/imgui.cpp	/^static ImVec2 CalcSizeAutoFit(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcTextSize	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	src/vendor/imgui/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicPressedRepeatAmount	src/vendor/imgui/imgui.cpp	/^int ImGui::CalcTypematicPressedRepeatAmount(float t, float t_prev, float repeat_delay, float rep/;"	f	class:ImGui	typeref:typename:int
CalcWindowExpectedSize	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWordWrapPositionA	src/vendor/imgui/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWrapWidthForPos	src/vendor/imgui/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CanMergeDrawCommands	src/vendor/imgui/imgui_draw.cpp	/^static inline bool CanMergeDrawCommands(ImDrawCmd* a, ImDrawCmd* b)$/;"	f	typeref:typename:bool	file:
Capacity	src/vendor/imgui/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	src/vendor/imgui/imgui.cpp	/^void ImGui::CaptureKeyboardFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
CaptureMouseFromApp	src/vendor/imgui/imgui.cpp	/^void ImGui::CaptureMouseFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
ChannelsMerge	src/vendor/imgui/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	src/vendor/imgui/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	src/vendor/imgui/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
CheckProgram	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckStacksSize	src/vendor/imgui/imgui.cpp	/^static void CheckStacksSize(ImGuiWindow* window, bool write)$/;"	f	typeref:typename:void	file:
Checkbox	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	src/vendor/imgui/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildRounding	src/vendor/imgui/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	src/vendor/imgui/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleVtx12	src/vendor/imgui/imgui_internal.h	/^    ImVec2          CircleVtx12[12];$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[12]
ClampWindowRect	src/vendor/imgui/imgui.cpp	/^static inline void ClampWindowRect(ImGuiWindow* window, const ImRect& rect, const ImVec2& paddin/;"	f	typeref:typename:void	file:
Clear	src/OpenGLRenderer.cpp	/^void OpenGLRenderer::Clear() const {$/;"	f	class:OpenGLRenderer	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    inline void     Clear()             { int size_in_bytes = 0x10000 \/ 8; UsedChars.resize(siz/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	src/vendor/imgui/imgui.h	/^    void Clear()    { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCo/;"	f	struct:ImDrawData	typeref:typename:void
Clear	src/vendor/imgui/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::Clear()$/;"	f	class:ImDrawList	typeref:typename:void
Clear	src/vendor/imgui/imgui_internal.h	/^    void            Clear()                 { Storage.clear(); }$/;"	f	struct:ImBoolVector	typeref:typename:void
Clear	src/vendor/imgui/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	src/vendor/imgui/imgui_internal.h	/^    void Clear()            { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].resize(0)/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
Clear	src/vendor/imgui/imgui_internal.h	/^    void Clear()         { ID = SelectScopeId = 0; Window = NULL; DistBox = DistCenter = DistAxi/;"	f	struct:ImGuiNavMoveResult	typeref:typename:void
Clear	src/vendor/imgui/imgui_internal.h	/^    void Clear()$/;"	f	struct:ImGuiColumns	typeref:typename:void
ClearActiveID	src/vendor/imgui/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearDragDrop	src/vendor/imgui/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearFlags	src/vendor/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; }$/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	src/vendor/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
ClearFreeMemory	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	src/vendor/imgui/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	src/vendor/imgui/imgui_internal.h	/^    void ClearFreeMemory()  { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].clear(); /;"	f	struct:ImDrawDataBuilder	typeref:typename:void
ClearInputCharacters	src/vendor/imgui/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearLog	src/vendor/imgui/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	src/vendor/imgui/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	src/vendor/imgui/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	src/vendor/imgui/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClipRect	src/vendor/imgui/imgui.h	/^    ImVec4          ClipRect;               \/\/ Clipping rectangle (x1, y1, x2, y2). Subtract I/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	src/vendor/imgui/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiColumnData	typeref:typename:ImRect
ClipRectFullscreen	src/vendor/imgui/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	src/vendor/imgui/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	src/vendor/imgui/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardUserData	src/vendor/imgui/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
CloneOutput	src/vendor/imgui/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)\/\/, float size)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	src/vendor/imgui/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	src/vendor/imgui/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	src/vendor/imgui/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList /;"	m	struct:ImDrawData	typeref:typename:ImDrawList **
CmdListsCount	src/vendor/imgui/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	src/vendor/imgui/imgui.h	/^    ImWchar         Codepoint;          \/\/ 0x0000..0xFFFF$/;"	m	struct:ImFontGlyph	typeref:typename:ImWchar
Col	src/vendor/imgui/imgui_internal.h	/^    ImGuiCol    Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
Collapsed	src/vendor/imgui/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	src/vendor/imgui/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	src/vendor/imgui/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	src/vendor/imgui/imgui_demo.cpp	/^    ImVec4      Color;          \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	src/vendor/imgui/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	src/vendor/imgui/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	src/vendor/imgui/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	src/vendor/imgui/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	src/vendor/imgui/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditOptions	src/vendor/imgui/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorModifiers	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorModifiers;                     \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorPicker3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	src/vendor/imgui/imgui_internal.h	/^    ImVec4                  ColorPickerRef;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorTooltip	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colors	src/vendor/imgui/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Columns	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiColumnData> Columns;$/;"	m	struct:ImGuiColumns	typeref:typename:ImVector<ImGuiColumnData>
Columns	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsMinSpacing	src/vendor/imgui/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsOffset	src/vendor/imgui/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiColumns>  ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiColumns>
Combo	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
Combo	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
Commands	src/vendor/imgui/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CompileShader	src/Shader.cpp	/^unsigned int Shader::CompileShader(unsigned int type, const std::string & source){$/;"	f	class:Shader	typeref:typename:unsigned int
ConfigData	src/vendor/imgui/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Internal data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	src/vendor/imgui/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	src/vendor/imgui/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigFlags	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	src/vendor/imgui/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Set to false to disab/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	src/vendor/imgui/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsMoveFromTitleBarOnly	src/vendor/imgui/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ [BETA] Set to true to/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	src/vendor/imgui/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	src/vendor/imgui/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	src/vendor/imgui/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	src/vendor/imgui/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	src/vendor/imgui/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Data.Data && p < Data.Data + /;"	f	struct:ImPool	typeref:typename:bool
ContentSize	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentsHeight	src/vendor/imgui/imgui_internal.h	/^    float               ContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ContentsRegionRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  ContentsRegionRect;                 \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
CornerPosN	src/vendor/imgui/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
CornerPosN1	src/vendor/imgui/imgui.cpp	/^            ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
CornerPosN2	src/vendor/imgui/imgui.cpp	/^            ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
Count	src/vendor/imgui/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Count	src/vendor/imgui/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CountGrep	src/vendor/imgui/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
CreateContext	src/vendor/imgui/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	src/vendor/imgui/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	src/vendor/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreatePrimitive	src/Mesh/MeshPrimitiveFactory.cpp	/^void MeshPrimitiveFactory::CreatePrimitive(MeshPrimitiveType type, const Mesh* oMesh)$/;"	f	class:MeshPrimitiveFactory	typeref:typename:void
CreateShader	src/Shader.cpp	/^unsigned int Shader::CreateShader(const std::string& vertexShader, const std::string& fragmentSh/;"	f	class:Shader	typeref:typename:unsigned int
CreateSquare	src/Mesh/MeshPrimitiveFactory.cpp	/^	Mesh* CreateSquare()$/;"	f	namespace:__anone11207070111	typeref:typename:Mesh *
CreateTriangle	src/Mesh/MeshPrimitiveFactory.cpp	/^	Mesh* CreateTriangle()$/;"	f	namespace:__anone11207070111	typeref:typename:Mesh *
CurLenA	src/vendor/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	src/vendor/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	src/vendor/imgui/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrLineSize	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	src/vendor/imgui/imgui_internal.h	/^    float                   CurrLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
Current	src/vendor/imgui/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CurrentColumns	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumns*           CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiColumns *
CurrentSize	src/vendor/imgui/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
CursorAnim	src/vendor/imgui/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	src/vendor/imgui/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	src/vendor/imgui/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	src/vendor/imgui/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate the size o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	src/vendor/imgui/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  CursorPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position in client area with pa/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	src/vendor/imgui/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	src/vendor/imgui/imgui_internal.h	/^    float           CurveTessellationTol;$/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	src/vendor/imgui/imgui_demo.cpp	/^    struct CustomConstraints \/\/ Helper functions to demonstrate programmatic constraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRect	src/vendor/imgui/imgui.h	/^    typedef ImFontAtlasCustomRect    CustomRect;         \/\/ OBSOLETED in 1.72+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect
CustomRectIds	src/vendor/imgui/imgui.h	/^    int                         CustomRectIds[1];   \/\/ Identifiers of custom texture rectangle/;"	m	struct:ImFontAtlas	typeref:typename:int[1]
CustomRects	src/vendor/imgui/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
DC	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEC	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
Data	src/vendor/imgui/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	src/vendor/imgui/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	src/vendor/imgui/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	src/vendor/imgui/imgui_internal.h	/^    ImVector<T>     Data;       \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
DataFrameCount	src/vendor/imgui/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	src/vendor/imgui/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	src/vendor/imgui/imgui.h	/^    char            DataType[32+1];     \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataTypeApplyOp	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const voi/;"	f	class:ImGui	typeref:typename:void
DataTypeApplyOpFromText	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataTyp/;"	f	class:ImGui	typeref:typename:bool
DataTypeFormatString	src/vendor/imgui/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* da/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	src/vendor/imgui/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugCheckVersionAndDataLayout	src/vendor/imgui/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugItemPickerActive	src/vendor/imgui/imgui_internal.h	/^    bool                    DebugItemPickerActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakID;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugStartItemPicker	src/vendor/imgui/imgui_internal.h	/^    inline void             DebugStartItemPicker() { GImGui->DebugItemPickerActive = true; }$/;"	f	namespace:ImGui	typeref:typename:void
DeclColumns	src/vendor/imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) \/\/ not using va_arg because /;"	f	class:ImGuiMenuColumns	typeref:typename:float
Decode85	src/vendor/imgui/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	src/vendor/imgui/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteChars	src/vendor/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Delivery	src/vendor/imgui/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	src/vendor/imgui/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Descent	src/vendor/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DesiredSize	src/vendor/imgui/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	src/vendor/imgui/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DimBgRatio	src/vendor/imgui/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	src/vendor/imgui/imgui_demo.cpp	/^    bool        Dirty;          \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	src/vendor/imgui/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
DisplayContents	src/vendor/imgui/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	src/vendor/imgui/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayEnd	src/vendor/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	src/vendor/imgui/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayOffset	src/vendor/imgui/imgui.h	/^    ImVec2                      DisplayOffset;      \/\/ 8     \/\/ in  \/\/ = (0,0)    \/\/ Off/;"	m	struct:ImFont	typeref:typename:ImVec2
DisplayPos	src/vendor/imgui/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Upper-left position of the viewport to render (/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySafeAreaPadding	src/vendor/imgui/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	src/vendor/imgui/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== io.DisplaySi/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	src/vendor/imgui/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	src/vendor/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	src/vendor/imgui/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	src/vendor/imgui/imgui_internal.h	/^    float         DistAxial;$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistBox	src/vendor/imgui/imgui_internal.h	/^    float         DistBox;      \/\/ Best candidate box distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistCenter	src/vendor/imgui/imgui_internal.h	/^    float         DistCenter;   \/\/ Best candidate center distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DoForceClose	src/vendor/imgui/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	src/vendor/imgui/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	src/vendor/imgui/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	src/vendor/imgui/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	src/vendor/imgui/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
DragBehavior	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* v, float v_speed, const void/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	src/vendor/imgui/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	src/vendor/imgui/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	src/vendor/imgui/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	src/vendor/imgui/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	src/vendor/imgui/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropMouseButton	src/vendor/imgui/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	src/vendor/imgui/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	src/vendor/imgui/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	src/vendor/imgui/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[8];         \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[8]
DragDropSourceFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	src/vendor/imgui/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  DragDropTargetRect;$/;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSourceOrTarget	src/vendor/imgui/imgui_internal.h	/^    bool                    DragDropWithinSourceOrTarget;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const/;"	f	class:ImGui	typeref:typename:bool
DragScalarN	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, flo/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	src/vendor/imgui/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	src/OpenGLRenderer.cpp	/^void OpenGLRenderer::Draw(const VertexArray& vertexArray, const IndexBuffer&  indexBuffer, const/;"	f	class:OpenGLRenderer	typeref:typename:void
Draw	src/vendor/imgui/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	src/vendor/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	src/vendor/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
DrawData	src/vendor/imgui/imgui_internal.h	/^    ImDrawData              DrawData;                           \/\/ Main ImDrawData instance to/;"	m	struct:ImGuiContext	typeref:typename:ImDrawData
DrawDataBuilder	src/vendor/imgui/imgui_internal.h	/^    ImDrawDataBuilder       DrawDataBuilder;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawDataBuilder
DrawList	src/vendor/imgui/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	src/vendor/imgui/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	src/vendor/imgui/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DstFont	src/vendor/imgui/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	src/vendor/imgui/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
EQUALS	Makefile	/^EQUALS = =$/;"	m
ElemCount	src/vendor/imgui/imgui.h	/^    unsigned int    ElemCount;              \/\/ Number of indices (multiple of 3) to be rendere/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	src/vendor/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
EmitItem	src/vendor/imgui/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	src/vendor/imgui/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	src/vendor/imgui/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
End	src/vendor/imgui/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	src/vendor/imgui/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	src/vendor/imgui/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui	typeref:typename:void
EndColumns	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	src/vendor/imgui/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	src/vendor/imgui/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	src/vendor/imgui/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndPopup	src/vendor/imgui/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	src/vendor/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	src/vendor/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	src/vendor/imgui/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
EventChar	src/vendor/imgui/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventKey	src/vendor/imgui/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	src/vendor/imgui/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	src/vendor/imgui/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	src/vendor/imgui/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	src/vendor/imgui/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	src/vendor/imgui/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	src/vendor/imgui/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	src/vendor/imgui/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	src/vendor/imgui/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	src/vendor/imgui/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAST_BITS	src/vendor/stb_image/stb_image.h	/^#define FAST_BITS /;"	d
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	src/vendor/imgui/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	src/vendor/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H      = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_ID	src/vendor/imgui/imgui_draw.cpp	/^const unsigned int FONT_ATLAS_DEFAULT_TEX_DATA_ID = 0x80000000;$/;"	v	typeref:typename:const unsigned int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	src/vendor/imgui/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * FONT_A/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF	src/vendor/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF = 108;$/;"	v	typeref:typename:const int
FRAGMENT	src/Shader.cpp	/^		FRAGMENT = 1$/;"	e	enum:Shader::ParseShader::ShaderType	file:
FallbackAdvanceX	src/vendor/imgui/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	src/vendor/imgui/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ in  \/\/ = '?'      \/\/ Rep/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	src/vendor/imgui/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Filter	src/vendor/imgui/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	src/vendor/imgui/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterImGuiLetters	src/vendor/imgui/imgui_demo.cpp	/^            struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	src/vendor/imgui/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWindowPosForPopup	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindGlyph	src/vendor/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	src/vendor/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	src/vendor/imgui/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindOrCreateColumns	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiColumns *
FindOrCreateWindowSettings	src/vendor/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindRenderedTextEnd	src/vendor/imgui/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	src/vendor/imgui/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	src/vendor/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	src/vendor/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowFocusIndex	src/vendor/imgui/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window) \/\/ FIXME-OPT O(N)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	src/vendor/imgui/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettings	src/vendor/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
Flags	src/vendor/imgui/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	src/vendor/imgui/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiColumnData	typeref:typename:ImGuiColumnsFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiColumnsFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenIntoSingleLayer	src/vendor/imgui/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder	typeref:typename:void
Floor	src/vendor/imgui/imgui_internal.h	/^    void        Floor()                             { Min.x = (float)(int)Min.x; Min.y = (float)/;"	f	struct:ImRect	typeref:typename:void
FocusCounterAll	src/vendor/imgui/imgui_internal.h	/^    int                     FocusCounterAll;        \/\/ Counter for focus\/tabbing system. Star/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusCounterTab	src/vendor/imgui/imgui_internal.h	/^    int                     FocusCounterTab;        \/\/ (same, but only count widgets which you/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusRequestCurrCounterAll	src/vendor/imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterAll;         \/\/ Any item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrCounterTab	src/vendor/imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterTab;         \/\/ Tab item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestCurrWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusRequestNextCounterAll	src/vendor/imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterAll;         \/\/ Stored for next frame$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextCounterTab	src/vendor/imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterTab;         \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestNextWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusTabPressed	src/vendor/imgui/imgui_internal.h	/^    bool                    FocusTabPressed;                    \/\/$/;"	m	struct:ImGuiContext	typeref:typename:bool
FocusTopMostWindowUnderOne	src/vendor/imgui/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
FocusableItemRegister	src/vendor/imgui/imgui.cpp	/^bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
FocusableItemUnregister	src/vendor/imgui/imgui.cpp	/^void ImGui::FocusableItemUnregister(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Font	src/vendor/imgui/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000):/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	src/vendor/imgui/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	src/vendor/imgui/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
FontAllowUserScaling	src/vendor/imgui/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	src/vendor/imgui/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ Io.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	src/vendor/imgui/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontData	src/vendor/imgui/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	src/vendor/imgui/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	src/vendor/imgui/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	src/vendor/imgui/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	src/vendor/imgui/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	src/vendor/imgui/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontNo	src/vendor/imgui/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	src/vendor/imgui/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	src/vendor/imgui/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	src/vendor/imgui/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontWindowScale	src/vendor/imgui/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	src/vendor/imgui/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	src/vendor/imgui/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForegroundDrawList	src/vendor/imgui/imgui_internal.h	/^    ImDrawList              ForegroundDrawList;                 \/\/ Last draw list to be render/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
FragmentSource	src/Shader.h	/^	std::string FragmentSource;$/;"	m	struct:ShaderProgramSource	typeref:typename:std::string
FrameBorderSize	src/vendor/imgui/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameCount	src/vendor/imgui/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountEnded	src/vendor/imgui/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	src/vendor/imgui/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramePadding	src/vendor/imgui/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	src/vendor/imgui/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FrameRounding	src/vendor/imgui/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameScopeActive	src/vendor/imgui/imgui_internal.h	/^    bool                    FrameScopeActive;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
FrameScopePushedImplicitWindow	src/vendor/imgui/imgui_internal.h	/^    bool                    FrameScopePushedImplicitWindow;     \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
FramebufferScale	src/vendor/imgui/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	src/vendor/imgui/imgui.h	/^    float       Framerate;                      \/\/ Application framerate estimation, in frame /;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	src/vendor/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[120]
FramerateSecPerFrameAccum	src/vendor/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameIdx	src/vendor/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
FreeIdx	src/vendor/imgui/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	src/vendor/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	src/vendor/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FuncHolder	src/vendor/imgui/imgui_demo.cpp	/^        struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { /;"	s	function:ShowDemoWindowWidgets	file:
Funcs	src/vendor/imgui/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	src/vendor/imgui/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	src/vendor/imgui/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	src/vendor/imgui/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	src/vendor/imgui/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GENTYPE_MAT	src/vendor/glm/detail/qualifier.hpp	/^		GENTYPE_MAT,$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_QUAT	src/vendor/glm/detail/qualifier.hpp	/^		GENTYPE_QUAT$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_VEC	src/vendor/glm/detail/qualifier.hpp	/^		GENTYPE_VEC,$/;"	e	enum:glm::detail::genTypeEnum
GImAllocatorAllocFunc	src/vendor/imgui/imgui.cpp	/^static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;$/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImAllocatorFreeFunc	src/vendor/imgui/imgui.cpp	/^static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;$/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GImAllocatorUserData	src/vendor/imgui/imgui.cpp	/^static void*    GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	src/vendor/imgui/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GLFW_EXPOSE_NATIVE_WIN32	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_HAS_PER_MONITOR_DPI	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_PER_MONITOR_DPI /;"	d	file:
GLFW_HAS_VULKAN	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_VULKAN /;"	d	file:
GLFW_HAS_WINDOW_ALPHA	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_ALPHA /;"	d	file:
GLFW_HAS_WINDOW_HOVERED	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_HOVERED /;"	d	file:
GLFW_HAS_WINDOW_TOPMOST	src/vendor/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_TOPMOST /;"	d	file:
GLM_ALIGNED_TYPEDEF	src/vendor/glm/detail/setup.hpp	/^#	define GLM_ALIGNED_TYPEDEF(/;"	d
GLM_ARCH	src/vendor/glm/simd/platform.h	/^#		define GLM_ARCH /;"	d
GLM_ARCH	src/vendor/glm/simd/platform.h	/^#	define GLM_ARCH /;"	d
GLM_ARCH_ARM	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARM	/;"	d
GLM_ARCH_ARM_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARM_BIT	/;"	d
GLM_ARCH_AVX	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX	/;"	d
GLM_ARCH_AVX2	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX2	/;"	d
GLM_ARCH_AVX2_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX2_BIT	/;"	d
GLM_ARCH_AVX_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX_BIT	/;"	d
GLM_ARCH_MIPS	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_MIPS	/;"	d
GLM_ARCH_MIPS_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_MIPS_BIT	/;"	d
GLM_ARCH_NEON	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_NEON	/;"	d
GLM_ARCH_NEON_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_NEON_BIT	/;"	d
GLM_ARCH_PPC	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_PPC	/;"	d
GLM_ARCH_PPC_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_PPC_BIT	/;"	d
GLM_ARCH_SIMD_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SIMD_BIT	/;"	d
GLM_ARCH_SSE	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE	/;"	d
GLM_ARCH_SSE2	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE2	/;"	d
GLM_ARCH_SSE2_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE2_BIT	/;"	d
GLM_ARCH_SSE3	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE3	/;"	d
GLM_ARCH_SSE3_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE3_BIT	/;"	d
GLM_ARCH_SSE41	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE41	/;"	d
GLM_ARCH_SSE41_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE41_BIT	/;"	d
GLM_ARCH_SSE42	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE42	/;"	d
GLM_ARCH_SSE42_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE42_BIT	/;"	d
GLM_ARCH_SSE_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE_BIT	/;"	d
GLM_ARCH_SSSE3	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3	/;"	d
GLM_ARCH_SSSE3_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3_BIT	/;"	d
GLM_ARCH_UNKNOWN	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_UNKNOWN	/;"	d
GLM_ARCH_X86	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_X86	/;"	d
GLM_ARCH_X86_BIT	src/vendor/glm/simd/platform.h	/^#define GLM_ARCH_X86_BIT	/;"	d
GLM_CLIP_CONTROL_LH_BIT	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_BIT	/;"	d
GLM_CLIP_CONTROL_LH_NO	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_NO /;"	d
GLM_CLIP_CONTROL_LH_ZO	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_ZO /;"	d
GLM_CLIP_CONTROL_NO_BIT	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_NO_BIT	/;"	d
GLM_CLIP_CONTROL_RH_BIT	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_BIT	/;"	d
GLM_CLIP_CONTROL_RH_NO	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_NO /;"	d
GLM_CLIP_CONTROL_RH_ZO	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_ZO /;"	d
GLM_CLIP_CONTROL_ZO_BIT	src/vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_ZO_BIT	/;"	d
GLM_COMPILER	src/vendor/glm/simd/platform.h	/^#			define GLM_COMPILER /;"	d
GLM_COMPILER	src/vendor/glm/simd/platform.h	/^#		define GLM_COMPILER /;"	d
GLM_COMPILER	src/vendor/glm/simd/platform.h	/^#	define GLM_COMPILER /;"	d
GLM_COMPILER_CLANG	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG	/;"	d
GLM_COMPILER_CLANG34	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG34	/;"	d
GLM_COMPILER_CLANG35	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG35	/;"	d
GLM_COMPILER_CLANG36	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG36	/;"	d
GLM_COMPILER_CLANG37	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG37	/;"	d
GLM_COMPILER_CLANG38	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG38	/;"	d
GLM_COMPILER_CLANG39	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG39	/;"	d
GLM_COMPILER_CLANG40	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG40	/;"	d
GLM_COMPILER_CLANG41	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG41	/;"	d
GLM_COMPILER_CLANG42	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG42	/;"	d
GLM_COMPILER_CUDA	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA	/;"	d
GLM_COMPILER_CUDA70	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA70	/;"	d
GLM_COMPILER_CUDA75	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA75	/;"	d
GLM_COMPILER_CUDA80	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA80	/;"	d
GLM_COMPILER_GCC	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC	/;"	d
GLM_COMPILER_GCC46	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC46	/;"	d
GLM_COMPILER_GCC47	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC47	/;"	d
GLM_COMPILER_GCC48	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC48	/;"	d
GLM_COMPILER_GCC49	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC49	/;"	d
GLM_COMPILER_GCC5	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC5	/;"	d
GLM_COMPILER_GCC6	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC6	/;"	d
GLM_COMPILER_GCC7	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC7	/;"	d
GLM_COMPILER_GCC8	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC8	/;"	d
GLM_COMPILER_INTEL	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL	/;"	d
GLM_COMPILER_INTEL14	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL14	/;"	d
GLM_COMPILER_INTEL15	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL15	/;"	d
GLM_COMPILER_INTEL16	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL16	/;"	d
GLM_COMPILER_INTEL17	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL17	/;"	d
GLM_COMPILER_UNKNOWN	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_UNKNOWN	/;"	d
GLM_COMPILER_VC	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC	/;"	d
GLM_COMPILER_VC12	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC12	/;"	d
GLM_COMPILER_VC14	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC14	/;"	d
GLM_COMPILER_VC15	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15	/;"	d
GLM_COMPILER_VC15_3	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_3	/;"	d
GLM_COMPILER_VC15_5	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_5	/;"	d
GLM_COMPILER_VC15_6	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_6	/;"	d
GLM_COMPILER_VC15_7	src/vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_7	/;"	d
GLM_CONFIG_ALIGNED_GENTYPES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ALIGNED_GENTYPES /;"	d
GLM_CONFIG_ANONYMOUS_STRUCT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ANONYMOUS_STRUCT /;"	d
GLM_CONFIG_CLIP_CONTROL	src/vendor/glm/detail/setup.hpp	/^#		define GLM_CONFIG_CLIP_CONTROL /;"	d
GLM_CONFIG_CONSTEXP	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CONSTEXP /;"	d
GLM_CONFIG_CTOR_INIT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CTOR_INIT /;"	d
GLM_CONFIG_DEFAULTED_FUNCTIONS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_DEFAULTED_FUNCTIONS /;"	d
GLM_CONFIG_LENGTH_TYPE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_LENGTH_TYPE	/;"	d
GLM_CONFIG_NULLPTR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_NULLPTR /;"	d
GLM_CONFIG_PRECISION_BOOL	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_BOOL	/;"	d
GLM_CONFIG_PRECISION_DOUBLE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_DOUBLE	/;"	d
GLM_CONFIG_PRECISION_FLOAT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_FLOAT	/;"	d
GLM_CONFIG_PRECISION_INT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_INT	/;"	d
GLM_CONFIG_PRECISION_UINT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_UINT	/;"	d
GLM_CONFIG_SIMD	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SIMD /;"	d
GLM_CONFIG_SWIZZLE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SWIZZLE /;"	d
GLM_CONFIG_UNRESTRICTED_GENTYPE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_UNRESTRICTED_GENTYPE /;"	d
GLM_CONFIG_XYZW_ONLY	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_XYZW_ONLY /;"	d
GLM_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR /;"	d
GLM_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR$/;"	d
GLM_COUNTOF	src/vendor/glm/detail/setup.hpp	/^#	define GLM_COUNTOF(/;"	d
GLM_CTOR_INITIALISATION	src/vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALISATION	/;"	d
GLM_CTOR_INITIALIZER_LIST	src/vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALIZER_LIST	/;"	d
GLM_CTOR_INIT_DISABLE	src/vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INIT_DISABLE	/;"	d
GLM_CUDA_FUNC_DECL	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL /;"	d
GLM_CUDA_FUNC_DECL	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL$/;"	d
GLM_CUDA_FUNC_DEF	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF /;"	d
GLM_CUDA_FUNC_DEF	src/vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF$/;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ACCESS_CONTROL_SFINAE$/;"	d
GLM_CXX11_ALIAS_TEMPLATE	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIAS_TEMPLATE$/;"	d
GLM_CXX11_ALIGNAS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIGNAS$/;"	d
GLM_CXX11_ATTRIBUTES	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ATTRIBUTES$/;"	d
GLM_CXX11_AUTO_TYPE	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_AUTO_TYPE$/;"	d
GLM_CXX11_CONSTEXPR	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_CONSTEXPR$/;"	d
GLM_CXX11_DECLTYPE	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DECLTYPE$/;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULTED_FUNCTIONS$/;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS$/;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELEGATING_CONSTRUCTORS$/;"	d
GLM_CXX11_DELETED_FUNCTIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELETED_FUNCTIONS$/;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_EXPLICIT_CONVERSIONS$/;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_GENERALIZED_INITIALIZERS$/;"	d
GLM_CXX11_IMPLICIT_MOVES	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_IMPLICIT_MOVES$/;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_INHERITING_CONSTRUCTORS$/;"	d
GLM_CXX11_INLINE_NAMESPACES	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_INLINE_NAMESPACES$/;"	d
GLM_CXX11_LAMBDAS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_LAMBDAS$/;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS$/;"	d
GLM_CXX11_NOEXCEPT	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NOEXCEPT$/;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NONSTATIC_MEMBER_INIT$/;"	d
GLM_CXX11_NULLPTR	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NULLPTR$/;"	d
GLM_CXX11_OVERRIDE_CONTROL	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_OVERRIDE_CONTROL$/;"	d
GLM_CXX11_RANGE_FOR	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RANGE_FOR$/;"	d
GLM_CXX11_RAW_STRING_LITERALS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RAW_STRING_LITERALS$/;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS$/;"	d
GLM_CXX11_RVALUE_REFERENCES	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RVALUE_REFERENCES$/;"	d
GLM_CXX11_STATIC_ASSERT	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STATIC_ASSERT	src/vendor/glm/detail/_features.hpp	/^#	define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STRONG_ENUMS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_STRONG_ENUMS$/;"	d
GLM_CXX11_TRAILING_RETURN	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_TRAILING_RETURN$/;"	d
GLM_CXX11_UNICODE_LITERALS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNICODE_LITERALS$/;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNRESTRICTED_UNIONS$/;"	d
GLM_CXX11_USER_LITERALS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_USER_LITERALS$/;"	d
GLM_CXX11_VARIADIC_TEMPLATES	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_VARIADIC_TEMPLATES$/;"	d
GLM_CXX98_EXCEPTIONS	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX98_EXCEPTIONS$/;"	d
GLM_CXX98_RTTI	src/vendor/glm/detail/_features.hpp	/^#		define GLM_CXX98_RTTI$/;"	d
GLM_DEFAULT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT /;"	d
GLM_DEFAULT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT$/;"	d
GLM_DEPRECATED	src/vendor/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED /;"	d
GLM_DEPRECATED	src/vendor/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED$/;"	d
GLM_DISABLE	src/vendor/glm/detail/setup.hpp	/^#define GLM_DISABLE	/;"	d
GLM_ENABLE	src/vendor/glm/detail/setup.hpp	/^#define GLM_ENABLE	/;"	d
GLM_ENABLE_EXPERIMENTAL	src/vendor/glm/detail/glm.cpp	/^#define GLM_ENABLE_EXPERIMENTAL$/;"	d	file:
GLM_EXPLICIT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT /;"	d
GLM_EXPLICIT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT$/;"	d
GLM_EXTRACT_WORDS	src/vendor/glm/ext/scalar_ulp.inl	/^#define GLM_EXTRACT_WORDS(/;"	d	file:
GLM_FORCE_ALIGNED_GENTYPES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_DEFAULT_ALIGNED_GENTYPES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_INTRINSICS	src/vendor/glm/simd/platform.h	/^#	define GLM_FORCE_INTRINSICS$/;"	d
GLM_FORCE_SWIZZLE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_SWIZZLE$/;"	d
GLM_FUNC_DECL	src/vendor/glm/detail/setup.hpp	/^#define GLM_FUNC_DECL /;"	d
GLM_FUNC_QUALIFIER	src/vendor/glm/detail/setup.hpp	/^#define GLM_FUNC_QUALIFIER /;"	d
GLM_GET_FLOAT_WORD	src/vendor/glm/ext/scalar_ulp.inl	/^#define GLM_GET_FLOAT_WORD(/;"	d	file:
GLM_HAS_ALIGNOF	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_ALIGNOF /;"	d
GLM_HAS_ASSIGNABLE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_ASSIGNABLE /;"	d
GLM_HAS_BITSCAN_WINDOWS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_BITSCAN_WINDOWS /;"	d
GLM_HAS_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_CONSTEXPR /;"	d
GLM_HAS_CXX11_STL	src/vendor/glm/detail/setup.hpp	/^#		define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_CXX11_STL	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_DEFAULTED_FUNCTIONS /;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_EXPLICIT_CONVERSION_OPERATORS /;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_EXTENDED_INTEGER_TYPE /;"	d
GLM_HAS_IF_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^# 	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_INITIALIZER_LISTS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_INITIALIZER_LISTS /;"	d
GLM_HAS_MAKE_SIGNED	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_MAKE_SIGNED /;"	d
GLM_HAS_OPENMP	src/vendor/glm/detail/setup.hpp	/^#			define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	src/vendor/glm/detail/setup.hpp	/^#		define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_OPENMP /;"	d
GLM_HAS_RANGE_FOR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_RANGE_FOR /;"	d
GLM_HAS_RVALUE_REFERENCES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_RVALUE_REFERENCES /;"	d
GLM_HAS_STATIC_ASSERT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_STATIC_ASSERT /;"	d
GLM_HAS_TEMPLATE_ALIASES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_TEMPLATE_ALIASES /;"	d
GLM_HAS_TRIVIAL_QUERIES	src/vendor/glm/detail/setup.hpp	/^#define GLM_HAS_TRIVIAL_QUERIES /;"	d
GLM_HAS_UNRESTRICTED_UNIONS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_UNRESTRICTED_UNIONS /;"	d
GLM_HIGHP	src/vendor/glm/detail/setup.hpp	/^#define GLM_HIGHP	/;"	d
GLM_IF_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_IF_CONSTEXPR /;"	d
GLM_IF_CONSTEXPR	src/vendor/glm/detail/setup.hpp	/^# 	define GLM_IF_CONSTEXPR /;"	d
GLM_IMPLEMENT_SCAL_MULT	src/vendor/glm/gtx/scalar_multiplication.hpp	/^#define GLM_IMPLEMENT_SCAL_MULT(/;"	d
GLM_INLINE	src/vendor/glm/detail/setup.hpp	/^#		define GLM_INLINE /;"	d
GLM_INLINE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_INLINE /;"	d
GLM_INSERT_WORDS	src/vendor/glm/ext/scalar_ulp.inl	/^#define GLM_INSERT_WORDS(/;"	d	file:
GLM_LANG	src/vendor/glm/detail/setup.hpp	/^#		define GLM_LANG /;"	d
GLM_LANG	src/vendor/glm/detail/setup.hpp	/^#	define GLM_LANG /;"	d
GLM_LANG_CXX03	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03	/;"	d
GLM_LANG_CXX03_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03_FLAG	/;"	d
GLM_LANG_CXX0X	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X	/;"	d
GLM_LANG_CXX0X_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X_FLAG	/;"	d
GLM_LANG_CXX11	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11	/;"	d
GLM_LANG_CXX11_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11_FLAG	/;"	d
GLM_LANG_CXX14	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14	/;"	d
GLM_LANG_CXX14_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14_FLAG	/;"	d
GLM_LANG_CXX17	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17	/;"	d
GLM_LANG_CXX17_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17_FLAG	/;"	d
GLM_LANG_CXX2A	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX2A	/;"	d
GLM_LANG_CXX2A_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX2A_FLAG	/;"	d
GLM_LANG_CXX98	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98	/;"	d
GLM_LANG_CXX98_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98_FLAG	/;"	d
GLM_LANG_CXXGNU	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU	/;"	d
GLM_LANG_CXXGNU_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU_FLAG	/;"	d
GLM_LANG_CXXMS	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS	/;"	d
GLM_LANG_CXXMS_FLAG	src/vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS_FLAG	/;"	d
GLM_LANG_EXT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_LANG_EXT /;"	d
GLM_LANG_PLATFORM	src/vendor/glm/detail/setup.hpp	/^#				define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	src/vendor/glm/detail/setup.hpp	/^#			define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	src/vendor/glm/detail/setup.hpp	/^#		define GLM_LANG_PLATFORM /;"	d
GLM_LANG_STL11_FORCED	src/vendor/glm/detail/setup.hpp	/^#	define GLM_LANG_STL11_FORCED$/;"	d
GLM_LENGTH_INT	src/vendor/glm/detail/setup.hpp	/^#define GLM_LENGTH_INT	/;"	d
GLM_LENGTH_SIZE_T	src/vendor/glm/detail/setup.hpp	/^#define GLM_LENGTH_SIZE_T	/;"	d
GLM_LOWP	src/vendor/glm/detail/setup.hpp	/^#define GLM_LOWP	/;"	d
GLM_MEDIUMP	src/vendor/glm/detail/setup.hpp	/^#define GLM_MEDIUMP	/;"	d
GLM_MESSAGES	src/vendor/glm/detail/setup.hpp	/^#	define GLM_MESSAGES /;"	d
GLM_MESSAGE_DISPLAYED	src/vendor/glm/detail/setup.hpp	/^#	define GLM_MESSAGE_DISPLAYED$/;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	src/vendor/glm/ext.hpp	/^#	define GLM_MESSAGE_EXT_INCLUDED_DISPLAYED$/;"	d
GLM_MODEL	src/vendor/glm/detail/setup.hpp	/^#	define GLM_MODEL	/;"	d
GLM_MODEL_32	src/vendor/glm/simd/platform.h	/^#define GLM_MODEL_32	/;"	d
GLM_MODEL_64	src/vendor/glm/simd/platform.h	/^#define GLM_MODEL_64	/;"	d
GLM_MUTABLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_MUTABLE$/;"	d
GLM_NEVER_INLINE	src/vendor/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE /;"	d
GLM_NEVER_INLINE	src/vendor/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE$/;"	d
GLM_NEVER_INLINE	src/vendor/glm/detail/setup.hpp	/^#	define GLM_NEVER_INLINE$/;"	d
GLM_NULLPTR	src/vendor/glm/detail/setup.hpp	/^#	define GLM_NULLPTR /;"	d
GLM_PLATFORM	src/vendor/glm/simd/platform.h	/^#	define GLM_PLATFORM /;"	d
GLM_PLATFORM_ANDROID	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_ANDROID	/;"	d
GLM_PLATFORM_APPLE	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_APPLE	/;"	d
GLM_PLATFORM_CHROME_NACL	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_CHROME_NACL	/;"	d
GLM_PLATFORM_CYGWIN	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_CYGWIN	/;"	d
GLM_PLATFORM_LINUX	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_LINUX	/;"	d
GLM_PLATFORM_QNXNTO	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_QNXNTO	/;"	d
GLM_PLATFORM_UNIX	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_UNIX	/;"	d
GLM_PLATFORM_UNKNOWN	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_UNKNOWN	/;"	d
GLM_PLATFORM_WINCE	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_WINCE	/;"	d
GLM_PLATFORM_WINDOWS	src/vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_WINDOWS	/;"	d
GLM_SETUP_INCLUDED	src/vendor/glm/detail/setup.hpp	/^#define GLM_SETUP_INCLUDED	/;"	d
GLM_SET_FLOAT_WORD	src/vendor/glm/ext/scalar_ulp.inl	/^#define GLM_SET_FLOAT_WORD(/;"	d	file:
GLM_SILENT_WARNINGS	src/vendor/glm/detail/setup.hpp	/^#	define GLM_SILENT_WARNINGS /;"	d
GLM_STATIC_ASSERT	src/vendor/glm/detail/setup.hpp	/^#	define GLM_STATIC_ASSERT(/;"	d
GLM_STR	src/vendor/glm/detail/setup.hpp	/^#		define GLM_STR(/;"	d
GLM_STR_HELPER	src/vendor/glm/detail/setup.hpp	/^#		define GLM_STR_HELPER(/;"	d
GLM_SWIZZLE2_2_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_2_MEMBERS(/;"	d
GLM_SWIZZLE2_3_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_3_MEMBERS(/;"	d
GLM_SWIZZLE2_4_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_4_MEMBERS(/;"	d
GLM_SWIZZLE3_2_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_2_MEMBERS(/;"	d
GLM_SWIZZLE3_3_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_3_MEMBERS(/;"	d
GLM_SWIZZLE3_4_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_4_MEMBERS(/;"	d
GLM_SWIZZLE4_2_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_2_MEMBERS(/;"	d
GLM_SWIZZLE4_3_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_3_MEMBERS(/;"	d
GLM_SWIZZLE4_4_MEMBERS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_4_MEMBERS(/;"	d
GLM_SWIZZLE_DISABLED	src/vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_DISABLED	/;"	d
GLM_SWIZZLE_FUNCTION	src/vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_FUNCTION	/;"	d
GLM_SWIZZLE_FUNCTION_1_ARGS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_1_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	src/vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_OPERATOR	src/vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_OPERATOR	/;"	d
GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_SWIZZLE_TEMPLATE1	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE1 /;"	d
GLM_SWIZZLE_TEMPLATE2	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE2 /;"	d
GLM_SWIZZLE_TYPE1	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE1 /;"	d
GLM_SWIZZLE_TYPE2	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE2 /;"	d
GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	src/vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_VERSION	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION	/;"	d
GLM_VERSION_MAJOR	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_MAJOR	/;"	d
GLM_VERSION_MESSAGE	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_MESSAGE	/;"	d
GLM_VERSION_MINOR	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_MINOR	/;"	d
GLM_VERSION_PATCH	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_PATCH	/;"	d
GLM_VERSION_REVISION	src/vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_REVISION	/;"	d
GStyleVarInfo	src/vendor/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiStyleVarInfo[]	file:
GetActiveID	src/vendor/imgui/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetBL	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	src/vendor/imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	src/vendor/imgui/imgui.h	/^    inline bool     GetBit(int n) const { int off = (n >> 5); ImU32 mask = 1u << (n & 31); retur/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBit	src/vendor/imgui/imgui_internal.h	/^    bool            GetBit(int n) const     { int off = (n >> 5); int mask = 1 << (n & 31); retu/;"	f	struct:ImBoolVector	typeref:typename:bool
GetBool	src/vendor/imgui/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	src/vendor/imgui/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetByIndex	src/vendor/imgui/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Data[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	src/vendor/imgui/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	src/vendor/imgui/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	src/vendor/imgui/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	src/vendor/imgui/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	src/vendor/imgui/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	src/vendor/imgui/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	src/vendor/imgui/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	typeref:typename:const char *	file:
GetColorU32	src/vendor/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	src/vendor/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	src/vendor/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	src/vendor/imgui/imgui_widgets.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidth	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	src/vendor/imgui/imgui_widgets.cpp	/^static float GetColumnWidthEx(ImGuiColumns* columns, int column_index, bool before_resize = fals/;"	f	typeref:typename:float	file:
GetColumnsCount	src/vendor/imgui/imgui_widgets.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetContentRegionAvail	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionAvailWidth	src/vendor/imgui/imgui.h	/^    static inline float GetContentRegionAvailWidth()          { return GetContentRegionAvail().x/;"	f	namespace:ImGui	typeref:typename:float
GetContentRegionMax	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCount	src/IndexBuffer.h	/^	inline unsigned int GetCount() const { return count; }$/;"	f	class:IndexBuffer	typeref:typename:unsigned int
GetCurrentClipRect	src/vendor/imgui/imgui_draw.cpp	/^#define GetCurrentClipRect(/;"	d	file:
GetCurrentContext	src/vendor/imgui/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentTextureId	src/vendor/imgui/imgui_draw.cpp	/^#define GetCurrentTextureId(/;"	d	file:
GetCurrentWindow	src/vendor/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	src/vendor/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPosX	src/vendor/imgui/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	src/vendor/imgui/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	src/vendor/imgui/imgui.h	/^    const ImFontAtlasCustomRect*GetCustomRectByIndex(int index) const { if (index < 0) return NU/;"	f	struct:ImFontAtlas	typeref:typename:const ImFontAtlasCustomRect *
GetDebugName	src/vendor/imgui/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	src/vendor/imgui/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	src/vendor/imgui/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	src/vendor/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	src/vendor/imgui/imgui_widgets.cpp	/^static float GetDraggedColumnOffset(ImGuiColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	src/vendor/imgui/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	src/vendor/imgui/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetElements	src/VertexBufferLayout.h	/^ 	inline const std::vector<VertexBufferLayoutElement> GetElements() const { return elements; }$/;"	f	class:VertexBufferLayout	typeref:typename:const std::vector<VertexBufferLayoutElement>
GetFallbackWindowNameForWindowingList	src/vendor/imgui/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	src/vendor/imgui/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	src/vendor/imgui/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	src/vendor/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	src/vendor/imgui/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	src/vendor/imgui/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	src/vendor/imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	src/vendor/imgui/imgui.cpp	/^static ImDrawList* GetForegroundDrawList(ImGuiWindow*)$/;"	f	typeref:typename:ImDrawList *	file:
GetFrameCount	src/vendor/imgui/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	src/vendor/imgui/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	src/vendor/imgui/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	src/vendor/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	src/Texture.h	/^	inline int GetHeight() const { return height; }$/;"	f	class:Texture	typeref:typename:int
GetHeight	src/vendor/imgui/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	src/vendor/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIO	src/vendor/imgui/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	src/vendor/imgui/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Data.Data && p < Data.Data /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetIndexBuffer	src/Mesh/Mesh.h	/^		std::vector<int>* GetIndexBuffer() const { return indexBuffer; }$/;"	f	class:Mesh	typeref:typename:std::vector<int> *
GetInt	src/vendor/imgui/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	src/vendor/imgui/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetItemID	src/vendor/imgui/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.CurrentWindow-/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetItemRectMax	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemsLineHeightWithSpacing	src/vendor/imgui/imgui.h	/^    static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing/;"	f	namespace:ImGui	typeref:typename:float
GetKeyIndex	src/vendor/imgui/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey imgui_key)$/;"	f	class:ImGui	typeref:typename:int
GetKeyPressedAmount	src/vendor/imgui/imgui.cpp	/^int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMinimumStepAtDecimalPrecision	src/vendor/imgui/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseCursor	src/vendor/imgui/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	src/vendor/imgui/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetNavInputAmount	src/vendor/imgui/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)$/;"	f	class:ImGui	typeref:typename:float
GetNavInputAmount2d	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, f/;"	f	class:ImGui	typeref:typename:ImVec2
GetOrAddByKey	src/vendor/imgui/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetOverlayDrawList	src/vendor/imgui/imgui.h	/^    static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); /;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetPosition	src/Object.cpp	/^double const* Object::GetPosition() const$/;"	f	class:Object	typeref:typename:double const *
GetRedoAvailCount	src/vendor/imgui/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	src/vendor/imgui/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetScrollMaxX	src/vendor/imgui/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	src/vendor/imgui/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	src/vendor/imgui/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	src/vendor/imgui/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollbarID	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetSize	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSize	src/vendor/imgui/imgui_internal.h	/^    int         GetSize() const                     { return Data.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetSizeOfType	src/VertexBufferLayout.h	/^	static unsigned int GetSizeOfType(unsigned int type){$/;"	f	struct:VertexBufferLayoutElement	typeref:typename:unsigned int
GetStateStorage	src/vendor/imgui/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStride	src/VertexBufferLayout.h	/^	inline unsigned int GetStride() const { return stride; }$/;"	f	class:VertexBufferLayout	typeref:typename:unsigned int
GetStyle	src/vendor/imgui/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	src/vendor/imgui/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	src/vendor/imgui/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	src/vendor/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	typeref:typename:const ImGuiStyleVarInfo *	file:
GetTL	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	src/vendor/imgui/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	src/vendor/imgui/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	src/vendor/imgui/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	src/vendor/imgui/imgui_internal.h	/^    const char*         GetTabName(const ImGuiTabItem* tab) const$/;"	f	struct:ImGuiTabBar	typeref:typename:const char *
GetTabOrder	src/vendor/imgui/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const  { return Tabs.index_from_ptr/;"	f	struct:ImGuiTabBar	typeref:typename:int
GetTexDataAsAlpha8	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTextLineHeight	src/vendor/imgui/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	src/vendor/imgui/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	src/vendor/imgui/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostPopupModal	src/vendor/imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetUndoAvailCount	src/vendor/imgui/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetUniformLocation	src/Shader.cpp	/^int Shader::GetUniformLocation(const std::string& name){$/;"	f	class:Shader	typeref:typename:int
GetVarPtr	src/vendor/imgui/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + /;"	f	struct:ImGuiStyleVarInfo	typeref:typename:void *	file:
GetVersion	src/vendor/imgui/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetVertexBuffer	src/Mesh/Mesh.h	/^		std::vector<float>* GetVertexBuffer() const { return vertexBuffer; }$/;"	f	class:Mesh	typeref:typename:std::vector<float> *
GetViewportRect	src/vendor/imgui/imgui.cpp	/^static ImRect GetViewportRect()$/;"	f	typeref:typename:ImRect	file:
GetVoidPtr	src/vendor/imgui/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	src/vendor/imgui/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	src/Texture.h	/^	inline int GetWidth() const { return width; }$/;"	f	class:Texture	typeref:typename:int
GetWidth	src/vendor/imgui/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowAllowedExtentRect	src/vendor/imgui/imgui.cpp	/^ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowBgColorIdxFromFlags	src/vendor/imgui/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionWidth	src/vendor/imgui/imgui.cpp	/^float ImGui::GetWindowContentRegionWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWindowDrawList	src/vendor/imgui/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	src/vendor/imgui/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	src/vendor/imgui/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowSize	src/vendor/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	src/vendor/imgui/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GlfwClientApi	src/vendor/imgui/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	src/vendor/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	src/vendor/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	src/vendor/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
Glyph	src/vendor/imgui/imgui.h	/^    typedef ImFontGlyph Glyph; \/\/ OBSOLETED in 1.52+$/;"	t	struct:ImFont	typeref:typename:ImFontGlyph
GlyphAdvanceX	src/vendor/imgui/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000):/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	src/vendor/imgui/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphMaxAdvanceX	src/vendor/imgui/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	src/vendor/imgui/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	src/vendor/imgui/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	src/vendor/imgui/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000):/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	src/vendor/imgui/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list o/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
GlyphRangesBuilder	src/vendor/imgui/imgui.h	/^    typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; \/\/ OBSOLETED in 1.67+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontGlyphRangesBuilder
Glyphs	src/vendor/imgui/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	src/vendor/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	src/vendor/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	src/vendor/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	src/vendor/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	src/vendor/imgui/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	src/vendor/imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBoolVector	file:
GlyphsSet	src/vendor/imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBoolVector	file:
GrabMinSize	src/vendor/imgui/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	src/vendor/imgui/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	src/vendor/imgui/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HEX	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HSV	src/vendor/imgui/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorC/;"	f	struct:ImColor	typeref:typename:ImColor
HasCloseButton	src/vendor/imgui/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasSelection	src/vendor/imgui/imgui.h	/^    bool                HasSelection() const { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	src/vendor/imgui/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	src/vendor/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
HelpMarker	src/vendor/imgui/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	src/vendor/imgui/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== (HiddenF/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	src/vendor/imgui/imgui_internal.h	/^    int                     HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
HiddenFramesCannotSkipItems	src/vendor/imgui/imgui_internal.h	/^    int                     HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
History	src/vendor/imgui/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	src/vendor/imgui/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HostClipRect	src/vendor/imgui/imgui_internal.h	/^    ImRect              HostClipRect;           \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HostCursorMaxPosX	src/vendor/imgui/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiColumns	typeref:typename:float
HostCursorPosY	src/vendor/imgui/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiColumns	typeref:typename:float
HostWorkRect	src/vendor/imgui/imgui_internal.h	/^    ImRect              HostWorkRect;           \/\/ Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HoveredId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	src/vendor/imgui/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	src/vendor/imgui/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	src/vendor/imgui/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRootWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredRootWindow;                  \/\/ Will catch mouse inputs (fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Will catch mouse inputs$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ID	src/vendor/imgui/imgui.h	/^    unsigned int    ID;             \/\/ Input    \/\/ User ID. Use <0x10000 to map into a font /;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHash(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID       ID;           \/\/ Best candidate$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
ID	src/vendor/imgui/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
ID_VOID_MAIN	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IMGUI_API	src/vendor/imgui/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	src/vendor/imgui/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_INI_SETTINGS	src/vendor/imgui/imgui.cpp	/^#define IMGUI_DEBUG_INI_SETTINGS /;"	d	file:
IMGUI_DEBUG_LOG	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_NAV_RECTS	src/vendor/imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	src/vendor/imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/vendor/imgui/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/vendor/imgui/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/vendor/imgui/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DISABLE_DEMO_WINDOWS	src/vendor/imgui/imgui_demo.cpp	/^#define IMGUI_DISABLE_DEMO_WINDOWS$/;"	d	file:
IMGUI_IMPL_API	src/vendor/imgui/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_ES2	src/vendor/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d	file:
IMGUI_IMPL_OPENGL_ES3	src/vendor/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d	file:
IMGUI_IMPL_OPENGL_HAS_DRAW_WITH_BASE_VERTEX	src/vendor/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_DRAW_WITH_BASE_VERTEX /;"	d	file:
IMGUI_IMPL_OPENGL_LOADER_GLEW	src/vendor/imgui/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_LOADER_GLEW$/;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	src/vendor/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	src/vendor/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	src/vendor/imgui/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TEST_ENGINE_ITEM_ADD	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	src/vendor/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	src/vendor/imgui/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	src/vendor/imgui/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IM_ALLOC	src/vendor/imgui/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	src/vendor/imgui/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	src/vendor/imgui/imgui.h	/^#define IM_ASSERT(/;"	d
IM_COL32	src/vendor/imgui/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	src/vendor/imgui/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	src/vendor/imgui/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	src/vendor/imgui/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	src/vendor/imgui/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	src/vendor/imgui/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_G_SHIFT	src/vendor/imgui/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	src/vendor/imgui/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	src/vendor/imgui/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	src/vendor/imgui/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	src/vendor/imgui/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_F32_TO_INT8_SAT	src/vendor/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	src/vendor/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	src/vendor/imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FMTARGS	src/vendor/imgui/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	src/vendor/imgui/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	src/vendor/imgui/imgui.h	/^#define IM_FREE(/;"	d
IM_MAX	src/vendor/imgui/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_NEW	src/vendor/imgui/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	src/vendor/imgui/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	src/vendor/imgui/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	src/vendor/imgui/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	src/vendor/imgui/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	src/vendor/imgui/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	src/vendor/imgui/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_S16_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	src/vendor/imgui/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_TABSIZE	src/vendor/imgui/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_U16_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	src/vendor/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	src/vendor/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNUSED	src/vendor/imgui/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDE_STB_TEXTEDIT_H	src/vendor/imgui/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
INDEXBUFFER_H	src/IndexBuffer.h	/^#define INDEXBUFFER_H$/;"	d
IO	src/vendor/imgui/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IdxBuffer	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	src/vendor/imgui/imgui.h	/^    unsigned int    IdxOffset;              \/\/ Start offset in index buffer. Always equal to s/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAcos	src/vendor/imgui/imgui_internal.h	/^static inline float  ImAcos(float x)                                            { return acosf(x/;"	f	typeref:typename:float
ImAcos01	src/vendor/imgui/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColor	src/vendor/imgui/imgui_widgets.cpp	/^static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:ImU32	file:
ImAtan2	src/vendor/imgui/imgui_internal.h	/^static inline float  ImAtan2(float y, float x)                                  { return atan2f(/;"	f	typeref:typename:float
ImAtof	src/vendor/imgui/imgui_internal.h	/^static inline double ImAtof(const char* s)                                      { return atof(s)/;"	f	typeref:typename:double
ImAtoi	src/vendor/imgui/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBoolVector	src/vendor/imgui/imgui_internal.h	/^    ImBoolVector()  { }$/;"	f	struct:ImBoolVector
ImBoolVector	src/vendor/imgui/imgui_internal.h	/^struct ImBoolVector$/;"	s
ImCeil	src/vendor/imgui/imgui_internal.h	/^static inline float  ImCeil(float x)                                            { return ceilf(x/;"	f	typeref:typename:float
ImCharIsBlankA	src/vendor/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	src/vendor/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImClamp	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	src/vendor/imgui/imgui.h	/^    ImColor()                                                       { Value.x = Value.y = Value./;"	f	struct:ImColor
ImColor	src/vendor/imgui/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f\/255.0f; V/;"	f	struct:ImColor
ImColor	src/vendor/imgui/imgui.h	/^    ImColor(const ImVec4& col)                                      { Value = col; }$/;"	f	struct:ImColor
ImColor	src/vendor/imgui/imgui.h	/^    ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; /;"	f	struct:ImColor
ImColor	src/vendor/imgui/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f\/255.0f; V/;"	f	struct:ImColor
ImColor	src/vendor/imgui/imgui.h	/^struct ImColor$/;"	s
ImCos	src/vendor/imgui/imgui_internal.h	/^static inline float  ImCos(float x)                                             { return cosf(x)/;"	f	typeref:typename:float
ImDot	src/vendor/imgui/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	src/vendor/imgui/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	src/vendor/imgui/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	src/vendor/imgui/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	src/vendor/imgui/imgui.h	/^    ImDrawCmd() { ElemCount = 0; ClipRect.x = ClipRect.y = ClipRect.z = ClipRect.w = 0.0f; Textu/;"	f	struct:ImDrawCmd
ImDrawCmd	src/vendor/imgui/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCornerFlags	src/vendor/imgui/imgui.h	/^typedef int ImDrawCornerFlags;      \/\/ -> enum ImDrawCornerFlags_    \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawCornerFlags_	src/vendor/imgui/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_All       = 0xF     \/\/ In your function calls you may use ~0 (= all bits/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_BotLeft   = 1 << 2, \/\/ 0x4$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_BotRight  = 1 << 3, \/\/ 0x8$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_None	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_None      = 0,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_TopLeft   = 1 << 0, \/\/ 0x1$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	src/vendor/imgui/imgui.h	/^    ImDrawCornerFlags_TopRight  = 1 << 1, \/\/ 0x2$/;"	e	enum:ImDrawCornerFlags_
ImDrawData	src/vendor/imgui/imgui.h	/^    ImDrawData()    { Valid = false; Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	src/vendor/imgui/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	src/vendor/imgui/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawIdx	src/vendor/imgui/imgui.h	/^typedef unsigned short ImDrawIdx;$/;"	t	typeref:typename:unsigned short
ImDrawList	src/vendor/imgui/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL/;"	f	struct:ImDrawList
ImDrawList	src/vendor/imgui/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	src/vendor/imgui/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	src/vendor/imgui/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	src/vendor/imgui/imgui.h	/^    ImDrawListFlags_AllowVtxOffset   = 1 << 2   \/\/ Can emit 'VtxOffset > 0' to allow large mes/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	src/vendor/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedFill  = 1 << 1,  \/\/ Filled shapes have anti-aliased edges (*2 t/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	src/vendor/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLines = 1 << 0,  \/\/ Lines are anti-aliased (*2 the number of tr/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	src/vendor/imgui/imgui.h	/^    ImDrawListFlags_None             = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	src/vendor/imgui/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	src/vendor/imgui/imgui.h	/^    inline ImDrawListSplitter()  { Clear(); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	src/vendor/imgui/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	src/vendor/imgui/imgui.h	/^struct ImDrawVert$/;"	s
ImFabs	src/vendor/imgui/imgui_internal.h	/^static inline float  ImFabs(float x)                                            { return fabsf(x/;"	f	typeref:typename:float
ImFileLoadToMemory	src/vendor/imgui/imgui.cpp	/^void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, size_t* out_file_size/;"	f	typeref:typename:void *
ImFileOpen	src/vendor/imgui/imgui.cpp	/^FILE* ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:FILE *
ImFloor	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	src/vendor/imgui/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFloorStd	src/vendor/imgui/imgui_internal.h	/^static inline float  ImFloorStd(float x)                                        { return floorf(/;"	f	typeref:typename:float
ImFmod	src/vendor/imgui/imgui_internal.h	/^static inline double ImFmod(double x, double y)                                 { return fmod(x,/;"	f	typeref:typename:double
ImFmod	src/vendor/imgui/imgui_internal.h	/^static inline float  ImFmod(float x, float y)                                   { return fmodf(x/;"	f	typeref:typename:float
ImFont	src/vendor/imgui/imgui.h	/^struct ImFont$/;"	s
ImFont	src/vendor/imgui/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	src/vendor/imgui/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	src/vendor/imgui/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	src/vendor/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	src/vendor/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	src/vendor/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRegisterDefaultCustomRects	src/vendor/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRegisterDefaultCustomRects(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	src/vendor/imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	src/vendor/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	src/vendor/imgui/imgui_draw.cpp	/^bool    ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool
ImFontAtlasCustomRect	src/vendor/imgui/imgui.h	/^    ImFontAtlasCustomRect()         { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; Glyph/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	src/vendor/imgui/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	src/vendor/imgui/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	src/vendor/imgui/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoMouseCursors	src/vendor/imgui/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1    \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	src/vendor/imgui/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	src/vendor/imgui/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontBuildDstData	src/vendor/imgui/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	src/vendor/imgui/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontConfig	src/vendor/imgui/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	src/vendor/imgui/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	src/vendor/imgui/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	src/vendor/imgui/imgui.h	/^    ImFontGlyphRangesBuilder()          { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	src/vendor/imgui/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	src/vendor/imgui/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringV	src/vendor/imgui/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGetDirQuadrantFromDelta	src/vendor/imgui/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir
ImGui	src/vendor/imgui/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	src/vendor/imgui/imgui.h	/^namespace ImGui$/;"	n
ImGui	src/vendor/imgui/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	src/vendor/imgui/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGuiAxis	src/vendor/imgui/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	src/vendor/imgui/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	src/vendor/imgui/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Back-end Platform supports gamepad /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Back-end Platform supports honoring/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Back-end Platform supports io.WantS/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	src/vendor/imgui/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3    \/\/ Back-end Renderer supports ImDrawCm/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiButtonFlags;           \/\/ -> enum ImGuiButtonFlags_        \/\/ Flags: for Bu/;"	t	typeref:typename:int
ImGuiButtonFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 9,   \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_AllowItemOverlap	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 6,   \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Disabled	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Disabled               = 1 << 8,   \/\/ disable interactions$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_DontClosePopups	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 7,   \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_FlattenChildren	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 5,   \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveID	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveID      = 1 << 11,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoveredOnNav	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnNav         = 1 << 14   \/\/ don't report as hovered when naviga/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoKeyModifiers	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 10,  \/\/ disable interaction if a key modifi/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoNavFocus	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 13,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 2,   \/\/ return true on click (default requi/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClickRelease	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 1,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDoubleClick	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 4,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDragDropHold	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 12,  \/\/ press when held into while we are d/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnRelease	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 3,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Repeat	src/vendor/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 0,   \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlags_
ImGuiCol	src/vendor/imgui/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	src/vendor/imgui/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	src/vendor/imgui/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	src/vendor/imgui/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	src/vendor/imgui/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	src/vendor/imgui/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildWindowBg	src/vendor/imgui/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg                                      \/\/ [renam/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	src/vendor/imgui/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	src/vendor/imgui/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDarkening	src/vendor/imgui/imgui.h	/^    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg                      \/\/ [renam/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	src/vendor/imgui/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	src/vendor/imgui/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	src/vendor/imgui/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	src/vendor/imgui/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	src/vendor/imgui/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	src/vendor/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	src/vendor/imgui/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	src/vendor/imgui/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	src/vendor/imgui/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	src/vendor/imgui/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	src/vendor/imgui/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	src/vendor/imgui/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	src/vendor/imgui/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	src/vendor/imgui/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	src/vendor/imgui/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	src/vendor/imgui/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HEX	src/vendor/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HSV	src/vendor/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_RGB	src/vendor/imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DataTypeMask	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DisplayMask	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags__DisplayMask    = ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_Dis/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__InputMask	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags__InputMask      = ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_Input/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__OptionsDefault	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_DisplayR/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__PickerMask	src/vendor/imgui/imgui.h	/^    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	src/vendor/imgui/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnData	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnData()   { OffsetNorm = OffsetNormBeforeResize = 0.0f; Flags = ImGuiColumnsFlags_/;"	f	struct:ImGuiColumnData
ImGuiColumnData	src/vendor/imgui/imgui_internal.h	/^struct ImGuiColumnData$/;"	s
ImGuiColumns	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumns()      { Clear(); }$/;"	f	struct:ImGuiColumns
ImGuiColumns	src/vendor/imgui/imgui_internal.h	/^struct ImGuiColumns$/;"	s
ImGuiColumnsFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiColumnsFlags;          \/\/ -> enum ImGuiColumnsFlags_       \/\/ Flags: BeginC/;"	t	typeref:typename:int
ImGuiColumnsFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiColumnsFlags_$/;"	g
ImGuiColumnsFlags_GrowParentContentsSize	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize= 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior of /;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoBorder	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder              = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoForceWithinWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow   = 1 << 3,   \/\/ Disable forcing columns to fit with/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoPreserveWidths	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths      = 1 << 2,   \/\/ Disable column width preservation w/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoResize	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize              = 1 << 1,   \/\/ Disable resizing columns when click/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_None                  = 0,$/;"	e	enum:ImGuiColumnsFlags_
ImGuiComboFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	src/vendor/imgui/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiCond	src/vendor/imgui/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	src/vendor/imgui/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	src/vendor/imgui/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ Set the variable$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	src/vendor/imgui/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	src/vendor/imgui/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_Once	src/vendor/imgui/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct back-end to not alter mous/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	src/vendor/imgui/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas) : BackgroundDrawList(&DrawListSharedData), Fore/;"	f	struct:ImGuiContext
ImGuiContext	src/vendor/imgui/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiDataType	src/vendor/imgui/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	src/vendor/imgui/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataType_	src/vendor/imgui/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	src/vendor/imgui/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	src/vendor/imgui/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S16	src/vendor/imgui/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	src/vendor/imgui/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	src/vendor/imgui/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	src/vendor/imgui/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U16	src/vendor/imgui/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	src/vendor/imgui/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	src/vendor/imgui/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	src/vendor/imgui/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDir	src/vendor/imgui/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	src/vendor/imgui/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	src/vendor/imgui/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	src/vendor/imgui/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	src/vendor/imgui/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	src/vendor/imgui/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	src/vendor/imgui/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	src/vendor/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful ca/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiDragFlags;             \/\/ -> enum ImGuiDragFlags_          \/\/ Flags: for Dr/;"	t	typeref:typename:int
ImGuiDragFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiDragFlags_$/;"	g
ImGuiDragFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiDragFlags_None                     = 0,$/;"	e	enum:ImGuiDragFlags_
ImGuiDragFlags_Vertical	src/vendor/imgui/imgui_internal.h	/^    ImGuiDragFlags_Vertical                 = 1 << 0$/;"	e	enum:ImGuiDragFlags_
ImGuiFocusedFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	src/vendor/imgui/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	src/vendor/imgui/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	src/vendor/imgui/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	src/vendor/imgui/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowFocused(): Test fro/;"	e	enum:ImGuiFocusedFlags_
ImGuiGroupData	src/vendor/imgui/imgui_internal.h	/^struct ImGuiGroupData$/;"	s
ImGuiHoveredFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,   \/\/ Return true even if the ite/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   \/\/ Return true even if the pos/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	src/vendor/imgui/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	src/vendor/imgui/imgui.h	/^typedef unsigned int ImGuiID;       \/\/ Unique ID used by widgets (typically hashed from a stac/;"	t	typeref:typename:unsigned int
ImGuiIO	src/vendor/imgui/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	src/vendor/imgui/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputReadMode	src/vendor/imgui/imgui_internal.h	/^enum ImGuiInputReadMode$/;"	g
ImGuiInputReadMode_Down	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Down,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Pressed	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Pressed,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Released	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Released,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Repeat	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_Repeat,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatFast	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatFast$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatSlow	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatSlow,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputSource	src/vendor/imgui/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_Nav,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavGamepad	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_NavGamepad,    \/\/ "$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavKeyboard	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_NavKeyboard,   \/\/ Only used occasionally for storage, not tested\/handled/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	src/vendor/imgui/imgui.h	/^typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData *data);$/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	src/vendor/imgui/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  \/\/ Insert mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Multiline	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 20,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 21   \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	src/vendor/imgui/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false    \/\/ Button() will return t/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_Default_                 = 0$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false    \/\/ [BETA] Disable interac/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false    \/\/ [BETA] Represent a mix/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false    \/\/ MenuItem\/Selectable()/;"	e	enum:ImGuiItemFlags_
ImGuiItemHoveredDataBackup	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemHoveredDataBackup() { Backup(); }$/;"	f	struct:ImGuiItemHoveredDataBackup
ImGuiItemHoveredDataBackup	src/vendor/imgui/imgui_internal.h	/^struct ImGuiItemHoveredDataBackup$/;"	s
ImGuiItemStatusFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for DC/;"	t	typeref:typename:int
ImGuiItemStatusFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 12,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 13   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 5    \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 4,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 10,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 11,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	src/vendor/imgui/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifi/;"	t	typeref:typename:int
ImGuiKey_	src/vendor/imgui/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_A	src/vendor/imgui/imgui.h	/^    ImGuiKey_A,         \/\/ for text edit CTRL+A: select all$/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	src/vendor/imgui/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	src/vendor/imgui/imgui.h	/^    ImGuiKey_C,         \/\/ for text edit CTRL+C: copy$/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiKey_COUNT$/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	src/vendor/imgui/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	src/vendor/imgui/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_End	src/vendor/imgui/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	src/vendor/imgui/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	src/vendor/imgui/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_Home	src/vendor/imgui/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	src/vendor/imgui/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeyPadEnter	src/vendor/imgui/imgui.h	/^    ImGuiKey_KeyPadEnter,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	src/vendor/imgui/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	src/vendor/imgui/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	src/vendor/imgui/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	src/vendor/imgui/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	src/vendor/imgui/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	src/vendor/imgui/imgui.h	/^    ImGuiKey_Tab,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	src/vendor/imgui/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	src/vendor/imgui/imgui.h	/^    ImGuiKey_V,         \/\/ for text edit CTRL+V: paste$/;"	e	enum:ImGuiKey_
ImGuiKey_X	src/vendor/imgui/imgui.h	/^    ImGuiKey_X,         \/\/ for text edit CTRL+X: cut$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	src/vendor/imgui/imgui.h	/^    ImGuiKey_Y,         \/\/ for text edit CTRL+Y: redo$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	src/vendor/imgui/imgui.h	/^    ImGuiKey_Z,         \/\/ for text edit CTRL+Z: undo$/;"	e	enum:ImGuiKey_
ImGuiLayoutType	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	src/vendor/imgui/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	src/vendor/imgui/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	src/vendor/imgui/imgui.h	/^    ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, ite/;"	f	struct:ImGuiListClipper
ImGuiListClipper	src/vendor/imgui/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiLogType	src/vendor/imgui/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType_Clipboard$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMenuColumns	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMenuColumns	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiMenuColumns::ImGuiMenuColumns()$/;"	f	class:ImGuiMenuColumns
ImGuiMouseCursor	src/vendor/imgui/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	src/vendor/imgui/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Count_	src/vendor/imgui/imgui.h	/^    , ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT      \/\/ [renamed in 1.60]$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	src/vendor/imgui/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavDirSourceFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags;     \/\/ -> enum ImGuiNavDirSourceFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiNavDirSourceFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None         = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavForward	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNavForward$/;"	g
ImGuiNavForward_ForwardActive	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardActive$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_ForwardQueued	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardQueued,$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavForward_None,$/;"	e	enum:ImGuiNavForward
ImGuiNavHighlightFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,       \/\/ Draw rectangular highlight if (g.Na/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding   = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_None         = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	src/vendor/imgui/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input ident/;"	t	typeref:typename:int
ImGuiNavInput_	src/vendor/imgui/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ activate \/ open \/ toggle \/ tweak value       \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ cancel \/ close \/ exit                        \/\/ e.g. C/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ move \/ tweak \/ resize window (w\/ PadMenu)    \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ prev window (w\/ PadMenu)                     \/\/ e.g. R1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ next window (w\/ PadMenu)                     \/\/ e.g. L1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_Input,         \/\/ text input \/ on-screen keyboard              \/\/ e.g. Tr/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_InternalStart_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ move left                                    \/\/ = Arrow /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyMenu_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyMenu_,      \/\/ toggle menu                                  \/\/ = io.Key/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyTab_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyTab_,       \/\/ tab                                          \/\/ = Tab ke/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ scroll \/ move window (w\/ PadMenu)            \/\/ e.g. L/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ tap: toggle menu \/ hold: focus, move, resize \/\/ e.g. Sq/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ faster tweaks                                \/\/ e.g. R1 /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	src/vendor/imgui/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ slower tweaks                                \/\/ e.g. L1 /;"	e	enum:ImGuiNavInput_
ImGuiNavLayer	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_AllowCurrentNavId	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5    \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful for provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveResult	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveResult() { Clear(); }$/;"	f	struct:ImGuiNavMoveResult
ImGuiNavMoveResult	src/vendor/imgui/imgui_internal.h	/^struct ImGuiNavMoveResult$/;"	s
ImGuiNextItemData	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	src/vendor/imgui/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen  = 1 << 1$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_None     = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	src/vendor/imgui/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOnceUponAFrame	src/vendor/imgui/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	src/vendor/imgui/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	src/vendor/imgui/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	src/vendor/imgui/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlotArrayGetterData	src/vendor/imgui/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	src/vendor/imgui/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	src/vendor/imgui/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	src/vendor/imgui/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	src/vendor/imgui/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	src/vendor/imgui/imgui_internal.h	/^    ImGuiPopupData() { PopupId = 0; Window = SourceWindow = NULL; OpenFrameCount = -1; OpenParen/;"	f	struct:ImGuiPopupData
ImGuiPopupData	src/vendor/imgui/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupPositionPolicy	src/vendor/imgui/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	src/vendor/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	src/vendor/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	src/vendor/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)          { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	src/vendor/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)          { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	src/vendor/imgui/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	src/vendor/imgui/imgui.cpp	/^        struct ImGuiResizeBorderDef$/;"	s	function:ImGui::RenderWindowOuterBorders	file:
ImGuiResizeGripDef	src/vendor/imgui/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiSelectableFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	src/vendor/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 24,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_Disabled	src/vendor/imgui/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3    \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	src/vendor/imgui/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent po/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DrawFillAvailWidth	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawFillAvailWidth = 1 << 23,  \/\/ FIXME: We may be able to remove thi/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_DrawHoveredWhenHeld	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawHoveredWhenHeld= 1 << 25,  \/\/ Always show active when held, even /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID  = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_PressedOnClick	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnClick     = 1 << 21,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_PressedOnRelease	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnRelease   = 1 << 22,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	src/vendor/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover    = 1 << 26$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	src/vendor/imgui/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all colum/;"	e	enum:ImGuiSelectableFlags_
ImGuiSeparatorFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	src/vendor/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	src/vendor/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns      = 1 << 2$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	src/vendor/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	src/vendor/imgui/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	src/vendor/imgui/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	src/vendor/imgui/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	src/vendor/imgui/imgui.h	/^typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);$/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	src/vendor/imgui/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiSliderFlags;           \/\/ -> enum ImGuiSliderFlags_        \/\/ Flags: for Sl/;"	t	typeref:typename:int
ImGuiSliderFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Vertical	src/vendor/imgui/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 0$/;"	e	enum:ImGuiSliderFlags_
ImGuiStorage	src/vendor/imgui/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	src/vendor/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	src/vendor/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	src/vendor/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	src/vendor/imgui/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	src/vendor/imgui/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	src/vendor/imgui/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	src/vendor/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/vendor/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/vendor/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/vendor/imgui/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	src/vendor/imgui/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVarInfo	src/vendor/imgui/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiStyleVar_	src/vendor/imgui/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildWindowRounding	src/vendor/imgui/imgui.h	/^    , ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding   \/\/ [renamed in 1.53]$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_Count_	src/vendor/imgui/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT                        \/\/ [renamed in 1.60]$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	src/vendor/imgui/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	src/vendor/imgui/imgui_internal.h	/^struct ImGuiTabBar$/;"	s
ImGuiTabBar	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22   \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	src/vendor/imgui/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabItem	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabItem()      { ID = Flags = 0; LastFrameVisible = LastFrameSelected = -1; NameOffset /;"	f	struct:ImGuiTabItem
ImGuiTabItem	src/vendor/imgui/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_NoCloseButton	src/vendor/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20   \/\/ Store whether p_open is set or /;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	src/vendor/imgui/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	src/vendor/imgui/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3    \/\/ Don't call PushID(tab->ID)\//;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	src/vendor/imgui/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	src/vendor/imgui/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Append '*' to title without/;"	e	enum:ImGuiTabItemFlags_
ImGuiTextBuffer	src/vendor/imgui/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	src/vendor/imgui/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextEditCallback	src/vendor/imgui/imgui.h	/^typedef ImGuiInputTextCallback      ImGuiTextEditCallback;    \/\/ OBSOLETED in 1.63 (from Aug 2/;"	t	typeref:typename:ImGuiInputTextCallback
ImGuiTextEditCallbackData	src/vendor/imgui/imgui.h	/^typedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;$/;"	t	typeref:typename:ImGuiInputTextCallbackData
ImGuiTextFilter	src/vendor/imgui/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	src/vendor/imgui/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	src/vendor/imgui/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	src/vendor/imgui/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	src/vendor/imgui/imgui_internal.h	/^    ImGuiTextFlags_None = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextRange	src/vendor/imgui/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	src/vendor/imgui/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	src/vendor/imgui/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTreeNodeFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	src/vendor/imgui/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlapMode	src/vendor/imgui/imgui.h	/^    , ImGuiTreeNodeFlags_AllowOverlapMode = ImGuiTreeNodeFlags_AllowItemOverlap \/\/ [renamed in/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	src/vendor/imgui/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Full colored frame (e.g. for Collap/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	src/vendor/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiWindow	src/vendor/imgui/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)$/;"	f	class:ImGuiWindow
ImGuiWindow	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	src/vendor/imgui/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	src/vendor/imgui/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] Allow gamepad\/keyboard navi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	src/vendor/imgui/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Append '*' to title without affecti/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindowSettings() { Name = NULL; ID = 0; Pos = Size = ImVec2(0,0); Collapsed = false; }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	src/vendor/imgui/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowTempData	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindowTempData()$/;"	f	struct:ImGuiWindowTempData
ImGuiWindowTempData	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplGlfw_CharCallback	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_GetClipboardText	src/vendor/imgui/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplGlfw_Init	src/vendor/imgui/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	src/vendor/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	src/vendor/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_KeyCallback	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetClipboardText	src/vendor/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_Shutdown	src/vendor/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_UpdateGamepads	src/vendor/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	src/vendor/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMousePosAndButtons	src/vendor/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMousePosAndButtons()$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_CreateDeviceObjects	src/vendor/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	src/vendor/imgui/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_DestroyDeviceObjects	src/vendor/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	src/vendor/imgui/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_Init	src/vendor/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	src/vendor/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	src/vendor/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	src/vendor/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImHash	src/vendor/imgui/imgui_internal.h	/^static inline ImU32     ImHash(const void* data, int size, ImU32 seed = 0) { return size ? ImHas/;"	f	typeref:typename:ImU32
ImHashData	src/vendor/imgui/imgui.cpp	/^ImU32 ImHashData(const void* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImHashStr	src/vendor/imgui/imgui.cpp	/^ImU32 ImHashStr(const char* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImInvLength	src/vendor/imgui/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = lhs./;"	f	typeref:typename:float
ImIsPowerOfTwo	src/vendor/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	src/vendor/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return lhs.x*l/;"	f	typeref:typename:float
ImLengthSqr	src/vendor/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return lhs.x*l/;"	f	typeref:typename:float
ImLerp	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	src/vendor/imgui/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	src/vendor/imgui/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	src/vendor/imgui/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImMax	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	src/vendor/imgui/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewDummy	src/vendor/imgui/imgui.h	/^struct ImNewDummy {};$/;"	s
ImParseFormatFindEnd	src/vendor/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	src/vendor/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	src/vendor/imgui/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatTrimDecorations	src/vendor/imgui/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	src/vendor/imgui/imgui_internal.h	/^    ImPool()    { FreeIdx = 0; }$/;"	f	struct:ImPool
ImPool	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImPool$/;"	s
ImPoolIdx	src/vendor/imgui/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	src/vendor/imgui/imgui_internal.h	/^static inline double ImPow(double x, double y)                                  { return pow(x, /;"	f	typeref:typename:double
ImPow	src/vendor/imgui/imgui_internal.h	/^static inline float  ImPow(float x, float y)                                    { return powf(x,/;"	f	typeref:typename:float
ImQsort	src/vendor/imgui/imgui_internal.h	/^#define ImQsort /;"	d
ImRect	src/vendor/imgui/imgui_internal.h	/^    ImRect()                                        : Min(FLT_MAX,FLT_MAX), Max(-FLT_MAX,-FLT_MA/;"	f	struct:ImRect
ImRect	src/vendor/imgui/imgui_internal.h	/^    ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                        /;"	f	struct:ImRect
ImRect	src/vendor/imgui/imgui_internal.h	/^    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)              /;"	f	struct:ImRect
ImRect	src/vendor/imgui/imgui_internal.h	/^    ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)                  /;"	f	struct:ImRect
ImRect	src/vendor/imgui/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImS16	src/vendor/imgui/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	src/vendor/imgui/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	src/vendor/imgui/imgui.h	/^typedef int64_t             ImS64;  \/\/ 64-bit signed integer (pre C++11)$/;"	t	typeref:typename:int64_t
ImS64	src/vendor/imgui/imgui.h	/^typedef signed   __int64    ImS64;  \/\/ 64-bit signed integer (pre and post C++11 with Visual S/;"	t	typeref:typename:signed __int64
ImS64	src/vendor/imgui/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer (post C++11)$/;"	t	typeref:typename:signed long long
ImS8	src/vendor/imgui/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer == char$/;"	t	typeref:typename:signed char
ImSaturate	src/vendor/imgui/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSin	src/vendor/imgui/imgui_internal.h	/^static inline float  ImSin(float x)                                             { return sinf(x)/;"	f	typeref:typename:float
ImSqrt	src/vendor/imgui/imgui_internal.h	/^static inline float  ImSqrt(float x)                                            { return sqrtf(x/;"	f	typeref:typename:float
ImStb	src/vendor/imgui/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	src/vendor/imgui/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrTrimBlanks	src/vendor/imgui/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	src/vendor/imgui/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	src/vendor/imgui/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	src/vendor/imgui/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	src/vendor/imgui/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	src/vendor/imgui/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	src/vendor/imgui/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStristr	src/vendor/imgui/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	src/vendor/imgui/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	src/vendor/imgui/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	src/vendor/imgui/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	src/vendor/imgui/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	src/vendor/imgui/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCharToUtf8	src/vendor/imgui/imgui.cpp	/^static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	src/vendor/imgui/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	src/vendor/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	src/vendor/imgui/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	src/vendor/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextStrFromUtf8	src/vendor/imgui/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	src/vendor/imgui/imgui.cpp	/^int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextureID	src/vendor/imgui/imgui.h	/^typedef void* ImTextureID;          \/\/ User data to identify a texture (this is whatever to yo/;"	t	typeref:typename:void *
ImTriangleBarycentricCoords	src/vendor/imgui/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	src/vendor/imgui/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	src/vendor/imgui/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImU16	src/vendor/imgui/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	src/vendor/imgui/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	src/vendor/imgui/imgui.h	/^typedef uint64_t            ImU64;  \/\/ 64-bit unsigned integer (pre C++11)$/;"	t	typeref:typename:uint64_t
ImU64	src/vendor/imgui/imgui.h	/^typedef unsigned __int64    ImU64;  \/\/ 64-bit unsigned integer (pre and post C++11 with Visual/;"	t	typeref:typename:unsigned __int64
ImU64	src/vendor/imgui/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer (post C++11)$/;"	t	typeref:typename:unsigned long long
ImU8	src/vendor/imgui/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	src/vendor/imgui/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	src/vendor/imgui/imgui_internal.h	/^    ImVec1()         { x = 0.0f; }$/;"	f	struct:ImVec1
ImVec1	src/vendor/imgui/imgui_internal.h	/^    ImVec1(float _x) { x = _x; }$/;"	f	struct:ImVec1
ImVec1	src/vendor/imgui/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	src/vendor/imgui/imgui.h	/^    ImVec2()  { x = y = 0.0f; }$/;"	f	struct:ImVec2
ImVec2	src/vendor/imgui/imgui.h	/^    ImVec2(float _x, float _y) { x = _x; y = _y; }$/;"	f	struct:ImVec2
ImVec2	src/vendor/imgui/imgui.h	/^struct ImVec2$/;"	s
ImVec4	src/vendor/imgui/imgui.h	/^    ImVec4()  { x = y = z = w = 0.0f; }$/;"	f	struct:ImVec4
ImVec4	src/vendor/imgui/imgui.h	/^    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }$/;"	f	struct:ImVec4
ImVec4	src/vendor/imgui/imgui.h	/^struct ImVec4$/;"	s
ImVector	src/vendor/imgui/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	src/vendor/imgui/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	src/vendor/imgui/imgui.h	/^struct ImVector$/;"	s
ImWchar	src/vendor/imgui/imgui.h	/^typedef unsigned short ImWchar;     \/\/ A single U16 character for keyboard input\/display. We /;"	t	typeref:typename:unsigned short
Image	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVe/;"	f	class:ImGui	typeref:typename:void
ImageButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImeSetInputScreenPosFn	src/vendor/imgui/imgui.h	/^    void        (*ImeSetInputScreenPosFn)(int x, int y);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(int x,int y)
ImeSetInputScreenPosFn_DefaultImpl	src/vendor/imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)$/;"	f	typeref:typename:void	file:
ImeSetInputScreenPosFn_DefaultImpl	src/vendor/imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}$/;"	f	typeref:typename:void	file:
ImeWindowHandle	src/vendor/imgui/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ (Windows) Set this to/;"	m	struct:ImGuiIO	typeref:typename:void *
Indent	src/vendor/imgui/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	src/vendor/imgui/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	src/vendor/imgui/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	src/vendor/imgui/imgui_internal.h	/^    int             Index;              \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	src/vendor/imgui/imgui_internal.h	/^    int             Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	src/vendor/imgui/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBuffer	src/IndexBuffer.cpp	/^IndexBuffer::IndexBuffer(const unsigned int* data, unsigned int count)$/;"	f	class:IndexBuffer
IndexBuffer	src/IndexBuffer.h	/^class IndexBuffer{$/;"	c
IndexLookup	src/vendor/imgui/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IniFilename	src/vendor/imgui/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file. Se/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	src/vendor/imgui/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InitialFlags	src/vendor/imgui/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	src/vendor/imgui/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time o/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
Initialize	src/vendor/imgui/imgui.cpp	/^void ImGui::Initialize(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Initialized	src/vendor/imgui/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	src/vendor/imgui/imgui.cpp	/^            ImVec2 InnerDir;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	src/vendor/imgui/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InputBuf	src/vendor/imgui/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputBuf	src/vendor/imgui/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputDouble	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputFloat	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_pre/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputInt	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputQueueCharacters	src/vendor/imgui/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;     \/\/ Queue of _characters_ input (obtained by pl/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputScalar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* data_ptr, const void* /;"	f	class:ImGui	typeref:typename:bool
InputScalarN	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, co/;"	f	class:ImGui	typeref:typename:bool
InputText	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	src/vendor/imgui/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	src/vendor/imgui/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const I/;"	f	typeref:typename:ImVec2	file:
InputTextEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	src/vendor/imgui/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInput/;"	f	typeref:typename:bool	file:
InputTextMultiline	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	src/vendor/imgui/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextState	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	src/vendor/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InvisibleButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	src/vendor/imgui/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsAnyItemActive	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyWindowFocused	src/vendor/imgui/imgui.h	/^    static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocu/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyWindowHovered	src/vendor/imgui/imgui.h	/^    static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHove/;"	f	namespace:ImGui	typeref:typename:bool
IsBeingResized	src/vendor/imgui/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsBuilt	src/vendor/imgui/imgui.h	/^    bool                        IsBuilt()                   { return Fonts.Size > 0 && (TexPixel/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsClippedEx	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)$/;"	f	class:ImGui	typeref:typename:bool
IsDataType	src/vendor/imgui/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDelivery	src/vendor/imgui/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropPayloadBeingAccepted	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsFirstFrame	src/vendor/imgui/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsInverted	src/vendor/imgui/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemClicked(int mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterChange	src/vendor/imgui/imgui.h	/^    static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdi/;"	f	namespace:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsKeyDown(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(int user_key_index, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	src/vendor/imgui/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { const /;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsLoaded	src/vendor/imgui/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(int button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(int button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseDown(int button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(int button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseDragging(int button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMousePosValid	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(int button)$/;"	f	class:ImGui	typeref:typename:bool
IsNavInputDown	src/vendor/imgui/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputPressed	src/vendor/imgui/imgui_internal.h	/^    inline bool             IsNavInputPressed(ImGuiNavInput n, ImGuiInputReadMode mode) { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputPressedAnyOfTwo	src/vendor/imgui/imgui_internal.h	/^    inline bool             IsNavInputPressedAnyOfTwo(ImGuiNavInput n1, ImGuiNavInput n2, ImGuiI/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	src/vendor/imgui/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id)$/;"	f	class:ImGui	typeref:typename:bool
IsPreview	src/vendor/imgui/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsRectVisible	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRootWindowFocused	src/vendor/imgui/imgui.h	/^    static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocu/;"	f	namespace:ImGui	typeref:typename:bool
IsRootWindowOrAnyChildFocused	src/vendor/imgui/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocu/;"	f	namespace:ImGui	typeref:typename:bool
IsRootWindowOrAnyChildHovered	src/vendor/imgui/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildHovered()       { return IsWindowHovered(ImGuiHove/;"	f	namespace:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	src/vendor/imgui/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	src/vendor/imgui/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	typeref:typename:bool	file:
IsWindowFocused	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	src/vendor/imgui/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	src/vendor/imgui/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)$/;"	f	class:ImGui	typeref:typename:bool
ItemFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;              \/\/ == ItemFlagsStack.back() [empty == ImGu/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiItemFlags>
ItemGetter	src/vendor/imgui/imgui_demo.cpp	/^        struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { /;"	f	struct:ShowDemoWindowWidgets::FuncHolder	typeref:typename:bool	file:
ItemHoverable	src/vendor/imgui/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	src/vendor/imgui/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	src/vendor/imgui/imgui.cpp	/^void ImGui::ItemSize(const ImRect& bb, float text_offset_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	src/vendor/imgui/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_offset_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSpacing	src/vendor/imgui/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemWidth	src/vendor/imgui/imgui_internal.h	/^    float                   ItemWidth;              \/\/ == ItemWidthStack.back(). 0.0: default,/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	src/vendor/imgui/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	src/vendor/imgui/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	src/vendor/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsHeight	src/vendor/imgui/imgui.h	/^    float   ItemsHeight;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	src/vendor/imgui/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
Items_SingleStringGetter	src/vendor/imgui/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
JollyEngine	CMakeLists.txt	/^	JollyEngine$/;"	t
JollyEngine	CMakeLists.txt	/^project (JollyEngine)$/;"	p
JollyEngine	Makefile	/^JollyEngine: cmake_check_build_system$/;"	t
JollyEngine	README.md	/^# JollyEngine$/;"	c
JollyEngine/fast	Makefile	/^JollyEngine\/fast:$/;"	t
KeepAliveID	src/vendor/imgui/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
KeyAlt	src/vendor/imgui/imgui.h	/^    bool        KeyAlt;                         \/\/ Keyboard modifier pressed: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	src/vendor/imgui/imgui.h	/^    bool        KeyCtrl;                        \/\/ Keyboard modifier pressed: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyMap	src/vendor/imgui/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];         \/\/ <unset>          \/\/ Map of indices into t/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyRepeatDelay	src/vendor/imgui/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	src/vendor/imgui/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	src/vendor/imgui/imgui.h	/^    bool        KeyShift;                       \/\/ Keyboard modifier pressed: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	src/vendor/imgui/imgui.h	/^    bool        KeySuper;                       \/\/ Keyboard modifier pressed: Cmd\/Super\/Wind/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysDown	src/vendor/imgui/imgui.h	/^    bool        KeysDown[512];                  \/\/ Keyboard keys that are pressed (ideally lef/;"	m	struct:ImGuiIO	typeref:typename:bool[512]
KeysDownDuration	src/vendor/imgui/imgui.h	/^    float       KeysDownDuration[512];          \/\/ Duration the keyboard key has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[512]
KeysDownDurationPrev	src/vendor/imgui/imgui.h	/^    float       KeysDownDurationPrev[512];      \/\/ Previous duration the key has been down$/;"	m	struct:ImGuiIO	typeref:typename:float[512]
LINK_LIBRARIES	CMakeLists.txt	/^set (LINK_LIBRARIES glfw X11 GL GLEW)$/;"	v
LabelFalse	src/vendor/glm/gtx/string_cast.inl	/^	static const char* LabelFalse = "false";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LabelText	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LabelTrue	src/vendor/glm/gtx/string_cast.inl	/^	static const char* LabelTrue = "true";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LastActiveId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	src/vendor/imgui/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastFrameActive	src/vendor/imgui/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	src/vendor/imgui/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	src/vendor/imgui/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastItemDisplayRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;    \/\/ End-user display rect (only valid if La/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemDisplayRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImRect
LastItemId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImGuiID
LastItemId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
LastItemRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  LastItemRect;           \/\/ Interaction rect$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  LastItemRect;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImRect
LastItemStatusFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImGuiItemStatusFlags
LastItemStatusFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemStatusFlags
LastTabItemIdx	src/vendor/imgui/imgui_internal.h	/^    short               LastTabItemIdx;         \/\/ For BeginTabItem()\/EndTabItem()$/;"	m	struct:ImGuiTabBar	typeref:typename:short
LastValidMousePos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Layers	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >[2]
LayoutType	src/vendor/imgui/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LineMaxY	src/vendor/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
LineMinY	src/vendor/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
LineOffsets	src/vendor/imgui/imgui_demo.cpp	/^    ImVector<int>       LineOffsets;        \/\/ Index to lines offset. We maintain this with Ad/;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
ListBox	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const/;"	f	class:ImGui	typeref:typename:bool
ListBox	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListBoxFooter	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ListBoxFooter()$/;"	f	class:ImGui	typeref:typename:void
ListBoxHeader	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ListBoxHeader	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui	typeref:typename:bool
LoadIniSettingsFromDisk	src/vendor/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	src/vendor/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LoadPrimitive	src/Mesh/MeshStore.cpp	/^void MeshStore::LoadPrimitive(MeshPrimitiveType type, const Mesh* oPrimitive)$/;"	f	class:MeshStore	typeref:typename:void
Locked	src/vendor/imgui/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	src/vendor/imgui/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	src/vendor/imgui/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	src/vendor/imgui/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	src/vendor/imgui/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	src/vendor/imgui/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	src/vendor/imgui/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	src/vendor/imgui/imgui_internal.h	/^    bool                    LogEnabled;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	src/vendor/imgui/imgui_internal.h	/^    FILE*                   LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:FILE *
LogFilename	src/vendor/imgui/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	src/vendor/imgui/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	src/vendor/imgui/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	src/vendor/imgui/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogRenderedText	src/vendor/imgui/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogText	src/vendor/imgui/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	src/vendor/imgui/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	src/vendor/imgui/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	src/vendor/imgui/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	src/vendor/imgui/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	src/vendor/imgui/imgui_internal.h	/^    ImGuiLogType            LogType;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LowerBound	src/vendor/imgui/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
MAP_ANALOG	src/vendor/imgui/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	src/vendor/imgui/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MESH_H	src/Mesh/Mesh.h	/^#define MESH_H$/;"	d
MESH_PRIMITIVES_H	src/Mesh/MeshPrimitiveFactory.h	/^#define MESH_PRIMITIVES_H$/;"	d
MESH_PRIMITIVE_TYPE_H	src/Mesh/MeshPrimitiveType.h	/^#define MESH_PRIMITIVE_TYPE_H$/;"	d
MESH_STORE_H	src/Mesh/MeshStore.h	/^#define MESH_STORE_H$/;"	d
MINGW	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(MINGW 1)$/;"	v
MINGW	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(MINGW 1)$/;"	v
MallocWrapper	src/vendor/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	src/vendor/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	src/vendor/imgui/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	src/vendor/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	src/vendor/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	src/vendor/imgui/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	src/vendor/imgui/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
MemAlloc	src/vendor/imgui/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	src/vendor/imgui/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MenuBarAppending	src/vendor/imgui/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	src/vendor/imgui/imgui_internal.h	/^    float       MenuBarHeight() const       { ImGuiContext& g = *GImGui; return (Flags & ImGuiWi/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ *Always on* This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	src/vendor/imgui/imgui_internal.h	/^    ImRect      MenuBarRect() const         { float y1 = Pos.y + TitleBarHeight(); return ImRect/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	src/vendor/imgui/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;                        \/\/ Simplified columns storage /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiMenuColumns
MenuItem	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
Merge	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeMode	src/vendor/imgui/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
Mesh	src/Mesh/Mesh.cpp	/^Mesh::Mesh(std::vector<float>& vertexBuffer, std::vector<int>& indexBuffer) $/;"	f	class:Mesh
Mesh	src/Mesh/Mesh.h	/^class Mesh $/;"	c
MeshPrimitiveFactory	src/Mesh/MeshPrimitiveFactory.cpp	/^MeshPrimitiveFactory::MeshPrimitiveFactory() {}$/;"	f	class:MeshPrimitiveFactory
MeshPrimitiveFactory	src/Mesh/MeshPrimitiveFactory.h	/^class MeshPrimitiveFactory $/;"	c
MeshPrimitiveType	src/Mesh/MeshPrimitiveType.h	/^enum MeshPrimitiveType $/;"	g
MeshStore	src/Mesh/MeshStore.cpp	/^MeshStore::MeshStore() {}$/;"	f	class:MeshStore
MeshStore	src/Mesh/MeshStore.h	/^class MeshStore$/;"	c
MetricsActiveAllocations	src/vendor/imgui/imgui.h	/^    int         MetricsActiveAllocations;       \/\/ Number of active allocations, updated by Me/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsActiveWindows	src/vendor/imgui/imgui.h	/^    int         MetricsActiveWindows;           \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderIndices	src/vendor/imgui/imgui.h	/^    int         MetricsRenderIndices;           \/\/ Indices output during last call to Render()/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	src/vendor/imgui/imgui.h	/^    int         MetricsRenderVertices;          \/\/ Vertices output during last call to Render(/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	src/vendor/imgui/imgui.h	/^    int         MetricsRenderWindows;           \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	src/vendor/imgui/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	src/vendor/imgui/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Mode	src/vendor/imgui/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	src/vendor/imgui/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	src/vendor/imgui/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	src/vendor/imgui/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
MouseClicked	src/vendor/imgui/imgui.h	/^    bool        MouseClicked[5];                \/\/ Mouse button went from !Down to Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedPos	src/vendor/imgui/imgui.h	/^    ImVec2      MouseClickedPos[5];             \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	src/vendor/imgui/imgui.h	/^    double      MouseClickedTime[5];            \/\/ Time of last click (used to figure out doub/;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	src/vendor/imgui/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorScale	src/vendor/imgui/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseDelta	src/vendor/imgui/imgui.h	/^    ImVec2      MouseDelta;                     \/\/ Mouse delta. Note that this is zero if eith/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	src/vendor/imgui/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	src/vendor/imgui/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	src/vendor/imgui/imgui.h	/^    bool        MouseDoubleClicked[5];          \/\/ Has mouse button been double-clicked?$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	src/vendor/imgui/imgui.h	/^    bool        MouseDown[5];                   \/\/ Mouse buttons: 0=left, 1=right, 2=middle + /;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	src/vendor/imgui/imgui.h	/^    float       MouseDownDuration[5];           \/\/ Duration the mouse button has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	src/vendor/imgui/imgui.h	/^    float       MouseDownDurationPrev[5];       \/\/ Previous time the mouse button has been dow/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	src/vendor/imgui/imgui.h	/^    bool        MouseDownOwned[5];              \/\/ Track if button was clicked inside a dear i/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownWasDoubleClick	src/vendor/imgui/imgui.h	/^    bool        MouseDownWasDoubleClick[5];     \/\/ Track if button down was a double-click$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceAbs	src/vendor/imgui/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];     \/\/ Maximum distance, absolute, on each axis, o/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseDragMaxDistanceSqr	src/vendor/imgui/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];     \/\/ Squared maximum distance of how much mouse /;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	src/vendor/imgui/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	src/vendor/imgui/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MousePos	src/vendor/imgui/imgui.h	/^    ImVec2      MousePos;                       \/\/ Mouse position, in pixels. Set to ImVec2(-F/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePosPrev	src/vendor/imgui/imgui.h	/^    ImVec2      MousePosPrev;                   \/\/ Previous mouse position (note that MouseDel/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	src/vendor/imgui/imgui.h	/^    bool        MouseReleased[5];               \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseWheel	src/vendor/imgui/imgui.h	/^    float       MouseWheel;                     \/\/ Mouse wheel Vertical: 1 unit scrolls about /;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelH	src/vendor/imgui/imgui.h	/^    float       MouseWheelH;                    \/\/ Mouse wheel Horizontal. Most users don't ha/;"	m	struct:ImGuiIO	typeref:typename:float
MoveId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MultiSelectScopeId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 MultiSelectScopeId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
MyDocument	src/vendor/imgui/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1/;"	f	struct:MyDocument	file:
MyDocument	src/vendor/imgui/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	src/vendor/imgui/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyResizeCallback	src/vendor/imgui/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
NAV_MAP_KEY	src/vendor/imgui/imgui.cpp	/^        #define NAV_MAP_KEY(/;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	src/vendor/imgui/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	src/vendor/imgui/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NONE	src/Shader.cpp	/^		NONE =	 -1,$/;"	e	enum:Shader::ParseShader::ShaderType	file:
Name	src/vendor/imgui/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	src/vendor/imgui/imgui_demo.cpp	/^    const char* Name;           \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	src/vendor/imgui/imgui_internal.h	/^    char*                   Name;$/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	src/vendor/imgui/imgui_internal.h	/^    char*       Name;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:char *
NameBufLen	src/vendor/imgui/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	src/vendor/imgui/imgui_internal.h	/^    int                 NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:int
NavActivateDownId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavI/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	src/vendor/imgui/imgui.h	/^    bool        NavActive;                      \/\/ Directional navigation is currently allowed/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	src/vendor/imgui/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavCalcPreferredRefPos	src/vendor/imgui/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClampRectToVisibleAreaForMoveDir	src/vendor/imgui/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRec/;"	f	typeref:typename:void	file:
NavDisableHighlight	src/vendor/imgui/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	src/vendor/imgui/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavHasScroll	src/vendor/imgui/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollM/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHideHighlightOneFrame	src/vendor/imgui/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	src/vendor/imgui/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavIdTabCounter	src/vendor/imgui/imgui_internal.h	/^    int                     NavIdTabCounter;                    \/\/ == NavWindow->DC.FocusIdxTa/;"	m	struct:ImGuiContext	typeref:typename:int
NavInitRequest	src/vendor/imgui/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestFromMove	src/vendor/imgui/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResultId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavInitResultId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInitResultRectRel	src/vendor/imgui/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;$/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavInitWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavInputId;                         \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInputSource	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	src/vendor/imgui/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT]; \/\/ Gamepad inputs. Cleared back to zero by End/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDuration	src/vendor/imgui/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDurationPrev	src/vendor/imgui/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavJustMovedToId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToMultiSelectScopeId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToMultiSelectScopeId;   \/\/ Just navigated to this sele/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustTabbedId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavJustTabbedId;                    \/\/ Just tabbed to this id.$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavLastChildNavWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLayer	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerActiveMask	src/vendor/imgui/imgui_internal.h	/^    int                     NavLayerActiveMask;     \/\/ Which layer have been written to (resul/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerActiveMaskNext	src/vendor/imgui/imgui_internal.h	/^    int                     NavLayerActiveMaskNext; \/\/ Which layer have been written to (buffe/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerCurrent	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrentMask	src/vendor/imgui/imgui_internal.h	/^    int                     NavLayerCurrentMask;    \/\/ = (1 << NavLayerCurrent) used by ItemAd/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavMousePosDirty	src/vendor/imgui/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	src/vendor/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	src/vendor/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirLast	src/vendor/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFromClampedRefRect	src/vendor/imgui/imgui_internal.h	/^    bool                    NavMoveFromClampedRefRect;          \/\/ Set by manual scrolling, if/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveRequest	src/vendor/imgui/imgui_internal.h	/^    bool                    NavMoveRequest;                     \/\/ Move request for this frame$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveRequestButNoResultYet	src/vendor/imgui/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	src/vendor/imgui/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveRequestFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveRequestForward	src/vendor/imgui/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, Im/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavForward         NavMoveRequestForward;              \/\/ None \/ ForwardQueued \/ Fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavForward
NavMoveRequestTryWrapping	src/vendor/imgui/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultLocalVisibleSet	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;       \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultOther	src/vendor/imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavNextActivateId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavProcessItem	src/vendor/imgui/imgui.cpp	/^static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void	file:
NavRectRel	src/vendor/imgui/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreLastChildNavWindow	src/vendor/imgui/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	src/vendor/imgui/imgui.cpp	/^static void NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	typeref:typename:void	file:
NavSaveLastChildNavWindowIntoParent	src/vendor/imgui/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	src/vendor/imgui/imgui.cpp	/^static bool NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)$/;"	f	typeref:typename:bool	file:
NavScoreItemDistInterval	src/vendor/imgui/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	typeref:typename:float	file:
NavScoringCount	src/vendor/imgui/imgui_internal.h	/^    int                     NavScoringCount;                    \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringRectScreen	src/vendor/imgui/imgui_internal.h	/^    ImRect                  NavScoringRectScreen;               \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavUpdate	src/vendor/imgui/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	src/vendor/imgui/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateMoveResult	src/vendor/imgui/imgui.cpp	/^static void ImGui::NavUpdateMoveResult()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdatePageUpPageDown	src/vendor/imgui/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown(int allowed_dir_flags)$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	src/vendor/imgui/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	src/vendor/imgui/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingList	src/vendor/imgui/imgui.cpp	/^void ImGui::NavUpdateWindowingList()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	src/vendor/imgui/imgui.h	/^    bool        NavVisible;                     \/\/ Directional navigation is visible and allow/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingHighlightAlpha	src/vendor/imgui/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingList	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingList;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ When selecting a window (ho/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	src/vendor/imgui/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleLayer	src/vendor/imgui/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewFrameSanityChecks	src/vendor/imgui/imgui.cpp	/^static void NewFrameSanityChecks()$/;"	f	typeref:typename:void	file:
NewLine	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextItemData	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextWidth	src/vendor/imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
NextWidths	src/vendor/imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3][3]
NextWindowData	src/vendor/imgui/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
NodeColumns	src/vendor/imgui/imgui.cpp	/^        static void NodeColumns(const ImGuiColumns* columns)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeDrawList	src/vendor/imgui/imgui.cpp	/^        static void NodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeTabBar	src/vendor/imgui/imgui.cpp	/^        static void NodeTabBar(ImGuiTabBar* tab_bar)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeWindow	src/vendor/imgui/imgui.cpp	/^        static void NodeWindow(ImGuiWindow* window, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeWindows	src/vendor/imgui/imgui.cpp	/^        static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NotifyOfDocumentsClosedElsewhere	src/vendor/imgui/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
OBJECT_H	src/Object.h	/^#define OBJECT_H$/;"	d
OPENGLRENDERER_H	src/OpenGLRenderer.h	/^#define OPENGLRENDERER_H$/;"	d
Object	src/Object.cpp	/^Object::Object(const Mesh& mesh)$/;"	f	class:Object
Object	src/Object.h	/^class Object$/;"	c
OffMaxX	src/vendor/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
OffMinX	src/vendor/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
Offset	src/vendor/imgui/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Offset	src/vendor/imgui/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetMax	src/vendor/imgui/imgui_internal.h	/^    float               OffsetMax;              \/\/ Distance from BarRect.Min.x, locked during /;"	m	struct:ImGuiTabBar	typeref:typename:float
OffsetNextTab	src/vendor/imgui/imgui_internal.h	/^    float               OffsetNextTab;          \/\/ Distance from BarRect.Min.x, incremented wi/;"	m	struct:ImGuiTabBar	typeref:typename:float
OffsetNorm	src/vendor/imgui/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) /;"	m	struct:ImGuiColumnData	typeref:typename:float
OffsetNormBeforeResize	src/vendor/imgui/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiColumnData	typeref:typename:float
OnKeyPressed	src/vendor/imgui/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	src/vendor/imgui/imgui_demo.cpp	/^    bool        Open;           \/\/ Set when the document is open (in this demo, we keep an arr/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond                   OpenCond;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond
OpenFrameCount	src/vendor/imgui/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenGLRenderer	src/OpenGLRenderer.h	/^class OpenGLRenderer{$/;"	c
OpenMousePos	src/vendor/imgui/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	src/vendor/imgui/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	src/vendor/imgui/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	src/vendor/imgui/imgui.cpp	/^bool ImGui::OpenPopupOnItemClick(const char* str_id, int mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
OpenPopupPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>OpenPopupStack;                     \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	src/vendor/imgui/imgui_demo.cpp	/^    bool        OpenPrev;       \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	src/vendor/imgui/imgui_internal.h	/^    bool                        OpenVal;        \/\/ Set by SetNextItemOpen() function.$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	src/vendor/imgui/imgui.cpp	/^            float  OuterAngle;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:float	file:
OuterRectClipped	src/vendor/imgui/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
Overlaps	src/vendor/imgui/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	src/vendor/imgui/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	src/vendor/imgui/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
PAINTER_H	src/Painter.h	/^#define PAINTER_H$/;"	d
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PROJECT_SOURCE_DIR	CMakeLists.txt	/^set (PROJECT_SOURCE_DIR src)$/;"	v
PackRange	src/vendor/imgui/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	src/vendor/imgui/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
Painter	src/Painter.h	/^class Painter {$/;"	c
PairCompareByID	src/vendor/imgui/imgui.cpp	/^        static int IMGUI_CDECL PairCompareByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLayoutType	src/vendor/imgui/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParseShader	src/Shader.cpp	/^ShaderProgramSource Shader::ParseShader(){$/;"	f	class:Shader	typeref:typename:ShaderProgramSource
PassFilter	src/vendor/imgui/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PatchFormatStringFloatToInt	src/vendor/imgui/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	typeref:typename:const char *	file:
PathArcTo	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCurveTo	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num/;"	f	class:ImDrawList	typeref:typename:void
PathBezierToCasteljau	src/vendor/imgui/imgui_draw.cpp	/^static void PathBezierToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2, float y2/;"	f	typeref:typename:void	file:
PathClear	src/vendor/imgui/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	src/vendor/imgui/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	src/vendor/imgui/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	src/vendor/imgui/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawCornerFlags ro/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	src/vendor/imgui/imgui.h	/^    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_P/;"	f	struct:ImDrawList	typeref:typename:void
PixelSnapH	src/vendor/imgui/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PlatformImeLastPos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  PlatformImeLastPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlatformImePos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  PlatformImePos;                     \/\/ Cursor position request & l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlotEx	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	src/vendor/imgui/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PopAllowKeyboardFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui	typeref:typename:void
PopButtonRepeat	src/vendor/imgui/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	src/vendor/imgui/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFont	src/vendor/imgui/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	src/vendor/imgui/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	src/vendor/imgui/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	src/vendor/imgui/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	src/vendor/imgui/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleVar	src/vendor/imgui/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	src/vendor/imgui/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	src/vendor/imgui/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	src/vendor/imgui/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	imgui.ini	/^Pos=552,76$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	src/vendor/imgui/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	src/vendor/imgui/imgui_internal.h	/^    ImVec2      Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2
Pos	src/vendor/imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3]
PosCond	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Prerequisites for development	README.md	/^# Prerequisites for development$/;"	c
PrevFrameVisible	src/vendor/imgui/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	src/vendor/imgui/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
Preview	src/vendor/imgui/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PrimQuadUV	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	src/vendor/imgui/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	src/vendor/imgui/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr /;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	src/vendor/imgui/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->/;"	f	struct:ImDrawList	typeref:typename:void
PrintFmt	src/vendor/imgui/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
PrivateClipboard	src/vendor/imgui/imgui_internal.h	/^    ImVector<char>          PrivateClipboard;                   \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ProgressBar	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	src/vendor/imgui/imgui_internal.h	/^    void*           Ptr;                \/\/ Either field can be set, not both. e.g. Dock node t/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
Push	src/VertexBufferLayout.cpp	/^void VertexBufferLayout::Push(unsigned int type, unsigned int count){$/;"	f	class:VertexBufferLayout	typeref:typename:void
PushAllowKeyboardFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui	typeref:typename:void
PushButtonRepeat	src/vendor/imgui/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	src/vendor/imgui/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rec/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFont	src/vendor/imgui/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/vendor/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/vendor/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/vendor/imgui/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/vendor/imgui/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	src/vendor/imgui/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	src/vendor/imgui/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	src/vendor/imgui/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	src/vendor/imgui/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	src/vendor/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	src/vendor/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	src/vendor/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	src/vendor/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	src/vendor/imgui/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
RM	Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RadioButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
RasterizerFlags	src/vendor/imgui/imgui.h	/^    unsigned int    RasterizerFlags;        \/\/ 0x00     \/\/ Settings for custom font rasteriz/;"	m	struct:ImFontConfig	typeref:typename:unsigned int
RasterizerMultiply	src/vendor/imgui/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f/;"	m	struct:ImFontConfig	typeref:typename:float
ReadLineFn	src/vendor/imgui/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	src/vendor/imgui/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
Rect	src/vendor/imgui/imgui_internal.h	/^    ImRect      Rect() const                { return ImRect(Pos.x, Pos.y, Pos.x+Size.x, Pos.y+Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	src/vendor/imgui/imgui_internal.h	/^    ImRect        RectRel;      \/\/ Best candidate bounding box in window relative space$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImRect
Rects	src/vendor/imgui/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefFrame	src/vendor/imgui/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
Remove	src/vendor/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Data[idx].~T(); *(int*)&Data[idx] = FreeId/;"	f	struct:ImPool	typeref:typename:void
Remove	src/vendor/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
Render	src/Object.cpp	/^int Object::Render() const$/;"	f	class:Object	typeref:typename:int
Render	src/vendor/imgui/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	src/vendor/imgui/imgui_internal.h	/^    inline void RenderArrow(ImVec2 pos, ImGuiDir dir, float scale=1.0f) { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderArrowPointingAt	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	src/vendor/imgui/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderBullet	src/vendor/imgui/imgui_internal.h	/^    inline void RenderBullet(ImVec2 pos)                                { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderChar	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) con/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float gr/;"	f	class:ImGui	typeref:typename:void
RenderDrawListsFn	src/vendor/imgui/imgui.h	/^    void        (*RenderDrawListsFn)(ImDrawData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImDrawData * data)
RenderDrawListsFnUnused	src/vendor/imgui/imgui.h	/^    void*       RenderDrawListsFnUnused;$/;"	m	struct:ImGuiIO	typeref:typename:void *
RenderFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::RenderMouseCursor(ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor m/;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderPixelEllipsis	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::RenderPixelEllipsis(ImDrawList* draw_list, ImVec2 pos, ImU32 col, int count)$/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledRangeH	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderText	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& /;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	src/vendor/imgui/imgui.cpp	/^void    ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& po/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderWindowDecorations	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	src/vendor/imgui/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowTitleBarContents	src/vendor/imgui/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
ReorderRequestDir	src/vendor/imgui/imgui_internal.h	/^    ImS8                ReorderRequestDir;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
ReorderRequestTabId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Reserve	src/vendor/imgui/imgui_internal.h	/^    void        Reserve(int capacity)               { Data.reserve(capacity); Map.Data.reserve(c/;"	f	struct:ImPool	typeref:typename:void
ResetMouseDragDelta	src/vendor/imgui/imgui.cpp	/^void ImGui::ResetMouseDragDelta(int button)$/;"	f	class:ImGui	typeref:typename:void
Resize	src/vendor/imgui/imgui_internal.h	/^    void            Resize(int sz)          { Storage.resize((sz + 31) >> 5); memset(Storage.Dat/;"	f	struct:ImBoolVector	typeref:typename:void
ResizeBorderHeld	src/vendor/imgui/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
Restore	src/vendor/imgui/imgui_internal.h	/^    void Restore() const    { ImGuiWindow* window = GImGui->CurrentWindow; window->DC.LastItemId/;"	f	struct:ImGuiItemHoveredDataBackup	typeref:typename:void
RootWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	src/vendor/imgui/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
SHADER_H	src/Shader.h	/^#define SHADER_H$/;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
STBIDEF	src/vendor/stb_image/stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	src/vendor/stb_image/stb_image.h	/^#define STBI_ASSERT(/;"	d
STBI_EXTERN	src/vendor/stb_image/stb_image.h	/^#define STBI_EXTERN /;"	d
STBI_FREE	src/vendor/stb_image/stb_image.h	/^#define STBI_FREE(/;"	d
STBI_HAS_LROTL	src/vendor/stb_image/stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
STBI_INCLUDE_STB_IMAGE_H	src/vendor/stb_image/stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
STBI_MALLOC	src/vendor/stb_image/stb_image.h	/^#define STBI_MALLOC(/;"	d
STBI_NOTUSED	src/vendor/stb_image/stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_NO_BMP	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_BMP$/;"	d
STBI_NO_GIF	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_GIF$/;"	d
STBI_NO_HDR	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_HDR$/;"	d
STBI_NO_JPEG	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_JPEG$/;"	d
STBI_NO_PIC	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_PIC$/;"	d
STBI_NO_PNG	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_PNG$/;"	d
STBI_NO_PNM	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_PNM$/;"	d
STBI_NO_PSD	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_PSD$/;"	d
STBI_NO_SIMD	src/vendor/stb_image/stb_image.h	/^#define STBI_NO_SIMD$/;"	d
STBI_NO_TGA	src/vendor/stb_image/stb_image.h	/^   #define STBI_NO_TGA$/;"	d
STBI_NO_ZLIB	src/vendor/stb_image/stb_image.h	/^#define STBI_NO_ZLIB$/;"	d
STBI_ORDER_BGR	src/vendor/stb_image/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anona39c15740403
STBI_ORDER_RGB	src/vendor/stb_image/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anona39c15740403
STBI_REALLOC	src/vendor/stb_image/stb_image.h	/^#define STBI_REALLOC(/;"	d
STBI_REALLOC_SIZED	src/vendor/stb_image/stb_image.h	/^#define STBI_REALLOC_SIZED(/;"	d
STBI_SIMD_ALIGN	src/vendor/stb_image/stb_image.h	/^#define STBI_SIMD_ALIGN(/;"	d
STBI_SSE2	src/vendor/stb_image/stb_image.h	/^#define STBI_SSE2$/;"	d
STBI_VERSION	src/vendor/stb_image/stb_image.h	/^#define STBI_VERSION /;"	d
STBI__BYTECAST	src/vendor/stb_image/stb_image.h	/^#define STBI__BYTECAST(/;"	d
STBI__CASE	src/vendor/stb_image/stb_image.h	/^         #define STBI__CASE(/;"	d
STBI__CASE	src/vendor/stb_image/stb_image.h	/^      #define STBI__CASE(/;"	d
STBI__COMBO	src/vendor/stb_image/stb_image.h	/^      #define STBI__COMBO(/;"	d
STBI__F_avg	src/vendor/stb_image/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anona39c15740f03
STBI__F_avg_first	src/vendor/stb_image/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anona39c15740f03
STBI__F_none	src/vendor/stb_image/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anona39c15740f03
STBI__F_paeth	src/vendor/stb_image/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anona39c15740f03
STBI__F_paeth_first	src/vendor/stb_image/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anona39c15740f03
STBI__F_sub	src/vendor/stb_image/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anona39c15740f03
STBI__F_up	src/vendor/stb_image/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anona39c15740f03
STBI__HDR_BUFLEN	src/vendor/stb_image/stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
STBI__IDCT_1D	src/vendor/stb_image/stb_image.h	/^#define STBI__IDCT_1D(/;"	d
STBI__MARKER_none	src/vendor/stb_image/stb_image.h	/^#define STBI__MARKER_none /;"	d
STBI__PNG_TYPE	src/vendor/stb_image/stb_image.h	/^#define STBI__PNG_TYPE(/;"	d
STBI__RESTART	src/vendor/stb_image/stb_image.h	/^#define STBI__RESTART(/;"	d
STBI__SCAN_header	src/vendor/stb_image/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anona39c15740603
STBI__SCAN_load	src/vendor/stb_image/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anona39c15740603
STBI__SCAN_type	src/vendor/stb_image/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anona39c15740603
STBI__X64_TARGET	src/vendor/stb_image/stb_image.h	/^#define STBI__X64_TARGET$/;"	d
STBI__X86_TARGET	src/vendor/stb_image/stb_image.h	/^#define STBI__X86_TARGET$/;"	d
STBI__ZFAST_BITS	src/vendor/stb_image/stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	src/vendor/stb_image/stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
STBI_default	src/vendor/stb_image/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anona39c15740103
STBI_grey	src/vendor/stb_image/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anona39c15740103
STBI_grey_alpha	src/vendor/stb_image/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anona39c15740103
STBI_rgb	src/vendor/stb_image/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anona39c15740103
STBI_rgb_alpha	src/vendor/stb_image/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anona39c15740103
STBRP_ASSERT	src/vendor/imgui/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	src/vendor/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon59f071e40103
STBRP_HEURISTIC_Skyline_BL_sortHeight	src/vendor/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon59f071e40103
STBRP_HEURISTIC_Skyline_default	src/vendor/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon59f071e40103
STBRP_SORT	src/vendor/imgui/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	src/vendor/imgui/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	src/vendor/imgui/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon59f071e40203
STBRP__MAXVAL	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	src/vendor/imgui/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_CHINESE_TRAD	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_GREEK	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_HEBREW	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_JAPANESE	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_KOREAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_ROMAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_EID_RUSSIAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon715cafb90c03
STBTT_MAC_LANG_ARABIC	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_CHINESE_TRAD	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_DUTCH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_ENGLISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_FRENCH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_GERMAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_HEBREW	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_ITALIAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_JAPANESE	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_KOREAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_RUSSIAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_SPANISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon715cafb90e03
STBTT_MAC_LANG_SWEDISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon715cafb90e03
STBTT_MAX_OVERSAMPLE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon715cafb90b03
STBTT_MS_EID_SYMBOL	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon715cafb90b03
STBTT_MS_EID_UNICODE_BMP	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon715cafb90b03
STBTT_MS_EID_UNICODE_FULL	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon715cafb90b03
STBTT_MS_LANG_CHINESE	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_DUTCH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_ENGLISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_FRENCH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_GERMAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_HEBREW	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_ITALIAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_JAPANESE	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_KOREAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_RUSSIAN	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_SPANISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon715cafb90d03
STBTT_MS_LANG_SWEDISH	src/vendor/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon715cafb90d03
STBTT_PLATFORM_ID_ISO	src/vendor/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon715cafb90903
STBTT_PLATFORM_ID_MAC	src/vendor/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon715cafb90903
STBTT_PLATFORM_ID_MICROSOFT	src/vendor/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon715cafb90903
STBTT_PLATFORM_ID_UNICODE	src/vendor/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon715cafb90903
STBTT_POINT_SIZE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	src/vendor/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon715cafb90a03
STBTT_UNICODE_EID_UNICODE_1_0	src/vendor/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon715cafb90a03
STBTT_UNICODE_EID_UNICODE_1_1	src/vendor/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon715cafb90a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	src/vendor/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon715cafb90a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	src/vendor/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon715cafb90a03
STBTT__COMPARE	src/vendor/imgui/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	src/vendor/imgui/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	src/vendor/imgui/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	src/vendor/imgui/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	src/vendor/imgui/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	src/vendor/imgui/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	src/vendor/imgui/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	src/vendor/imgui/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	src/vendor/imgui/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon715cafb90603
STBTT_vcurve	src/vendor/imgui/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon715cafb90603
STBTT_vline	src/vendor/imgui/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon715cafb90603
STBTT_vmove	src/vendor/imgui/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon715cafb90603
STB_IMAGE_IMPLEMENTATION	src/vendor/stb_image/stb_image.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
STB_INCLUDE_STB_RECT_PACK_H	src/vendor/imgui/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	src/vendor/imgui/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	src/vendor/imgui/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	src/vendor/imgui/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_CHARTYPE	src/vendor/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	src/vendor/imgui/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	src/vendor/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	src/vendor/imgui/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_GETWIDTH_NEWLINE	src/vendor/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	src/vendor/imgui/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	src/vendor/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_REDO	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	src/vendor/imgui/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	src/vendor/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	src/vendor/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	src/vendor/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	src/vendor/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_POSITIONTYPE	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	src/vendor/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRINGLEN	src/vendor/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_UNDOCHARCOUNT	src/vendor/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	src/vendor/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	src/vendor/imgui/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	src/vendor/imgui/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	src/vendor/imgui/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anona9fd05c20308
STRINGIFY	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SameLine	src/vendor/imgui/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToDisk	src/vendor/imgui/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	src/vendor/imgui/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	src/vendor/imgui/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	src/vendor/imgui/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	src/vendor/imgui/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScanFmt	src/vendor/imgui/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scroll	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	src/vendor/imgui/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	src/vendor/imgui/imgui.cpp	/^void ImGui::ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& item_rect)$/;"	f	class:ImGui	typeref:typename:void
ScrollX	src/vendor/imgui/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	src/vendor/imgui/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, float* p_scroll_v, f/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	src/vendor/imgui/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	src/vendor/imgui/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by scrollbars on/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	src/vendor/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	src/vendor/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	src/vendor/imgui/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	src/vendor/imgui/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	src/vendor/imgui/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	src/vendor/imgui/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SelectAll	src/vendor/imgui/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
SelectScopeId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID       SelectScopeId;\/\/ Best candidate window current selectable group ID$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
Selectable	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	src/vendor/imgui/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text when selectable is/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	src/vendor/imgui/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	src/vendor/imgui/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	src/vendor/imgui/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Separator	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SerializeMeshPrimitiveType	src/Mesh/MeshStore.cpp	/^	std::string SerializeMeshPrimitiveType(MeshPrimitiveType type)$/;"	f	namespace:__anon942e8b030111	typeref:typename:std::string
SetActiveID	src/vendor/imgui/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetAllInt	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	src/vendor/imgui/imgui.cpp	/^void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_f/;"	f	class:ImGui	typeref:typename:void
SetBit	src/vendor/imgui/imgui.h	/^    inline void     SetBit(int n)       { int off = (n >> 5); ImU32 mask = 1u << (n & 31); UsedC/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	src/vendor/imgui/imgui_internal.h	/^    void            SetBit(int n, bool v)   { int off = (n >> 5); int mask = 1 << (n & 31); if (/;"	f	struct:ImBoolVector	typeref:typename:void
SetBool	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetClipboardText	src/vendor/imgui/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	src/vendor/imgui/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	src/vendor/imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	src/vendor/imgui/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosYAndSetupDummyPrevLine	src/vendor/imgui/imgui.cpp	/^static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
SetCursorScreenPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	src/vendor/imgui/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFallbackChar	src/vendor/imgui/imgui_draw.cpp	/^void ImFont::SetFallbackChar(ImWchar c)$/;"	f	class:ImFont	typeref:typename:void
SetFloat	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	src/vendor/imgui/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetHSV	src/vendor/imgui/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	src/vendor/imgui/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	src/vendor/imgui/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	src/vendor/imgui/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	src/vendor/imgui/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, int nav_layer)$/;"	f	class:ImGui	typeref:typename:void
SetNavIDWithRectRel	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, const ImRect& rect_rel)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextTreeNodeOpen	src/vendor/imgui/imgui.h	/^    static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(ope/;"	f	namespace:ImGui	typeref:typename:void
SetNextWindowBgAlpha	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentWidth	src/vendor/imgui/imgui.h	/^    static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(/;"	f	namespace:ImGui	typeref:typename:void
SetNextWindowFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPosCenter	src/vendor/imgui/imgui.h	/^    static inline void  SetNextWindowPosCenter(ImGuiCond c=0) { ImGuiIO& io = GetIO(); SetNextWi/;"	f	namespace:ImGui	typeref:typename:void
SetNextWindowSize	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	src/vendor/imgui/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPosition	src/Object.cpp	/^int Object::SetPosition(const double& x, const double& y, const double& z)$/;"	f	class:Object	typeref:typename:int
SetScrollFromPosX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHere	src/vendor/imgui/imgui.h	/^    static inline void  SetScrollHere(float center_ratio=0.5f){ SetScrollHereY(center_ratio); }$/;"	f	namespace:ImGui	typeref:typename:void
SetScrollHereX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float new_scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float new_scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	src/vendor/imgui/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetStateStorage	src/vendor/imgui/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	src/vendor/imgui/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	src/vendor/imgui/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetTexture	src/Object.cpp	/^int Object::SetTexture(const std::string& textureLocation)$/;"	f	class:Object	typeref:typename:int
SetTooltip	src/vendor/imgui/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	src/vendor/imgui/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetUniform1i	src/Shader.cpp	/^void Shader::SetUniform1i(const std::string& name, int value){$/;"	f	class:Shader	typeref:typename:void
SetUniform4f	src/Shader.cpp	/^void Shader::SetUniform4f(const std::string& name, float v0, float v1, float v2, float v3){$/;"	f	class:Shader	typeref:typename:void
SetUniformMat4f	src/Shader.cpp	/^void Shader::SetUniformMat4f(const std::string& name, const glm::mat4& matrix){$/;"	f	class:Shader	typeref:typename:void
SetVoidPtr	src/vendor/imgui/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowCollapsed	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags;       \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowConditionAllowFlags	src/vendor/imgui/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags;             \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowPosPivot	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	src/vendor/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags;            \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SettingsDirtyTimer	src/vendor/imgui/imgui_internal.h	/^    float                          SettingsDirtyTimer;          \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlerWindow_ReadLine	src/vendor/imgui/imgui.cpp	/^static void SettingsHandlerWindow_ReadLine(ImGuiContext* ctx, ImGuiSettingsHandler*, void* entry/;"	f	typeref:typename:void	file:
SettingsHandlerWindow_ReadOpen	src/vendor/imgui/imgui.cpp	/^static void* SettingsHandlerWindow_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
SettingsHandlerWindow_WriteAll	src/vendor/imgui/imgui.cpp	/^static void SettingsHandlerWindow_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
SettingsHandlers	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler> SettingsHandlers;            \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIdx	src/vendor/imgui/imgui_internal.h	/^    int                     SettingsIdx;                        \/\/ Index into SettingsWindow[]/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsIniData	src/vendor/imgui/imgui_internal.h	/^    ImGuiTextBuffer                SettingsIniData;             \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	src/vendor/imgui/imgui_internal.h	/^    bool                           SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsWindows	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindowSettings>  SettingsWindows;             \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowSettings>
SetupDrawData	src/vendor/imgui/imgui.cpp	/^static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
Shader	src/Shader.cpp	/^Shader::Shader(const std::string& filepath) {$/;"	f	class:Shader
Shader	src/Shader.h	/^class Shader {$/;"	c
ShaderProgramSource	src/Shader.h	/^struct ShaderProgramSource{$/;"	s
ShaderType	src/Shader.cpp	/^	enum class ShaderType{$/;"	g	function:Shader::ParseShader	file:
ShowAboutWindow	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	src/vendor/imgui/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	src/vendor/imgui/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowMisc	src/vendor/imgui/imgui_demo.cpp	/^static void ShowDemoWindowMisc()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	src/vendor/imgui/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	src/vendor/imgui/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDummyObject	src/vendor/imgui/imgui_demo.cpp	/^        static void ShowDummyObject(const char* prefix, int uid)$/;"	f	struct:ShowExampleAppPropertyEditor::funcs	typeref:typename:void	file:
ShowExampleAppAutoResize	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	src/vendor/imgui/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppLayout	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	src/vendor/imgui/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontSelector	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) { }$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	src/vendor/imgui/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTestWindow	src/vendor/imgui/imgui.h	/^    static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }$/;"	f	namespace:ImGui	typeref:typename:void
ShowUserGuide	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	src/vendor/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShrinkWidthBuffer	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	src/vendor/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	src/vendor/imgui/imgui.cpp	/^void ImGui::Shutdown(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Sin	src/vendor/imgui/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Size	imgui.ini	/^Size=345,180$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	src/vendor/imgui/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	src/vendor/imgui/imgui_internal.h	/^    ImVec2      Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2
Size	src/vendor/imgui/imgui_internal.h	/^    size_t      Size;           \/\/ Size in byte$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	src/vendor/imgui/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	src/vendor/imgui/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	src/vendor/imgui/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizePixels	src/vendor/imgui/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	src/vendor/imgui/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
SkipItems	src/vendor/imgui/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* v, const/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCalcRatioFromValueT	src/vendor/imgui/imgui_widgets.cpp	/^float ImGui::SliderCalcRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, /;"	f	class:ImGui	typeref:typename:float
SliderFloat	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderInt	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min,/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SourceId	src/vendor/imgui/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	src/vendor/imgui/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*        SourceWindow;   \/\/ Set on OpenPopup() copy of NavWindow at the time of/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Spacing	src/vendor/imgui/imgui_internal.h	/^    float       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
Spacing	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Split	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SplitterBehavior	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Square	src/Mesh/MeshPrimitiveType.h	/^	Square,$/;"	e	enum:MeshPrimitiveType
Square	src/vendor/imgui/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize = ImVec2(IM_MAX(data/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	src/vendor/imgui/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	src/vendor/imgui/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackSizesBackup	src/vendor/imgui/imgui_internal.h	/^    short                   StackSizesBackup[6];    \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowTempData	typeref:typename:short[6]
StartLockWheelingWindow	src/vendor/imgui/imgui.cpp	/^static void StartLockWheelingWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
StartMouseMovingWindow	src/vendor/imgui/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	src/vendor/imgui/imgui.h	/^    float   StartPosY;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
StateStorage	src/vendor/imgui/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	src/vendor/imgui/imgui_internal.h	/^    ImGuiStorage*           StateStorage;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	src/vendor/imgui/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
Stb	src/vendor/imgui/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	src/vendor/imgui/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anona9fd05c20508
StbTexteditRow	src/vendor/imgui/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anona9fd05c20408
StbUndoRecord	src/vendor/imgui/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anona9fd05c20108
StbUndoState	src/vendor/imgui/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anona9fd05c20208
Step	src/vendor/imgui/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	src/vendor/imgui/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)dat/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	src/vendor/imgui/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
Storage	src/vendor/imgui/imgui_internal.h	/^    ImVector<int>   Storage;$/;"	m	struct:ImBoolVector	typeref:typename:ImVector<int>
Strdup	src/vendor/imgui/imgui_demo.cpp	/^    static char* Strdup(const char *str)                             { size_t len = strlen(str) /;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
Stricmp	src/vendor/imgui/imgui_demo.cpp	/^    static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = touppe/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	src/vendor/imgui/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	src/vendor/imgui/imgui_demo.cpp	/^    static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 &/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	src/vendor/imgui/imgui_demo.cpp	/^    static void  Strtrim(char* str)                                  { char* str_end = str + str/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Stub	src/vendor/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
Style	src/vendor/imgui/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	src/vendor/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleModifiers	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleModifiers;                     \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
TEXTURE_H	src/Texture.h	/^#define TEXTURE_H$/;"	d
TabBarCalcMaxTabWidth	src/vendor/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcTabID	src/vendor/imgui/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	src/vendor/imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarLayout	src/vendor/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarQueueChangeTabOrder	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)$/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	src/vendor/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	src/vendor/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	src/vendor/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	src/vendor/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	src/vendor/imgui/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	src/vendor/imgui/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabItemBackground	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemCalcSize	src/vendor/imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByVisibleOffset	src/vendor/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByVisibleOffset(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	src/vendor/imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemLabelAndCloseButton	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabRounding	src/vendor/imgui/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
Tabs	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsNames	src/vendor/imgui/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TempBuffer	src/vendor/imgui/imgui_internal.h	/^    char                    TempBuffer[1024*3+1];               \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:char[]
TempInputTextId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID                 TempInputTextId;                    \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputTextIsActive	src/vendor/imgui/imgui_internal.h	/^    inline bool             TempInputTextIsActive(ImGuiID id) { ImGuiContext& g = *GImGui; retur/;"	f	namespace:ImGui	typeref:typename:bool
TempInputTextScalar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TempInputTextScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType d/;"	f	class:ImGui	typeref:typename:bool
TexDesiredWidth	src/vendor/imgui/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	src/vendor/imgui/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	src/vendor/imgui/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	src/vendor/imgui/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexPixelsAlpha8	src/vendor/imgui/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	src/vendor/imgui/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexUvScale	src/vendor/imgui/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	src/vendor/imgui/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	src/vendor/imgui/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	src/vendor/imgui/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	src/vendor/imgui/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextAIsValid	src/vendor/imgui/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	src/vendor/imgui/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	src/vendor/imgui/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data) \/\/ In C++11 you are bett/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	src/vendor/imgui/imgui_demo.cpp	/^            struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	src/vendor/imgui/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ == TextWrapPosStack.back() [empty == -1/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	src/vendor/imgui/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Texture	src/Texture.cpp	/^Texture::Texture(const std::string& path){$/;"	f	class:Texture
Texture	src/Texture.h	/^class Texture {$/;"	c
TextureId	src/vendor/imgui/imgui.h	/^    ImTextureID     TextureId;              \/\/ User-provided texture ID. Set by user in Imfont/;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
Time	src/vendor/imgui/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	src/vendor/imgui/imgui_internal.h	/^    float       TitleBarHeight() const      { ImGuiContext& g = *GImGui; return (Flags & ImGuiWi/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	src/vendor/imgui/imgui_internal.h	/^    ImRect      TitleBarRect() const        { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos./;"	f	struct:ImGuiWindow	typeref:typename:ImRect
To build the project run following command	README.md	/^# To build the project run following command$/;"	c
TooltipOverrideCount	src/vendor/imgui/imgui_internal.h	/^    int                     TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
TotalIdxCount	src/vendor/imgui/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	src/vendor/imgui/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TouchExtraPadding	src/vendor/imgui/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	src/vendor/imgui/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	src/vendor/imgui/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	src/vendor/imgui/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeAdvanceToLabelPos	src/vendor/imgui/imgui.h	/^    static inline void  TreeAdvanceToLabelPos()               { SetCursorPosX(GetCursorPosX() + /;"	f	namespace:ImGui	typeref:typename:void
TreeDepth	src/vendor/imgui/imgui_internal.h	/^    int                     TreeDepth;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeNode	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TreeStoreMayJumpToParentOnPop	src/vendor/imgui/imgui_internal.h	/^    ImU32                   TreeStoreMayJumpToParentOnPop; \/\/ Store a copy of !g.NavIdIsAlive /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
Triangle	src/Mesh/MeshPrimitiveType.h	/^	Triangle	$/;"	e	enum:MeshPrimitiveType
Type	src/vendor/imgui/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImGuiDataType	file:
TypeHash	src/vendor/imgui/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	src/vendor/imgui/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
U0	src/vendor/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	src/vendor/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UNIX	CMakeFiles/3.18.2/CMakeCCompiler.cmake	/^  set(UNIX 1)$/;"	v
UNIX	CMakeFiles/3.18.2/CMakeCXXCompiler.cmake	/^  set(UNIX 1)$/;"	v
Unbind	src/IndexBuffer.cpp	/^void IndexBuffer::Unbind() const {$/;"	f	class:IndexBuffer	typeref:typename:void
Unbind	src/Shader.cpp	/^void Shader::Unbind() const {$/;"	f	class:Shader	typeref:typename:void
Unbind	src/Texture.cpp	/^void Texture::Unbind() const {$/;"	f	class:Texture	typeref:typename:void
Unbind	src/VertexArray.cpp	/^void VertexArray::Unbind() const {$/;"	f	class:VertexArray	typeref:typename:void
Unbind	src/VertexBuffer.cpp	/^void VertexBuffer::Unbind() const {$/;"	f	class:VertexBuffer	typeref:typename:void
Unindent	src/vendor/imgui/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	src/vendor/imgui/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBoolVectorToFlatIndexList	src/vendor/imgui/imgui_draw.cpp	/^static void UnpackBoolVectorToFlatIndexList(const ImBoolVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	src/vendor/imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(int count, float spacing, bool clear)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateClipRect	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::UpdateClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
UpdateDebugToolItemPicker	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateManualResize	src/vendor/imgui/imgui.cpp	/^static bool ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* bor/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateMouseInputs	src/vendor/imgui/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateTextureID	src/vendor/imgui/imgui_draw.cpp	/^void ImDrawList::UpdateTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
UpdateWindowParentAndRootLinks	src/vendor/imgui/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UsedChars	src/vendor/imgui/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	src/vendor/imgui/imgui.h	/^    ImDrawCallback  UserCallback;           \/\/ If != NULL, call the function instead of render/;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallback	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputTextCallback  UserCallback;           \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextCallback
UserCallbackData	src/vendor/imgui/imgui.h	/^    void*           UserCallbackData;       \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserCallbackData	src/vendor/imgui/imgui_internal.h	/^    void*                   UserCallbackData;       \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:void *
UserData	src/vendor/imgui/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	src/vendor/imgui/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data f/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	src/vendor/imgui/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	src/vendor/imgui/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserFlags	src/vendor/imgui/imgui_internal.h	/^    ImGuiInputTextFlags     UserFlags;              \/\/ Temporarily set while we call user's ca/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
V0	src/vendor/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	src/vendor/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VERTEX	src/Shader.cpp	/^		VERTEX = 0,$/;"	e	enum:Shader::ParseShader::ShaderType	file:
VERTEXARRAY_H	src/VertexArray.h	/^#define VERTEXARRAY_H$/;"	d
VERTEXBUFFERLAYOUT_H	src/VertexBufferLayout.h	/^#define VERTEXBUFFERLAYOUT_H$/;"	d
VERTEXBUFFER_H	src/VertexBuffer.h	/^#define VERTEXBUFFER_H$/;"	d
VSliderFloat	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	src/vendor/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	src/vendor/imgui/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	src/vendor/imgui/imgui.h	/^    ImVec4              Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	src/vendor/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	src/vendor/imgui/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	src/vendor/imgui/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VertexArray	src/VertexArray.cpp	/^VertexArray::VertexArray(){$/;"	f	class:VertexArray
VertexArray	src/VertexArray.h	/^class VertexArray{$/;"	c
VertexBuffer	src/VertexBuffer.cpp	/^VertexBuffer::VertexBuffer(const void* data, unsigned int  size){$/;"	f	class:VertexBuffer
VertexBuffer	src/VertexBuffer.h	/^class VertexBuffer{$/;"	c
VertexBufferLayout	src/VertexBufferLayout.h	/^	VertexBufferLayout()$/;"	f	class:VertexBufferLayout
VertexBufferLayout	src/VertexBufferLayout.h	/^class VertexBufferLayout{$/;"	c
VertexBufferLayoutElement	src/VertexBufferLayout.h	/^struct VertexBufferLayoutElement{$/;"	s
VertexSource	src/Shader.h	/^	std::string VertexSource;$/;"	m	struct:ShaderProgramSource	typeref:typename:std::string
VisibleTabId	src/vendor/imgui/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	src/vendor/imgui/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	src/vendor/imgui/imgui.h	/^    unsigned int    VtxOffset;              \/\/ Start offset in vertex buffer. Pre-1.71 or with/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
WIN32_LEAN_AND_MEAN	src/vendor/imgui/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	src/vendor/imgui/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 2.00f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	src/vendor/imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS	src/vendor/imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     \/\/ Extend outside and /;"	v	typeref:typename:const float	file:
WRT_Contents	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_ContentsRegionRect	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_Count	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_InnerClipRect	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_InnerRect	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_OuterRect	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_OuterRectClipped	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WRT_WorkRect	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonca27daaf0103	file:
WantCaptureKeyboard	src/vendor/imgui/imgui.h	/^    bool        WantCaptureKeyboard;            \/\/ When io.WantCaptureKeyboard is true, imgui /;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	src/vendor/imgui/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	src/vendor/imgui/imgui.h	/^    bool        WantCaptureMouse;               \/\/ When io.WantCaptureMouse is true, imgui wil/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	src/vendor/imgui/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture via Captur/;"	m	struct:ImGuiContext	typeref:typename:int
WantClose	src/vendor/imgui/imgui_demo.cpp	/^    bool        WantClose;      \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantCollapseToggle	src/vendor/imgui/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantLayout	src/vendor/imgui/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	src/vendor/imgui/imgui.h	/^    bool        WantSaveIniSettings;            \/\/ When manual .ini load\/save is active (io.I/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	src/vendor/imgui/imgui.h	/^    bool        WantSetMousePos;                \/\/ MousePos has been altered, back-end should /;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	src/vendor/imgui/imgui.h	/^    bool        WantTextInput;                  \/\/ Mobile\/console: when io.WantTextInput is t/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	src/vendor/imgui/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WasActive	src/vendor/imgui/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelingWindow	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowTimer	src/vendor/imgui/imgui_internal.h	/^    float                   WheelingWindowTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
Width	src/vendor/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	src/vendor/imgui/imgui_internal.h	/^    float                       Width;          \/\/ Set by SetNextItemWidth().$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	src/vendor/imgui/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	src/vendor/imgui/imgui_internal.h	/^    float           Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	src/vendor/imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
WidthContents	src/vendor/imgui/imgui_internal.h	/^    float               WidthContents;          \/\/ Width of actual contents, stored during Beg/;"	m	struct:ImGuiTabItem	typeref:typename:float
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][Hello, world!]$/;"	s
Window	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	src/vendor/imgui/imgui_internal.h	/^    ImGuiWindow*  Window;       \/\/ Best candidate window$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiWindow *
WindowBorderSize	src/vendor/imgui/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	src/vendor/imgui/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowMenuButtonPosition	src/vendor/imgui/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	src/vendor/imgui/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	src/vendor/imgui/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	src/vendor/imgui/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowRounding	src/vendor/imgui/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	src/vendor/imgui/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowTitleAlign	src/vendor/imgui/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	src/vendor/imgui/imgui_internal.h	/^    int                     WindowsActiveCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	src/vendor/imgui/imgui_internal.h	/^    ImGuiStorage            WindowsById;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Windows, sorted in focus or/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsSortBuffer	src/vendor/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsSortBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WorkRect	src/vendor/imgui/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Cover the whole scrolling r/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WriteAccessed	src/vendor/imgui/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	src/vendor/imgui/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	src/vendor/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	src/vendor/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	src/vendor/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	src/vendor/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	src/vendor/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	src/vendor/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
YCbCr_to_RGB_kernel	src/vendor/stb_image/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc/;"	m	struct:__anona39c15740808	typeref:typename:void (*)(stbi_uc * out,const stbi_uc * y,const stbi_uc * pcb,const stbi_uc * pcr,int count,int step)
YCoCg2rgb	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCg2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
YCoCgR2rgb	src/vendor/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
YCoCgR2rgb	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
_CRT_SECURE_NO_WARNINGS	src/vendor/imgui/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/vendor/imgui/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/vendor/imgui/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/vendor/imgui/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/vendor/imgui/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_Channels	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClipRectStack	src/vendor/imgui/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_Count	src/vendor/imgui/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	src/vendor/imgui/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	src/vendor/imgui/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:const ImDrawListSharedData *
_IdxBuffer	src/vendor/imgui/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	src/vendor/imgui/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OwnerName	src/vendor/imgui/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	src/vendor/imgui/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_Splitter	src/vendor/imgui/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api$/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	src/vendor/imgui/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_VtxCurrentIdx	src/vendor/imgui/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] Generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxCurrentOffset	src/vendor/imgui/imgui.h	/^    unsigned int            _VtxCurrentOffset;  \/\/ [Internal] Always 0 unless 'Flags & ImDrawL/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	src/vendor/imgui/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__STB_INCLUDE_STB_TRUETYPE_H__	src/vendor/imgui/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon3c23ed7f010a	src/vendor/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anon3c23ed7f020a	src/vendor/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anon3c23ed7f0308	src/vendor/glm/ext/scalar_ulp.inl	/^	{$/;"	s	union:__anon3c23ed7f020a	file:
__anon59f071e40103	src/vendor/imgui/imstb_rectpack.h	/^{$/;"	g
__anon59f071e40203	src/vendor/imgui/imstb_rectpack.h	/^{$/;"	g
__anon59f071e40308	src/vendor/imgui/imstb_rectpack.h	/^{$/;"	s
__anon603f4350010a	src/vendor/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anon715cafb90108	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90208	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90308	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90408	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90508	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90603	src/vendor/imgui/imstb_truetype.h	/^   enum {$/;"	g
__anon715cafb90708	src/vendor/imgui/imstb_truetype.h	/^   {$/;"	s
__anon715cafb90808	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb90903	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anon715cafb90a03	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anon715cafb90b03	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anon715cafb90c03	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anon715cafb90d03	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anon715cafb90e03	src/vendor/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anon715cafb90f08	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb91008	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb91108	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon715cafb91208	src/vendor/imgui/imstb_truetype.h	/^{$/;"	s
__anon7920d4230108	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u3u3u2	file:
__anon7920d4230208	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u4u4	file:
__anon7920d4230308	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u4u4u4u4	file:
__anon7920d4230408	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u5u6u5	file:
__anon7920d4230508	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u5u5u5u1	file:
__anon7920d4230608	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u10u10u10u2	file:
__anon7920d4230708	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::i10i10i10i2	file:
__anon7920d4230808	src/vendor/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u9u9u9e5	file:
__anon8d42b7cf010a	src/vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToInt	file:
__anon8d42b7cf020a	src/vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToUint	file:
__anon8d42b7cf030a	src/vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::intBitsToFloat	file:
__anon8d42b7cf040a	src/vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::uintBitsToFloat	file:
__anon93647ba3010a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm2x16	file:
__anon93647ba3020a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm2x16	file:
__anon93647ba3030a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm2x16	file:
__anon93647ba3040a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm2x16	file:
__anon93647ba3050a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm4x8	file:
__anon93647ba3060a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm4x8	file:
__anon93647ba3070a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm4x8	file:
__anon93647ba3080a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm4x8	file:
__anon93647ba3090a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packDouble2x32	file:
__anon93647ba30a0a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackDouble2x32	file:
__anon93647ba30b0a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packHalf2x16	file:
__anon93647ba30c0a	src/vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackHalf2x16	file:
__anon942e8b030111	src/Mesh/MeshStore.cpp	/^{$/;"	n	file:
__anona39c15740103	src/vendor/stb_image/stb_image.h	/^{$/;"	g
__anona39c15740208	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740308	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740403	src/vendor/stb_image/stb_image.h	/^{$/;"	g
__anona39c15740508	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740603	src/vendor/stb_image/stb_image.h	/^{$/;"	g
__anona39c15740708	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740808	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740908	src/vendor/stb_image/stb_image.h	/^   {$/;"	s	struct:__anona39c15740808
__anona39c15740a08	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740b08	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740c08	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740d08	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740e08	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15740f03	src/vendor/stb_image/stb_image.h	/^enum {$/;"	g
__anona39c15741008	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15741108	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15741208	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona39c15741308	src/vendor/stb_image/stb_image.h	/^{$/;"	s
__anona9fd05c20108	src/vendor/imgui/imstb_textedit.h	/^{$/;"	s
__anona9fd05c20208	src/vendor/imgui/imstb_textedit.h	/^{$/;"	s
__anona9fd05c20308	src/vendor/imgui/imstb_textedit.h	/^{$/;"	s
__anona9fd05c20408	src/vendor/imgui/imstb_textedit.h	/^{$/;"	s
__anona9fd05c20508	src/vendor/imgui/imstb_textedit.h	/^{$/;"	s
__anonc2d48c14010a	src/vendor/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anonc7e2c250010a	src/vendor/glm/detail/type_vec1.hpp	/^			{$/;"	u	struct:glm::vec
__anonc7e2c250020a	src/vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::vec
__anonc7f4dad1010a	src/vendor/glm/detail/type_vec2.hpp	/^			{$/;"	u	struct:glm::vec
__anonc7f4dad10208	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	s	union:glm::vec::__anonc7f4dad1010a
__anonc7f4dad10308	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	s	union:glm::vec::__anonc7f4dad1010a
__anonc7f4dad10408	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	s	union:glm::vec::__anonc7f4dad1010a
__anonc7f4dad1050a	src/vendor/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::vec
__anonc7f4dad1060a	src/vendor/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	u	struct:glm::vec
__anonc806f352010a	src/vendor/glm/detail/type_vec3.hpp	/^			{$/;"	u	struct:glm::vec
__anonc806f3520208	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	s	union:glm::vec::__anonc806f352010a
__anonc806f3520308	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	s	union:glm::vec::__anonc806f352010a
__anonc806f3520408	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	s	union:glm::vec::__anonc806f352010a
__anonc806f352050a	src/vendor/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::vec
__anonc806f352060a	src/vendor/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::vec
__anonc806f352070a	src/vendor/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::vec
__anonc8190bd3010a	src/vendor/glm/detail/type_vec4.hpp	/^			{$/;"	u	struct:glm::vec
__anonc8190bd30208	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	s	union:glm::vec::__anonc8190bd3010a
__anonc8190bd30308	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	s	union:glm::vec::__anonc8190bd3010a
__anonc8190bd30408	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	s	union:glm::vec::__anonc8190bd3010a
__anonc8190bd3050a	src/vendor/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::vec
__anonc8190bd3060a	src/vendor/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::vec
__anonc8190bd3070a	src/vendor/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::vec
__anonc8190bd3080a	src/vendor/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	u	struct:glm::vec
__anonca27daaf0103	src/vendor/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anone11207070111	src/Mesh/MeshPrimitiveFactory.cpp	/^{$/;"	n	file:
__anonfa4f7e7c010a	src/vendor/glm/detail/type_quat.hpp	/^			{$/;"	u	struct:glm::qua
__anonfa4f7e7c0208	src/vendor/glm/detail/type_quat.hpp	/^				struct { T x, y, z, w;};$/;"	s	union:glm::qua::__anonfa4f7e7c010a
_apply_op	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(vec<N, T, Q> const& that, const U& op)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
_buffer	src/vendor/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	typeref:typename:char[1]
_grow_capacity	src/vendor/imgui/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_swizzle	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 ==/;"	s	namespace:glm::detail
_swizzle_base0	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<2, T, Q, E0,E1,-1,-2, Aligned> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail
_swizzle_base1	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<3, T, Q, E0,E1,E2,-1, Aligned> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail
_swizzle_base1	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<4, T, Q, E0,E1,E2,E3, Aligned> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail
_swizzle_base1	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, float, Q, E0,E1,E2,E3, true> : public _swizzle_base0<float, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, int, Q, E0,E1,E2,E3, true> : public _swizzle_base0<int, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, uint, Q, E0,E1,E2,E3, true> : public _swizzle_base0<uint, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base2	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, detail::is_aligned<Q>::valu/;"	s	namespace:glm::detail
_swizzle_base2	src/vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<N, T, Q, E0,E1,E2,E3, 1> : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, de/;"	s	namespace:glm::detail
a	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30308	typeref:typename:T
a	src/vendor/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anonc8190bd3080a	typeref:typename:T
abs	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType abs(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
abs	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR int abs(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR int
abs	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> abs(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
acos	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acosh	src/vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType acosh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acosh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acot	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acot(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acot	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acoth	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acoth(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acoth	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acoth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsc	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsc	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsch	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsch(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsch	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
active_head	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
adjugate	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> adjugate(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
adjugate	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> adjugate(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
adjugate	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> adjugate(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
affineInverse	src/vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> affineInverse(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
affineInverse	src/vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> affineInverse(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
align	src/vendor/imgui/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
aligned	src/vendor/glm/detail/qualifier.hpp	/^			aligned = aligned_highp, \/\/\/< By default aligned qualifier is also high precision$/;"	e	enum:glm::qualifier
aligned_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec1
aligned_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec1
aligned_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec1		aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec1
aligned_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec2
aligned_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec2
aligned_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec2		aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec2
aligned_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec3
aligned_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec3
aligned_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec3		aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec3
aligned_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec4
aligned_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec4
aligned_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec4		aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec4
aligned_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2
aligned_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2
aligned_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2		aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2
aligned_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x2
aligned_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x2
aligned_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x2
aligned_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x3
aligned_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x3
aligned_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x3
aligned_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x4
aligned_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x4
aligned_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x4
aligned_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3
aligned_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3
aligned_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3		aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3
aligned_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x2
aligned_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x2
aligned_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x2
aligned_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x3
aligned_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x3
aligned_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x3
aligned_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x4
aligned_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x4
aligned_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x4
aligned_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4
aligned_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4
aligned_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4		aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4
aligned_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x2
aligned_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x2
aligned_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x2
aligned_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x3
aligned_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x3
aligned_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x3
aligned_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x4
aligned_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x4
aligned_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x4
aligned_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec1
aligned_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec1
aligned_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec1		aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec1
aligned_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec2
aligned_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec2
aligned_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec2		aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec2
aligned_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec3
aligned_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec3
aligned_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec3		aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec3
aligned_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec4
aligned_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec4
aligned_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec4		aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec4
aligned_highp	src/vendor/glm/detail/qualifier.hpp	/^			aligned_highp, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and operat/;"	e	enum:glm::qualifier
aligned_highp_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_highp>		aligned_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_highp>
aligned_highp_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_highp>		aligned_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_highp>
aligned_highp_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_highp>		aligned_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_highp>
aligned_highp_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_highp>		aligned_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_highp>
aligned_highp_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_highp>	aligned_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_highp>
aligned_highp_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_highp>	aligned_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_highp>
aligned_highp_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_highp>	aligned_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_highp>
aligned_highp_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_highp>	aligned_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_highp>
aligned_highp_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_highp>	aligned_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_highp>
aligned_highp_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_highp>	aligned_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_highp>
aligned_highp_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_highp>	aligned_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_highp>
aligned_highp_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_highp>	aligned_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_highp>
aligned_highp_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_highp>	aligned_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_highp>
aligned_highp_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_highp>	aligned_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_highp>
aligned_highp_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_highp>		aligned_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_highp>
aligned_highp_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_highp>		aligned_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_highp>
aligned_highp_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_highp>		aligned_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_highp>
aligned_highp_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_highp>		aligned_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_highp>
aligned_highp_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_highp>		aligned_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_highp>
aligned_highp_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_highp>		aligned_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_highp>
aligned_highp_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_highp>		aligned_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_highp>
aligned_highp_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_highp>		aligned_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_highp>
aligned_highp_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_highp>		aligned_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_highp>
aligned_highp_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_highp>		aligned_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_highp>
aligned_highp_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_highp>		aligned_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_highp>
aligned_highp_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_highp>		aligned_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_highp>
aligned_highp_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_highp>		aligned_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_highp>
aligned_highp_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_highp>		aligned_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_highp>
aligned_highp_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_highp>	aligned_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_highp>
aligned_highp_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_highp>	aligned_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_highp>
aligned_highp_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_highp>	aligned_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_highp>
aligned_highp_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_highp>	aligned_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_highp>
aligned_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec1
aligned_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec1
aligned_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec1		aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec1
aligned_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec2
aligned_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec2
aligned_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec2		aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec2
aligned_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec3
aligned_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec3
aligned_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec3		aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec3
aligned_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec4
aligned_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec4
aligned_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec4		aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec4
aligned_lowp	src/vendor/glm/detail/qualifier.hpp	/^			aligned_lowp, \/\/ \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and op/;"	e	enum:glm::qualifier
aligned_lowp_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_lowp>		aligned_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_lowp>
aligned_lowp_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_lowp>		aligned_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_lowp>
aligned_lowp_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_lowp>		aligned_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_lowp>
aligned_lowp_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_lowp>		aligned_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_lowp>
aligned_lowp_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_lowp>		aligned_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_lowp>
aligned_lowp_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_lowp>		aligned_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_lowp>
aligned_lowp_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_lowp>		aligned_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_lowp>
aligned_lowp_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_lowp>		aligned_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_lowp>
aligned_lowp_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_lowp>		aligned_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_lowp>
aligned_lowp_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_lowp>		aligned_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_lowp>
aligned_lowp_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_lowp>	aligned_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_lowp>
aligned_lowp_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_lowp>	aligned_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_lowp>
aligned_lowp_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_lowp>	aligned_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_lowp>
aligned_lowp_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_lowp>	aligned_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_lowp>
aligned_lowp_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_lowp>		aligned_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_lowp>
aligned_lowp_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_lowp>		aligned_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_lowp>
aligned_lowp_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_lowp>		aligned_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_lowp>
aligned_lowp_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_lowp>		aligned_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_lowp>
aligned_lowp_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_lowp>		aligned_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_lowp>
aligned_lowp_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_lowp>		aligned_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_lowp>
aligned_lowp_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_lowp>		aligned_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_lowp>
aligned_lowp_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_lowp>		aligned_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_lowp>
aligned_lowp_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_lowp>		aligned_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_lowp>
aligned_lowp_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_lowp>		aligned_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_lowp>
aligned_lowp_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_lowp>		aligned_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_lowp>
aligned_lowp_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_lowp>		aligned_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_lowp>
aligned_lowp_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_lowp>		aligned_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_lowp>
aligned_lowp_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_lowp>		aligned_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_lowp>
aligned_lowp_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_lowp>		aligned_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_lowp>
aligned_lowp_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_lowp>		aligned_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_lowp>
aligned_lowp_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_lowp>		aligned_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_lowp>
aligned_lowp_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_lowp>		aligned_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_lowp>
aligned_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2
aligned_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2
aligned_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2		aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2
aligned_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x2
aligned_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x2			aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x2
aligned_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x2
aligned_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x3
aligned_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x3			aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x3
aligned_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x3
aligned_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x4
aligned_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x4			aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x4
aligned_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x4
aligned_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3
aligned_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3
aligned_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3		aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3
aligned_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x2
aligned_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x2			aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x2
aligned_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x2
aligned_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x3
aligned_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x3			aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x3
aligned_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x3
aligned_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x4
aligned_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x4			aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x4
aligned_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x4
aligned_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4
aligned_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4
aligned_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4		aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4
aligned_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x2
aligned_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x2			aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x2
aligned_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x2
aligned_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x3
aligned_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x3			aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x3
aligned_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x3
aligned_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x4
aligned_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x4			aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x4
aligned_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x4
aligned_mediump	src/vendor/glm/detail/qualifier.hpp	/^			aligned_mediump, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and oper/;"	e	enum:glm::qualifier
aligned_mediump_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_mediump>	aligned_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_mediump>
aligned_mediump_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_mediump>	aligned_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_mediump>
aligned_mediump_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_mediump>	aligned_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_mediump>
aligned_mediump_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_mediump>	aligned_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_mediump>
aligned_mediump_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_mediump>	aligned_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_mediump>
aligned_mediump_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_mediump>	aligned_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_mediump>
aligned_mediump_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_mediump>	aligned_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_mediump>
aligned_mediump_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_mediump>	aligned_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_mediump>
aligned_mediump_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_mediump>	aligned_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_mediump>
aligned_mediump_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_mediump>	aligned_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_mediump>
aligned_mediump_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_mediump>	aligned_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_mediump>
aligned_mediump_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_mediump>	aligned_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_mediump>
aligned_mediump_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_mediump>	aligned_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_mediump>
aligned_mediump_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_mediump>	aligned_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_mediump>
aligned_mediump_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_mediump>	aligned_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_mediump>
aligned_mediump_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_mediump>	aligned_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_mediump>
aligned_mediump_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_mediump>	aligned_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_mediump>
aligned_mediump_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_mediump>	aligned_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_mediump>
aligned_mediump_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_mediump>	aligned_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_mediump>
aligned_mediump_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_mediump>	aligned_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_mediump>
aligned_mediump_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_mediump>	aligned_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_mediump>
aligned_mediump_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_mediump>	aligned_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_mediump>
aligned_mediump_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_mediump>	aligned_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_mediump>
aligned_mediump_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_mediump>	aligned_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_mediump>
aligned_mediump_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_mediump>	aligned_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_mediump>
aligned_mediump_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_mediump>	aligned_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_mediump>
aligned_mediump_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_mediump>	aligned_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_mediump>
aligned_mediump_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_mediump>	aligned_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_mediump>
aligned_mediump_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_mediump>	aligned_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_mediump>
aligned_mediump_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_mediump>	aligned_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_mediump>
aligned_mediump_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_mediump>	aligned_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_mediump>
aligned_mediump_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_mediump>	aligned_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_mediump>
aligned_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec1
aligned_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec1
aligned_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec1		aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec1
aligned_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec2
aligned_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec2
aligned_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec2		aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec2
aligned_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec3
aligned_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec3
aligned_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec3		aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec3
aligned_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec4
aligned_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec4
aligned_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec4		aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec4
aligned_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec1
aligned_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec1
aligned_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec1		aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec1
aligned_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec2
aligned_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec2
aligned_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec2		aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec2
aligned_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec3
aligned_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec3
aligned_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec3		aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec3
aligned_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec4 			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec4
aligned_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec4			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec4
aligned_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec4		aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec4
all	Makefile	/^all: cmake_check_build_system$/;"	t
all	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool all(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
all	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool all$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
all_a	src/vendor/stb_image/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anona39c15741008	typeref:typename:unsigned int
alloca	src/vendor/imgui/imgui_draw.cpp	/^#define alloca /;"	d	file:
angle	src/vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER T angle(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	src/vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T angle(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	src/vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER genType angle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
angleAxis	src/vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
any	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool any(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
any	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool any$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
app14_color_transform	src/vendor/stb_image/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anona39c15740808	typeref:typename:int
append	src/vendor/imgui/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendf	src/vendor/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	src/vendor/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
areCollinear	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areCollinear(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& e/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthogonal	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthogonal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthonormal	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthonormal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
array_of_unicode_codepoints	src/vendor/imgui/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anon715cafb90508	typeref:typename:int *
asec	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asec(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asec	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asech	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asech(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asech	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asin	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asinh	src/vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType asinh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asinh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
associatedMax	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<2, U, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,U,Q>
associatedMax	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, T, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
associatedMax	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
associatedMin	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<2, U, Q> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,U,Q>
associatedMin	src/vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
atan	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER genType atan(genType y, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atan	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan2	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}					/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
atan2	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> atan2(const vec<2, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
atan2	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> atan2(const vec<3, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
atan2	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> atan2(const vec<4, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
atanh	src/vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType atanh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atanh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
axis	src/vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> axis(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
axisAngle	src/vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER void axisAngle(mat<4, 4, T, Q> const& m, vec<3, T, Q> & axis, T& angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
axisAngleMatrix	src/vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> axisAngleMatrix(vec<3, T, Q> const& axis, T const angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
b	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520308	typeref:typename:T
b	src/vendor/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc806f352070a	typeref:typename:T
b	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30308	typeref:typename:T
b	src/vendor/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc8190bd3070a	typeref:typename:T
b	src/vendor/imgui/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	src/vendor/imgui/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	src/vendor/imgui/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
backEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
background	src/vendor/stb_image/stb_image.h	/^   stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc *
ballRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> ballRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
base_type	src/vendor/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 /;"	t	struct:glm::detail::_swizzle
baseline_y_delta	src/vendor/imgui/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anona9fd05c20408	typeref:typename:float
basic_format_saver	src/vendor/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_format_saver	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_format_saver<CTy, CTr>::basic_format_saver(std::basic_ios<CTy, CTr>& a/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
basic_state_saver	src/vendor/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
basic_state_saver	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::basic_state_saver(std::basic_ios<CTy, CTr>& a)$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
begin	src/vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type * begin(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
begin	src/vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type const * begin(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
begin	src/vendor/imgui/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	src/vendor/imgui/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	src/vendor/imgui/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
bgindex	src/vendor/stb_image/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
bitCount	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int bitCount(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> bitCount(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
bitCount	src/vendor/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(detail::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	src/vendor/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitfieldDeinterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u16vec2 bitfieldDeinterleave(glm::uint32 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u16vec2
bitfieldDeinterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u32vec2 bitfieldDeinterleave(glm::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u32vec2
bitfieldDeinterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER u8vec2 bitfieldDeinterleave(glm::uint16 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
bitfieldExtract	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldExtract	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldExtract(vec<L, T, Q> const& Value, int Offset, int Bits/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillOne	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillOne(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillOne	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillOne(vec<L, T, Q> const& Value, int FirstBit, int Bi/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillZero	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillZero(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillZero	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillZero(vec<L, T, Q> const& Value, int FirstBit, int B/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInsert	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldInsert(genIUType const& Base, genIUType const& Insert, int/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldInsert	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldInsert(vec<L, T, Q> const& Base, vec<L, T, Q> const& In/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 bitfieldInterleave(glm::uint8 x, glm::uint8 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint16 x, glm::uint16 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z, glm/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z, /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y, glm::uint32 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int16 bitfieldInterleave(int8 x, int8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int16 x, int16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z, int8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z, int16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y, int32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(uint8 x, uint8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint16 x, uint16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z, uint8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u32vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z, uint16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y, uint32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldReverse	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genType bitfieldReverse(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bitfieldReverse	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldReverse(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateLeft	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateLeft(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateLeft	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateLeft(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateRight	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateRight(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateRight	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateRight(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bits_per_channel	src/vendor/stb_image/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anona39c15740508	typeref:typename:int
bool1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatib/;"	t	namespace:glm	typeref:typename:bool
bool1x1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_c/;"	t	namespace:glm	typeref:typename:bool
bool2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
bool2x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<2,2,bool,highp>
bool2x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<2,3,bool,highp>
bool2x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<2,4,bool,highp>
bool3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
bool3x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<3,2,bool,highp>
bool3x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<3,3,bool,highp>
bool3x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<3,4,bool,highp>
bool4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
bool4x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<4,2,bool,highp>
bool4x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<4,3,bool,highp>
bool4x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<4,4,bool,highp>
bool_type	src/vendor/glm/detail/type_vec1.hpp	/^		typedef vec<1, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,bool,Q>
bool_type	src/vendor/glm/detail/type_vec2.hpp	/^		typedef vec<2, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,bool,Q>
bool_type	src/vendor/glm/detail/type_vec3.hpp	/^		typedef vec<3, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,bool,Q>
bool_type	src/vendor/glm/detail/type_vec4.hpp	/^		typedef vec<4, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,bool,Q>
bottom_y	src/vendor/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon715cafb91108	typeref:typename:int
bounceEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounds	src/vendor/imgui/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon715cafb90f08	typeref:typename:int
bpp	src/Texture.h	/^	int 			bpp;$/;"	m	class:Texture	typeref:typename:int
bpp	src/vendor/stb_image/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anona39c15741008	typeref:typename:int
bss_	src/vendor/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	typeref:typename:basic_state_saver<CTy> const
buffer_start	src/vendor/stb_image/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_uc[128]
buflen	src/vendor/stb_image/stb_image.h	/^   int buflen;$/;"	m	struct:__anona39c15740308	typeref:typename:int
bvec1	src/vendor/glm/ext/vector_bool1.hpp	/^	typedef vec<1, bool, defaultp>		bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, bool, defaultp>	bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec2	src/vendor/glm/ext/vector_bool2.hpp	/^	typedef vec<2, bool, defaultp>		bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, bool, defaultp>	bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec3	src/vendor/glm/ext/vector_bool3.hpp	/^	typedef vec<3, bool, defaultp>		bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, bool, defaultp>	bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec4	src/vendor/glm/ext/vector_bool4.hpp	/^	typedef vec<4, bool, defaultp>		bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
bvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, bool, defaultp>	bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
byte	src/vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm	typeref:typename:detail::uint8
c_str	src/vendor/imgui/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, R, Q> call(R (*Func) (T x), vec<1, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,R,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, R, Q> call(R (*Func) (T x), vec<2, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,R,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, R, Q> call(R (*Func) (T x), vec<3, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,R,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, R, Q> call(R (*Func) (T x), vec<4, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,R,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, vec<1/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, vec<2/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, vec<3/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	src/vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, vec<4/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	src/vendor/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static float call(float x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR float
call	src/vendor/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genFIType call(genFIType x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
call	src/vendor/glm/detail/compute_vector_relational.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(T a, T b)$/;"	f	struct:glm::detail::compute_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, U const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, bool const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_step_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edg/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sign	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_trunc	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal,/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U co/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec</;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& edge0, vec<4, float, Q/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& x, vec<4, int, Q> const& m/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	src/vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& x, vec<4, uint, Q> const/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	src/vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, lowp> call(vec<L, float, lowp> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,lowp>	file:
call	src/vendor/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& /;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,aligned_lowp>	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<1, T, Q> const& a, vec<1, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<2, T, Q> const& a, vec<2, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T et/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec</;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& p0, vec<4, float, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& x, vec<4, float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<3, float, Q> const& a, vec<3, float, Q> co/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& N, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	src/vendor/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T Shift)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	src/vendor/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	src/vendor/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 3, T, Q> call(mat<3, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 4, T, Q> call(mat<4, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 2, T, Q> call(mat<2, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 4, T, Q> call(mat<4, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 2, T, Q> call(mat<2, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 3, T, Q> call(mat<3, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	src/vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>	file:
call	src/vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	src/vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	src/vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	src/vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& x, mat<4, 4, flo/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<double,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<double,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<double,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<double,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<float,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<float,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<float,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<float,Q>	file:
call	src/vendor/glm/detail/type_quat_simd.inl	/^		static vec<4, float, Q> call(qua<float, Q> const& q, vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_quat_mul_vec4	typeref:typename:vec<4,float,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& /;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& /;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_and	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_mod	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_or	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_shift_left	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_shift_right	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_xor	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	f	struct:glm::detail::compute_vec4_bitwise_not	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:bool	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:bool	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:bool	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:bool	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_and	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_or	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_shift_left	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_shift_right	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_xor	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	f	struct:glm::detail::compute_vec4_bitwise_not	typeref:typename:vec<4,T,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,double,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,double,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,double,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,double,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,float,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,float,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,float,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,float,Q>	file:
call	src/vendor/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& a, vec<4, float, al/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,float,aligned_lowp>	file:
call	src/vendor/glm/ext/quaternion_common_simd.inl	/^		static GLM_FUNC_QUALIFIER float call(qua<float, Q> const& x, qua<float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	src/vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	src/vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	src/vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtc/integer.inl	/^			GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	src/vendor/glm/gtc/integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint8,P>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint8,P>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint8,P>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint8,P>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& Min, vec<L, double, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& Min, vec<L, float, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int16, Q> call(vec<L, int16, Q> const& Min, vec<L, int16, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int16,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int32, Q> call(vec<L, int32, Q> const& Min, vec<L, int32, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int32,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int64, Q> call(vec<L, int64, Q> const& Min, vec<L, int64, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int8, Q> call(vec<L, int8, Q> const& Min, vec<L, int8, Q> con/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int8,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, long double, Q> call(vec<L, long double, Q> const& Min, vec<L/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,long double,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call(vec<L, uint16, Q> const& Min, vec<L, uint16, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call(vec<L, uint32, Q> const& Min, vec<L, uint32, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call(vec<L, uint64, Q> const& Min, vec<L, uint64, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	src/vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint8, Q> call(vec<L, uint8, Q> const& Min, vec<L, uint8, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint8,Q>	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_ceilMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_floorMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_roundMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Shift)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceilPowerOfTwo	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtx/common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_fmod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, floatType, Q> const& v)$/;"	f	struct:glm::detail::compute_compScale	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	src/vendor/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, floatType, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_compNormalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>	file:
call	src/vendor/glm/gtx/exterior_product.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<2, T, Q> const& v, vec<2, T, Q> const& u)$/;"	f	struct:glm::detail::compute_cross_vec2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/gtx/norm.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<2, T, Q> const& v0, vec<2, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<3, T, Q> const& v0, vec<3, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<4, T, Q> const& v0, vec<4, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<2, bool, Q> call(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<3, bool, Q> call(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>	file:
call	src/vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<4, bool, Q> call(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>	file:
capacity	src/vendor/imgui/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cast	src/vendor/glm/gtx/string_cast.inl	/^	struct cast$/;"	s	namespace:glm::detail	file:
cast	src/vendor/glm/gtx/string_cast.inl	/^	struct cast<float>$/;"	s	namespace:glm::detail	file:
catmullRom	src/vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType catmullRom$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceil	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceil(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cff	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
channel	src/vendor/stb_image/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anona39c15741108	typeref:typename:stbi_uc
channel_order	src/vendor/stb_image/stb_image.h	/^   int channel_order;$/;"	m	struct:__anona39c15740508	typeref:typename:int
char_storage	src/vendor/imgui/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anona9fd05c20108	typeref:typename:int
char_type	src/vendor/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	typeref:typename:CTy
char_type	src/vendor/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:state_type::char_type
chardata_for_range	src/vendor/imgui/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon715cafb90508	typeref:typename:stbtt_packedchar *
charstrings	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
circularEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> circularRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
clamp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType clamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
clamp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType clamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
clamp	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> clamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
clean	Makefile	/^clean:$/;"	t
clean/fast	Makefile	/^clean\/fast: clean$/;"	t
clear	src/vendor/imgui/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	src/vendor/imgui/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
closeBounded	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> closeBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
closestPointOnLine	src/vendor/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
closestPointOnLine	src/vendor/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cmake_check_build_system	Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	Makefile	/^cmake_force:$/;"	t
code	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anona39c15740708	typeref:typename:stbi__uint16[256]
code_bits	src/vendor/stb_image/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anona39c15740808	typeref:typename:int
code_buffer	src/vendor/stb_image/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__uint32
code_buffer	src/vendor/stb_image/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anona39c15740c08	typeref:typename:stbi__uint32
codes	src/vendor/stb_image/stb_image.h	/^   stbi__gif_lzw codes[8192];$/;"	m	struct:__anona39c15741308	typeref:typename:stbi__gif_lzw[8192]
coeff	src/vendor/stb_image/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:short *
coeff_h	src/vendor/stb_image/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
coeff_w	src/vendor/stb_image/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
col	src/vendor/imgui/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colMajor2	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> colMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
colMajor3	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> colMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
colMajor4	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> colMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
col_type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
color_table	src/vendor/stb_image/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc *
cols	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const cols = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
cols	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const cols = C;$/;"	v	typeref:typename:length_t const
cols	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::cols;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
cols	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::cols;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
column	src/vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
column	src/vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::col_type column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::col_type
column_major	src/vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
combine	src/vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> combine($/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
compAdd	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compAdd(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMax	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMax(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMin	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMul	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMul(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compNormalize	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> compNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
compScale	src/vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> compScale(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
components	src/vendor/glm/gtx/range.hpp	/^	inline length_t components(genType const& m)$/;"	f	namespace:glm	typeref:typename:length_t
components	src/vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	src/vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	src/vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	src/vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = C;$/;"	v	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = L;$/;"	v	namespace:glm	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::components;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::components;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<qua<T, Q> >::components;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<tdualquat<T, Q> >::components;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:length_t const
components	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<vec<L, T, Q> >::components;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:length_t const
compute_YCoCgR	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR {$/;"	c	namespace:glm	file:
compute_YCoCgR	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR<T, Q, true> {$/;"	c	namespace:glm	file:
compute_abs	src/vendor/glm/detail/compute_common.hpp	/^	struct compute_abs$/;"	s	namespace:glm::detail
compute_abs	src/vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<float, true>$/;"	s	namespace:glm::detail
compute_abs	src/vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, false>$/;"	s	namespace:glm::detail
compute_abs	src/vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, true>$/;"	s	namespace:glm::detail
compute_abs_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_abs_vector$/;"	s	namespace:glm::detail	file:
compute_abs_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_abs_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear{};$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	src/vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	src/vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	src/vendor/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldBitCountStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	src/vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	src/vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	src/vendor/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldReverseStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_ceil	src/vendor/glm/detail/func_common.inl	/^	struct compute_ceil$/;"	s	namespace:glm::detail	file:
compute_ceil	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_ceil<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilMultiple{};$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilPowerOfTwo$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilPowerOfTwo<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_ceilShift	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilShift$/;"	s	namespace:glm::detail	file:
compute_ceilShift	src/vendor/glm/gtc/round.inl	/^	struct compute_ceilShift<L, T, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_clamp_vector$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize$/;"	s	namespace:glm::detail	file:
compute_compNormalize	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale$/;"	s	namespace:glm::detail	file:
compute_compScale	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compScale	src/vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_cross	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_cross$/;"	s	namespace:glm::detail	file:
compute_cross	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_cross<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_cross_vec2	src/vendor/glm/gtx/exterior_product.inl	/^	struct compute_cross_vec2$/;"	s	namespace:glm::detail	file:
compute_determinant	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant{};$/;"	s	namespace:glm::detail	file:
compute_determinant	src/vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_determinant<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_distance	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_distance$/;"	s	namespace:glm::detail	file:
compute_distance	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_distance<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<1, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<2, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<3, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<4, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_dot{};$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_dot<vec<4, float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_dot	src/vendor/glm/ext/quaternion_common_simd.inl	/^	struct compute_dot<qua<float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_equal	src/vendor/glm/detail/compute_vector_relational.hpp	/^	struct compute_equal$/;"	s	namespace:glm::detail
compute_faceforward	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_faceforward$/;"	s	namespace:glm::detail	file:
compute_faceforward	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_faceforward<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_findLSB	src/vendor/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 32>$/;"	s	namespace:glm::detail	file:
compute_findLSB	src/vendor/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 64>$/;"	s	namespace:glm::detail	file:
compute_findLSB	src/vendor/glm/detail/func_integer.inl	/^	struct compute_findLSB$/;"	s	namespace:glm::detail	file:
compute_findMSB_32	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_32(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_64	src/vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_64(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_step_vec	src/vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec$/;"	s	namespace:glm::detail	file:
compute_findMSB_step_vec	src/vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	src/vendor/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 32>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	src/vendor/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 64>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	src/vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_vec$/;"	s	namespace:glm::detail	file:
compute_floor	src/vendor/glm/detail/func_common.inl	/^	struct compute_floor$/;"	s	namespace:glm::detail	file:
compute_floor	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_floor<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_floorMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_floorMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_floorMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_floorMultiple{};$/;"	s	namespace:glm::detail	file:
compute_fmod	src/vendor/glm/gtx/common.inl	/^	struct compute_fmod$/;"	s	namespace:glm::detail	file:
compute_fmod	src/vendor/glm/gtx/common.inl	/^	struct compute_fmod<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_fract	src/vendor/glm/detail/func_common.inl	/^	struct compute_fract$/;"	s	namespace:glm::detail	file:
compute_fract	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_fract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_half	src/vendor/glm/gtc/packing.inl	/^	struct compute_half$/;"	s	namespace:glm::detail	file:
compute_half	src/vendor/glm/gtc/packing.inl	/^	struct compute_half<1, Q>$/;"	s	namespace:glm::detail	file:
compute_half	src/vendor/glm/gtc/packing.inl	/^	struct compute_half<2, Q>$/;"	s	namespace:glm::detail	file:
compute_half	src/vendor/glm/gtc/packing.inl	/^	struct compute_half<3, Q>$/;"	s	namespace:glm::detail	file:
compute_half	src/vendor/glm/gtc/packing.inl	/^	struct compute_half<4, Q>$/;"	s	namespace:glm::detail	file:
compute_inverse	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse{};$/;"	s	namespace:glm::detail	file:
compute_inverse	src/vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_inverse<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	src/vendor/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	src/vendor/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt<L, float, lowp, Aligned>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull{};$/;"	s	namespace:glm::detail	file:
compute_length	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_length$/;"	s	namespace:glm::detail	file:
compute_length	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_length<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_length2	src/vendor/glm/gtx/norm.inl	/^	struct compute_length2$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, float, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int8, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, long double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	src/vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint8, Q>$/;"	s	namespace:glm::detail	file:
compute_log2	src/vendor/glm/detail/func_exponential.inl	/^	struct compute_log2$/;"	s	namespace:glm::detail	file:
compute_log2	src/vendor/glm/gtc/integer.inl	/^		struct compute_log2<4, int, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_log2	src/vendor/glm/gtc/integer.inl	/^	struct compute_log2<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_matrixCompMult$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	src/vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_matrixCompMult<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_max_vector$/;"	s	namespace:glm::detail	file:
compute_max_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_min_vector$/;"	s	namespace:glm::detail	file:
compute_min_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mix	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix$/;"	s	namespace:glm::detail	file:
compute_mix	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix<T, bool>$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix_scalar$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix_scalar<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix_vector$/;"	s	namespace:glm::detail	file:
compute_mix_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_mix_vector<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_mix_vector<4, float, bool, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mod	src/vendor/glm/detail/func_common.inl	/^	struct compute_mod$/;"	s	namespace:glm::detail	file:
compute_mod	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_mod<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_normalize	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_normalize$/;"	s	namespace:glm::detail	file:
compute_normalize	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_normalize<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_add	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_add	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_vec4	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_vec4<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	src/vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<1, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<2, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<3, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<4, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	src/vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_reflect	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_reflect$/;"	s	namespace:glm::detail	file:
compute_reflect	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_reflect<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_refract	src/vendor/glm/detail/func_geometric.inl	/^	struct compute_refract$/;"	s	namespace:glm::detail	file:
compute_refract	src/vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_refract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	src/vendor/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	src/vendor/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_round	src/vendor/glm/detail/func_common.inl	/^	struct compute_round$/;"	s	namespace:glm::detail	file:
compute_round	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_round<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	src/vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple{};$/;"	s	namespace:glm::detail	file:
compute_sign	src/vendor/glm/detail/func_common.inl	/^	struct compute_sign$/;"	s	namespace:glm::detail	file:
compute_sign	src/vendor/glm/detail/func_common.inl	/^	struct compute_sign<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_smoothstep_vector$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	src/vendor/glm/detail/func_common_simd.inl	/^	struct compute_smoothstep_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_sqrt	src/vendor/glm/detail/func_exponential.inl	/^	struct compute_sqrt$/;"	s	namespace:glm::detail	file:
compute_sqrt	src/vendor/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_sqrt	src/vendor/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	src/vendor/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	src/vendor/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_step_vector	src/vendor/glm/detail/func_common.inl	/^	struct compute_step_vector$/;"	s	namespace:glm::detail	file:
compute_to_string	src/vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose{};$/;"	s	namespace:glm::detail	file:
compute_transpose	src/vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_transpose<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_trunc	src/vendor/glm/detail/func_common.inl	/^	struct compute_trunc$/;"	s	namespace:glm::detail	file:
compute_vec4_add	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_add$/;"	s	namespace:glm::detail	file:
compute_vec4_add	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_add	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_and	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_and$/;"	s	namespace:glm::detail	file:
compute_vec4_and	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_and<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_and	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_and<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_bitwise_not$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_bitwise_not<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_bitwise_not<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_div$/;"	s	namespace:glm::detail	file:
compute_vec4_div	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_equal$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<int, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mod	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_mod$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_mul$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_nequal$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<int, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_or	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_or$/;"	s	namespace:glm::detail	file:
compute_vec4_or	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_or<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_or	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_or<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_shift_left$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_left<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_left<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_shift_right$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_right<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_right<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_sub$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	src/vendor/glm/detail/type_vec4.inl	/^	struct compute_vec4_xor$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_xor<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	src/vendor/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_xor<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
conjugate	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> conjugate(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
const	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_iterator	src/vendor/imgui/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	src/vendor/imgui/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
convertD65XYZToD50XYZ	src/vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToD50XYZ(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertD65XYZToLinearSRGB	src/vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToLinearSRGB(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD50XYZ	src/vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD50XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD65XYZ	src/vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD65XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearToSRGB	src/vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, float, lowp> convertLinearToSRGB(vec<3, float, lowp> const& ColorLine/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,lowp>
convertLinearToSRGB	src/vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertLinearToSRGB	src/vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	src/vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	src/vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos_52s	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T cos_52s(T x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
cos_52s	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos_52s(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cosh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cot	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType cot(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cot	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
coth	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType coth(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
coth	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> coth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
count	src/IndexBuffer.h	/^	unsigned int count;$/;"	m	class:IndexBuffer	typeref:typename:unsigned int
count	src/VertexBufferLayout.h	/^	unsigned int count;$/;"	m	struct:VertexBufferLayoutElement	typeref:typename:unsigned int
countof	src/vendor/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	typeref:typename:std::size_t
cross	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cross	src/vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> cross(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
cross	src/vendor/glm/gtx/exterior_product.inl	/^	GLM_FUNC_QUALIFIER T cross(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
cross	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cross	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(vec<3, T, Q> const& v, qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
csc	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csc(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csc	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
csch	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csch(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csch	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cubic	src/vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType cubic$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cur_x	src/vendor/stb_image/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
cur_y	src/vendor/stb_image/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
current_frame	src/vendor/imgui/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
cursor	src/vendor/imgui/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anona9fd05c20308	typeref:typename:int
cursor	src/vendor/imgui/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon715cafb90108	typeref:typename:int
cursor_at_end_of_line	src/vendor/imgui/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
cx	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
cx1	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
cy	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
cy1	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
data	src/vendor/glm/detail/qualifier.hpp	/^				T data[4];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[4]
data	src/vendor/glm/detail/qualifier.hpp	/^				T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	src/vendor/glm/detail/qualifier.hpp	/^			T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	src/vendor/glm/detail/type_quat.hpp	/^				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::qua::__anonfa4f7e7c010a	typeref:typename:detail::storage<4,T,detail::is_aligned<Q>::value>::type
data	src/vendor/glm/detail/type_vec1.hpp	/^				typename detail::storage<1, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anonc7e2c250010a	typeref:typename:detail::storage<1,T,detail::is_aligned<Q>::value>::type
data	src/vendor/glm/detail/type_vec2.hpp	/^				typename detail::storage<2, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anonc7f4dad1010a	typeref:typename:detail::storage<2,T,detail::is_aligned<Q>::value>::type
data	src/vendor/glm/detail/type_vec3.hpp	/^				typename detail::storage<3, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anonc806f352010a	typeref:typename:detail::storage<3,T,detail::is_aligned<Q>::value>::type
data	src/vendor/glm/detail/type_vec4.hpp	/^				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anonc8190bd3010a	typeref:typename:detail::storage<4,T,detail::is_aligned<Q>::value>::type
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::i10i10i10i2	typeref:struct:glm::detail::i10i10i10i2::__anon7920d4230708	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u10u10u10u2	typeref:struct:glm::detail::u10u10u10u2::__anon7920d4230608	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u3u3u2	typeref:struct:glm::detail::u3u3u2::__anon7920d4230108	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4	typeref:struct:glm::detail::u4u4::__anon7920d4230208	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4u4u4	typeref:struct:glm::detail::u4u4u4u4::__anon7920d4230308	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u5u5u1	typeref:struct:glm::detail::u5u5u5u1::__anon7920d4230508	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u6u5	typeref:struct:glm::detail::u5u6u5::__anon7920d4230408	file:
data	src/vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u9u9u9e5	typeref:struct:glm::detail::u9u9u9e5::__anon7920d4230808	file:
data	src/vendor/imgui/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	src/vendor/imgui/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon715cafb90108	typeref:typename:unsigned char *
data	src/vendor/stb_image/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:stbi_uc *
dc_pred	src/vendor/stb_image/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
dct_bfly32o	src/vendor/stb_image/stb_image.h	/^   #define dct_bfly32o(/;"	d
dct_bfly32o	src/vendor/stb_image/stb_image.h	/^#define dct_bfly32o(/;"	d
dct_const	src/vendor/stb_image/stb_image.h	/^   #define dct_const(/;"	d
dct_interleave16	src/vendor/stb_image/stb_image.h	/^   #define dct_interleave16(/;"	d
dct_interleave8	src/vendor/stb_image/stb_image.h	/^   #define dct_interleave8(/;"	d
dct_long_mac	src/vendor/stb_image/stb_image.h	/^#define dct_long_mac(/;"	d
dct_long_mul	src/vendor/stb_image/stb_image.h	/^#define dct_long_mul(/;"	d
dct_pass	src/vendor/stb_image/stb_image.h	/^   #define dct_pass(/;"	d
dct_pass	src/vendor/stb_image/stb_image.h	/^#define dct_pass(/;"	d
dct_rot	src/vendor/stb_image/stb_image.h	/^   #define dct_rot(/;"	d
dct_trn16	src/vendor/stb_image/stb_image.h	/^#define dct_trn16(/;"	d
dct_trn32	src/vendor/stb_image/stb_image.h	/^#define dct_trn32(/;"	d
dct_trn64	src/vendor/stb_image/stb_image.h	/^#define dct_trn64(/;"	d
dct_trn8_16	src/vendor/stb_image/stb_image.h	/^#define dct_trn8_16(/;"	d
dct_trn8_32	src/vendor/stb_image/stb_image.h	/^#define dct_trn8_32(/;"	d
dct_trn8_8	src/vendor/stb_image/stb_image.h	/^#define dct_trn8_8(/;"	d
dct_wadd	src/vendor/stb_image/stb_image.h	/^   #define dct_wadd(/;"	d
dct_wadd	src/vendor/stb_image/stb_image.h	/^#define dct_wadd(/;"	d
dct_widen	src/vendor/stb_image/stb_image.h	/^   #define dct_widen(/;"	d
dct_widen	src/vendor/stb_image/stb_image.h	/^#define dct_widen(/;"	d
dct_wsub	src/vendor/stb_image/stb_image.h	/^   #define dct_wsub(/;"	d
dct_wsub	src/vendor/stb_image/stb_image.h	/^#define dct_wsub(/;"	d
ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:highp_ddualquat
ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:lowp_ddualquat
ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm	typeref:typename:mediump_ddualquat
decompose	src/vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER bool decompose(mat<4, 4, T, Q> const& ModelMatrix, vec<3, T, Q> & Scale, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
default_target	Makefile	/^default_target: all$/;"	t
defaultp	src/vendor/glm/detail/qualifier.hpp	/^			defaultp = aligned_highp$/;"	e	enum:glm::qualifier
degrees	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType degrees(genType radians)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
degrees	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> degrees(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
delay	src/vendor/stb_image/stb_image.h	/^   int delay;$/;"	m	struct:__anona39c15741308	typeref:typename:int
delete_length	src/vendor/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anona9fd05c20108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
delim_left	src/vendor/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delim_right	src/vendor/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delimeter	src/vendor/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
delimeter	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER delimeter<CTy>::delimeter(CTy a, CTy b, CTy c)$/;"	f	class:glm::io::delimeter	typeref:typename:GLM_FUNC_QUALIFIER
delta	src/vendor/stb_image/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anona39c15740708	typeref:typename:int[17]
depend	Makefile	/^depend:$/;"	t
depth	src/vendor/stb_image/stb_image.h	/^   int depth;$/;"	m	struct:__anona39c15740e08	typeref:typename:int
dequant	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__uint16[4][64]
derivedEulerAngleX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
detail	src/vendor/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/compute_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/compute_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/func_common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_exponential.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_exponential_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_geometric.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_geometric_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_integer_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_matrix.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_matrix_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_packing_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/func_vector_relational_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/qualifier.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/setup.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/detail/type_half.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/type_quat.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/type_quat_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/type_vec4.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/detail/type_vec4_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/ext/quaternion_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/ext/scalar_int_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/ext/scalar_uint_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	src/vendor/glm/ext/scalar_ulp.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/bitfield.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/color_space.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/packing.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/random.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtc/round.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/component_wise.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/exterior_product.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/fast_trigonometry.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/hash.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/io.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/matrix_decompose.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/norm.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/string_cast.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/gtx/vector_query.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	src/vendor/glm/matrix.hpp	/^namespace detail$/;"	n	namespace:glm
determinant	src/vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER T determinant(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
diagonal2x2	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> diagonal2x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
diagonal2x3	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> diagonal2x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
diagonal2x4	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> diagonal2x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
diagonal3x2	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> diagonal3x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
diagonal3x3	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> diagonal3x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
diagonal3x4	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> diagonal3x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
diagonal4x2	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> diagonal4x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
diagonal4x3	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> diagonal4x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
diagonal4x4	src/vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> diagonal4x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
direction	src/vendor/imgui/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	src/vendor/imgui/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
diskRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> diskRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
distance	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T distance(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType distance(genType const& p0, genType const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
distance2	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(T p0, T p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance2	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dmat2	src/vendor/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
dmat2x2	src/vendor/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, defaultp>	dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x3	src/vendor/glm/ext/matrix_double2x3.hpp	/^	typedef mat<2, 3, double, defaultp>		dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, defaultp>	dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x4	src/vendor/glm/ext/matrix_double2x4.hpp	/^	typedef mat<2, 4, double, defaultp>		dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, defaultp>	dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat3	src/vendor/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
dmat3x2	src/vendor/glm/ext/matrix_double3x2.hpp	/^	typedef mat<3, 2, double, defaultp>		dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, defaultp>	dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x3	src/vendor/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, defaultp>	dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x4	src/vendor/glm/ext/matrix_double3x4.hpp	/^	typedef mat<3, 4, double, defaultp>		dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, defaultp>	dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat4	src/vendor/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
dmat4x2	src/vendor/glm/ext/matrix_double4x2.hpp	/^	typedef mat<4, 2, double, defaultp>		dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, defaultp>	dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x3	src/vendor/glm/ext/matrix_double4x3.hpp	/^	typedef mat<4, 3, double, defaultp>		dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, defaultp>	dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x4	src/vendor/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, defaultp>	dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dot	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(T x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	src/vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
double1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-qualifier floating-point vector with 1 comp/;"	t	namespace:glm	typeref:typename:double
double1x1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-qualifier floating-point matrix with 1 co/;"	t	namespace:glm	typeref:typename:double
double2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, double, highp>		double2;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
double2x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, double, highp>		double2x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
double2x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, double, highp>		double2x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
double2x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, double, highp>		double2x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
double3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, double, highp>		double3;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
double3x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, double, highp>		double3x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
double3x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, double, highp>		double3x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
double3x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, double, highp>		double3x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
double4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, double, highp>		double4;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
double4x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, double, highp>		double4x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
double4x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, double, highp>		double4x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
double4x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, double, highp>		double4x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
dquat	src/vendor/glm/ext/quaternion_double.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
dquat	src/vendor/glm/fwd.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
dual	src/vendor/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
dual_quat_identity	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dual_quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
dualquat_cast	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<2, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat_cast	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<3, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dvec1	src/vendor/glm/ext/vector_double1.hpp	/^	typedef vec<1, double, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,defaultp>
dvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
dvec2	src/vendor/glm/ext/vector_double2.hpp	/^	typedef vec<2, double, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,defaultp>
dvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
dvec3	src/vendor/glm/ext/vector_double3.hpp	/^	typedef vec<3, double, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,defaultp>
dvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
dvec4	src/vendor/glm/ext/vector_double4.hpp	/^	typedef vec<4, double, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,defaultp>
dvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
dword	src/vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm	typeref:typename:detail::uint32
dx	src/vendor/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType e()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
e	src/vendor/imgui/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
edit_cache	Makefile	/^edit_cache:$/;"	t
edit_cache/fast	Makefile	/^edit_cache\/fast: edit_cache$/;"	t
eflags	src/vendor/stb_image/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
elasticEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elem	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T const& elem(size_t i) const{ return (reinterpret_cast<const T*>(_buffer))/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T const &
elem	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& elem(size_t i){ return (reinterpret_cast<T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T &
elements	src/VertexBufferLayout.h	/^	std::vector<VertexBufferLayoutElement> elements;$/;"	m	class:VertexBufferLayout	typeref:typename:std::vector<VertexBufferLayoutElement>
empty	src/vendor/imgui/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	src/vendor/imgui/imgui.h	/^    bool                empty()                 { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	src/vendor/imgui/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
end	src/vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type * end(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
end	src/vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type const * end(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
end	src/vendor/imgui/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	src/vendor/imgui/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	src/vendor/imgui/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
eob_run	src/vendor/stb_image/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anona39c15740808	typeref:typename:int
eof	src/vendor/stb_image/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end o/;"	m	struct:__anona39c15740208	typeref:typename:int (*)(void * user)
epsilon	src/vendor/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType epsilon()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
epsilonEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonEqual(qua<T, Q> const& x, qua<T, Q> const& y, T const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, v/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonNotEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(double const& x, double const& y, double const& epsilon/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(float const& x, float const& y, float const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonNotEqual(qua<T, Q> const& x, qua<T, Q> const& y, T co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonNotEqual	src/vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
equal	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	src/vendor/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> equal(mat<C, R, T, Q> const& a, mat<C, R, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
equal	src/vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	src/vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	src/vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, genType const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	src/vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, int MaxULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	src/vendor/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool equal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
equal	src/vendor/imgui/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	src/vendor/imgui/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
erase	src/vendor/imgui/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	src/vendor/imgui/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
euclidean	src/vendor/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> euclidean$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
euler	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType euler()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
eulerAngleX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYZ	src/vendor/glm/gtx/euler_angles.inl	/^    GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngles	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> eulerAngles(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
exp	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
exp	src/vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> exp(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
exp2	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType exp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exp2	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
expanded	src/vendor/stb_image/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anona39c15740e08	typeref:typename:stbi_uc **
exponent	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 23) & ((1 << 8) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponent	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 52) & ((int_type(1) << 11) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponentialEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	src/vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER genType extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	src/vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
extend	src/vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
extend	src/vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
extra	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
extractEulerAngleXYX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXYZ	src/vendor/glm/gtx/euler_angles.inl	/^    GLM_FUNC_DECL void extractEulerAngleXYZ(mat<4, 4, T, defaultp> const& M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL void
extractEulerAngleXZX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXZY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXY	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYX	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYZ	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractMatrixRotation	src/vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> extractMatrixRotation(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
extractRealComponent	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T extractRealComponent(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ey	src/vendor/imgui/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
f	src/vendor/glm/detail/type_float.hpp	/^		float_type f;$/;"	m	union:glm::detail::float_t	typeref:typename:float_type
f	src/vendor/glm/detail/type_half.inl	/^		float f;$/;"	m	union:glm::detail::uif32	typeref:typename:float	file:
f32	src/vendor/glm/fwd.hpp	/^	typedef float					f32;$/;"	t	namespace:glm	typeref:typename:float
f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm	typeref:typename:float32
f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm	typeref:typename:lowp_f32
f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm	typeref:typename:mediump_float32
f32mat1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat1x1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f32, defaultp>			f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, defaultp> f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, defaultp> f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f32
f32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, defaultp> f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, defaultp> f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, defaultp> f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f64	src/vendor/glm/fwd.hpp	/^	typedef double					f64;$/;"	t	namespace:glm	typeref:typename:double
f64	src/vendor/glm/gtc/type_precision.hpp	/^		typedef float64 f64;$/;"	t	namespace:glm	typeref:typename:float64
f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm	typeref:typename:lowp_f64
f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm	typeref:typename:mediump_float64
f64mat1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat1x1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, defaultp>	f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, defaultp> f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, defaultp>	f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, defaultp> f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, defaultp>	f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, defaultp> f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, defaultp>	f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, defaultp> f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, defaultp>	f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, defaultp> f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, defaultp>	f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, defaultp> f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f64, defaultp>			f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, defaultp> f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec1	src/vendor/glm/gtc/type_precision.hpp	/^		typedef vec<1, f64, defaultp> f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f64
f64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec2	src/vendor/glm/gtc/type_precision.hpp	/^		typedef vec<2, f64, defaultp> f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec3	src/vendor/glm/gtc/type_precision.hpp	/^		typedef vec<3, f64, defaultp> f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
f64vec4	src/vendor/glm/gtc/type_precision.hpp	/^		typedef vec<4, f64, defaultp> f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
faceforward	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType faceforward(genType const& N, genType const& I, genType const& Nref)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
faceforward	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> faceforward(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
factorial	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER genType factorial(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
factorial	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
factorial	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
factorial	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
fade	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> fade(vec<2, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
fade	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> fade(vec<3, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
fade	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> fade(vec<4, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
fast	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anona39c15740b08	typeref:typename:stbi__uint16[]
fast	src/vendor/stb_image/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anona39c15740708	typeref:typename:stbi_uc[]
fastAcos	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAcos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAcos	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAcos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAsin	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAsin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAsin	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAsin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T y, T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& y, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastCos	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastCos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastCos	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastDistance	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastDistance(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastDistance	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastDistance(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastExp(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastExp	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastExp2	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastExp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp2	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastInverseSqrt	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastInverseSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastInverseSqrt	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastInverseSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLength	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastLength(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastLength	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastLength(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLog2	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog2	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastMix	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> fastMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
fastNormalize	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastNormalize(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastNormalize	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastNormalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastNormalizeDot	src/vendor/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T fastNormalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastPow(T x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastPow(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastPow	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastPow	src/vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, int, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSin	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastSin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastSin	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSqrt	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastSqrt	src/vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastTan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastTan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastTan	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastTan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fast_ac	src/vendor/stb_image/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__int16[4][]
fclamp	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER genType fclamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fclamp	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fclamp	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fdselect	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
fdx	src/vendor/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	src/vendor/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
filePath	src/Texture.h	/^	std::string 	filePath;$/;"	m	class:Texture	typeref:typename:std::string
filepath	src/Shader.h	/^	std::string filepath;$/;"	m	class:Shader	typeref:typename:std::string
fill_	src/vendor/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:char_type
findLSB	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findLSB(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findLSB	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findLSB(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
findMSB	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findMSB(genIUType v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findMSB	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findMSB(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
first	src/vendor/stb_image/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anona39c15741208	typeref:typename:stbi_uc
first_char	src/vendor/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anona9fd05c20508	typeref:typename:int
first_free	src/vendor/imgui/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_row_filter	src/vendor/stb_image/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v	typeref:typename:stbi_uc[5]
first_unicode_codepoint_in_range	src/vendor/imgui/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anon715cafb90508	typeref:typename:int
first_x	src/vendor/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:float
first_y	src/vendor/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:float
firstcode	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anona39c15740b08	typeref:typename:stbi__uint16[16]
firstsymbol	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anona39c15740b08	typeref:typename:stbi__uint16[16]
flags	src/vendor/stb_image/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
flags_	src/vendor/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:flags_type
flags_type	src/vendor/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::ios_base::fmtflags
fliplr	src/vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> fliplr(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
flipud	src/vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> flipud(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
float1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-qualifier floating-point vector with 1 compo/;"	t	namespace:glm	typeref:typename:float
float1x1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-qualifier floating-point matrix with 1 comp/;"	t	namespace:glm	typeref:typename:float
float2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, float, highp>		float2;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
float2half	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 float2half(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
float2packed10	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed10(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2packed11	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed11(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, float, highp>		float2x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
float2x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, float, highp>		float2x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
float2x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, float, highp>		float2x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
float3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, float, highp>		float3;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
float32	src/vendor/glm/fwd.hpp	/^	typedef float					float32;$/;"	t	namespace:glm	typeref:typename:float
float32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float float32;$/;"	t	namespace:glm	typeref:typename:float
float32_t	src/vendor/glm/fwd.hpp	/^	typedef float					float32_t;$/;"	t	namespace:glm	typeref:typename:float
float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 float32_t;$/;"	t	namespace:glm	typeref:typename:float32
float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:lowp_float32_t
float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm	typeref:typename:mediump_float32
float3x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, float, highp>		float3x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
float3x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, float, highp>		float3x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
float3x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, float, highp>		float3x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
float4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, float, highp>		float4;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
float4x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, float, highp>		float4x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
float4x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, float, highp>		float4x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
float4x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, float, highp>		float4x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
float64	src/vendor/glm/fwd.hpp	/^	typedef double					float64;$/;"	t	namespace:glm	typeref:typename:double
float64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef double float64;$/;"	t	namespace:glm	typeref:typename:double
float64_t	src/vendor/glm/fwd.hpp	/^	typedef double					float64_t;$/;"	t	namespace:glm	typeref:typename:double
float64_t	src/vendor/glm/gtc/type_precision.hpp	/^		typedef float64 float64_t;$/;"	t	namespace:glm	typeref:typename:float64
float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:lowp_float64_t
float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm	typeref:typename:mediump_float64
floatBitsToInt	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER int floatBitsToInt(float const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
floatBitsToInt	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
floatBitsToUint	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER uint floatBitsToUint(float const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
floatBitsToUint	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
floatNormalize	src/vendor/glm/gtx/float_notmalize.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> floatNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
floatTo10bit	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo10bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
floatTo11bit	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo11bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
float_distance	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int float_distance(float x, float y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
float_distance	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int64 float_distance(double x, double y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
float_distance	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> float_distance(vec<L, float, Q> const& x, vec<L, float, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
float_distance	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int64, Q> float_distance(vec<L, double, Q> const& x, vec<L, double, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>
float_t	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = 0.0f) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = static_cast<float_type>(0)) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	src/vendor/glm/detail/type_float.hpp	/^	union float_t$/;"	u	namespace:glm::detail
float_t	src/vendor/glm/detail/type_float.hpp	/^	union float_t<double>$/;"	u	namespace:glm::detail
float_t	src/vendor/glm/detail/type_float.hpp	/^	union float_t<float>$/;"	u	namespace:glm::detail
float_type	src/vendor/glm/detail/type_float.hpp	/^		typedef double float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:double
float_type	src/vendor/glm/detail/type_float.hpp	/^		typedef float float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:float
floor	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floor(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fma	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType fma(genType const& a, genType const& b, genType const& c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmax	src/vendor/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmax(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	src/vendor/glm/gtx/extended_min_max.inl	/^		GLM_FUNC_QUALIFIER genType fmax(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmax	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	src/vendor/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmin(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	src/vendor/glm/gtx/extended_min_max.inl	/^		GLM_FUNC_QUALIFIER genType fmin(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmin	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER genType fmod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmod	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
font_size	src/vendor/imgui/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon715cafb90508	typeref:typename:float
fontdicts	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	src/vendor/imgui/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
format	src/vendor/glm/gtx/string_cast.inl	/^	GLM_FUNC_QUALIFIER std::string format(const char* msg, ...)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::string
format_punct	src/vendor/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io
format_punct	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(format_punct const& a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_punct	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(size_t a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_saver	src/vendor/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<char>
formatted	src/vendor/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	typeref:typename:bool
formatted	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& formatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
four_over_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType four_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
fquat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, defaultp>		fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
fract	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType fract(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fract	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fract(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
free_head	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
frexp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType frexp(genType x, int& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
frexp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
front	src/vendor/imgui/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	src/vendor/imgui/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
frustum	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustum(T left, T right, T bottom, T top, T nearVal, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumNO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumNO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumZO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
funcs	src/vendor/imgui/imgui_demo.cpp	/^    struct funcs$/;"	s	function:ShowExampleAppPropertyEditor	file:
functor1	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 1, R, T, Q>$/;"	s	namespace:glm::detail
functor1	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 2, R, T, Q>$/;"	s	namespace:glm::detail
functor1	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 3, R, T, Q>$/;"	s	namespace:glm::detail
functor1	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 4, R, T, Q>$/;"	s	namespace:glm::detail
functor1	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_sca	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	src/vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
fvec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, defaultp> fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
fvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
fvec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, defaultp> fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
fvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
fvec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, defaultp> fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
fvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
fvec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, defaultp> fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
fx	src/vendor/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10308	typeref:typename:T
g	src/vendor/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anonc7f4dad1060a	typeref:typename:T
g	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520308	typeref:typename:T
g	src/vendor/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc806f352060a	typeref:typename:T
g	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30308	typeref:typename:T
g	src/vendor/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc8190bd3060a	typeref:typename:T
g_AttribLocationProjMtx	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;                       /;"	v	typeref:typename:int	file:
g_AttribLocationTex	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;                       /;"	v	typeref:typename:int	file:
g_AttribLocationVtxColor	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_AttribLocationVtxPos	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_AttribLocationVtxUV	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_ClientApi	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GlfwClientApi        g_ClientApi = GlfwClientApi_Unknown;$/;"	v	typeref:typename:GlfwClientApi	file:
g_ElementsHandle	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	typeref:typename:unsigned int	file:
g_FontTexture	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	typeref:typename:GLuint	file:
g_FragHandle	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_GlslVersionString	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static char         g_GlslVersionString[32] = "";$/;"	v	typeref:typename:char[32]	file:
g_MouseCursors	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWcursor*          g_MouseCursors[ImGuiMouseCursor_COUNT] = { 0 };$/;"	v	typeref:typename:GLFWcursor * []	file:
g_MouseJustPressed	src/vendor/imgui/imgui_impl_glfw.cpp	/^static bool                 g_MouseJustPressed[5] = { false, false, false, false, false };$/;"	v	typeref:typename:bool[5]	file:
g_PrevUserCallbackChar	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWcharfun          g_PrevUserCallbackChar = NULL;$/;"	v	typeref:typename:GLFWcharfun	file:
g_PrevUserCallbackKey	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWkeyfun           g_PrevUserCallbackKey = NULL;$/;"	v	typeref:typename:GLFWkeyfun	file:
g_PrevUserCallbackMousebutton	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWmousebuttonfun   g_PrevUserCallbackMousebutton = NULL;$/;"	v	typeref:typename:GLFWmousebuttonfun	file:
g_PrevUserCallbackScroll	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWscrollfun        g_PrevUserCallbackScroll = NULL;$/;"	v	typeref:typename:GLFWscrollfun	file:
g_ShaderHandle	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_Time	src/vendor/imgui/imgui_impl_glfw.cpp	/^static double               g_Time = 0.0;$/;"	v	typeref:typename:double	file:
g_VboHandle	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	typeref:typename:unsigned int	file:
g_VertHandle	src/vendor/imgui/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_Window	src/vendor/imgui/imgui_impl_glfw.cpp	/^static GLFWwindow*          g_Window = NULL;    \/\/ Main window$/;"	v	typeref:typename:GLFWwindow *	file:
gauss	src/vendor/glm/gtx/functions.inl	/^	GLM_FUNC_QUALIFIER T gauss$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
gaussRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType gaussRand(genType Mean, genType Deviation)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
gaussRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> gaussRand(vec<L, T, Q> const& Mean, vec<L, T, Q> const& Deviati/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
genTypeEnum	src/vendor/glm/detail/qualifier.hpp	/^	enum genTypeEnum$/;"	g	namespace:glm::detail
genTypeTrait	src/vendor/glm/detail/qualifier.hpp	/^	struct genTypeTrait$/;"	s	namespace:glm::detail
geometryMap	src/Mesh/MeshStore.h	/^		std::unordered_map<std::string, Mesh> geometryMap;$/;"	m	class:MeshStore	typeref:typename:std::unordered_map<std::string,Mesh>
geometryMapIterator	src/Mesh/MeshStore.h	/^		std::unordered_map<std::string, Mesh>::const_iterator geometryMapIterator;$/;"	m	class:MeshStore	typeref:typename:std::unordered_map<std::string,Mesh>::const_iterator
get_facet	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER FTy const& get_facet(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER FTy const &
glm	src/vendor/glm/common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/compute_common.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/compute_vector_relational.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/func_common.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/func_common.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_exponential.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_exponential_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_geometric.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_geometric_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_integer.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_integer_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_matrix.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_matrix_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_packing.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/func_packing_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/func_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/func_vector_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/func_vector_relational_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/qualifier.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	src/vendor/glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/setup.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/detail/type_half.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat2x2.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat2x3.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat2x4.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat3x2.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat3x3.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat3x4.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat4x2.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat4x3.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_mat4x4.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_mat4x4_simd.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_quat.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_quat.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/type_quat_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_vec1.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_vec2.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_vec3.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/detail/type_vec4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/detail/type_vec4.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/detail/type_vec4_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/exponential.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_clip_space.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_clip_space.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/matrix_common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_common.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/matrix_double2x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double2x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double2x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double2x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double2x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double3x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float2x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float3x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_projection.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_projection.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/matrix_relational.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/matrix_transform.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/matrix_transform.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_common.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_double.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_double_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_exponential.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_exponential.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_float.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_float_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_geometric.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_geometric.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_relational.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_transform.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_transform.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/quaternion_trigonometric.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/quaternion_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/scalar_common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/scalar_common.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/scalar_constants.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/scalar_constants.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/scalar_int_sized.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/ext/scalar_relational.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/scalar_uint_sized.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/ext/scalar_ulp.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/scalar_ulp.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/scalar_ulp.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/ext/vector_bool1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool1_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_bool4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_common.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/vector_double1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double1_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_double4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float1_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_float4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int1_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_int4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_relational.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/ext/vector_uint1.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint1_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint2_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint3.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint3_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint4.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_uint4_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_ulp.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/ext/vector_ulp.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/fwd.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/geometric.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/bitfield.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/color_space.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/constants.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/epsilon.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/integer.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/matrix_access.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/matrix_inverse.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/noise.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/packing.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/quaternion.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/random.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/reciprocal.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/round.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtc/type_aligned.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/type_precision.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtc/type_ptr.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/associated_min_max.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/bit.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/closest_point.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/color_encoding.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/color_encoding.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/color_space.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/color_space_YCoCg.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/common.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/compatibility.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/component_wise.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/dual_quaternion.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/easing.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/gtx/easing.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/euler_angles.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/extend.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/extended_min_max.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/extended_min_max.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/exterior_product.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/exterior_product.inl	/^namespace glm {$/;"	n	file:
glm	src/vendor/glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/fast_exponential.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/fast_square_root.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/fast_trigonometry.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/float_notmalize.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/functions.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/functions.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/gradient_paint.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/handed_coordinate_space.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/hash.inl	/^namespace glm {$/;"	n	file:
glm	src/vendor/glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/integer.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/intersect.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/io.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/log_base.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_cross_product.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_decompose.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_factorisation.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_factorisation.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_interpolation.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_major_storage.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_operation.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_query.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/matrix_transform_2d.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/mixed_product.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/norm.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/normal.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/normalize_dot.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/gtx/number_precision.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	src/vendor/glm/gtx/optimum_pow.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/orthonormalize.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/perpendicular.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/polar_coordinates.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/projection.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/quaternion.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/range.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/rotate_normalized_axis.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/rotate_vector.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/spline.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/std_based_type.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/string_cast.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/texture.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/texture.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/transform.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/transform2.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/type_aligned.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/type_trait.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/type_trait.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/vec_swizzle.hpp	/^namespace glm {$/;"	n
glm	src/vendor/glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/vector_angle.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/vector_query.inl	/^namespace glm{$/;"	n	file:
glm	src/vendor/glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/gtx/wrap.inl	/^namespace glm$/;"	n	file:
glm	src/vendor/glm/integer.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/matrix.hpp	/^namespace glm {$/;"	n
glm	src/vendor/glm/packing.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/trigonometric.hpp	/^namespace glm$/;"	n
glm	src/vendor/glm/vector_relational.hpp	/^namespace glm$/;"	n
glm_dvec2	src/vendor/glm/simd/platform.h	/^	typedef glm_f64vec2		glm_dvec2;$/;"	t	typeref:typename:glm_f64vec2
glm_dvec4	src/vendor/glm/simd/platform.h	/^	typedef glm_f64vec4		glm_dvec4;$/;"	t	typeref:typename:glm_f64vec4
glm_f32vec4	src/vendor/glm/simd/platform.h	/^	typedef __m128			glm_f32vec4;$/;"	t	typeref:typename:__m128
glm_f64vec2	src/vendor/glm/simd/platform.h	/^	typedef __m128d			glm_f64vec2;$/;"	t	typeref:typename:__m128d
glm_f64vec4	src/vendor/glm/simd/platform.h	/^	typedef __m256d			glm_f64vec4;$/;"	t	typeref:typename:__m256d
glm_i128_interleave	src/vendor/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave(glm_uvec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i128_interleave2	src/vendor/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave2(glm_uvec4 x, glm_uvec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i32vec4	src/vendor/glm/simd/platform.h	/^	typedef __m128i			glm_i32vec4;$/;"	t	typeref:typename:__m128i
glm_i64vec2	src/vendor/glm/simd/platform.h	/^	typedef __m128i			glm_i64vec2;$/;"	t	typeref:typename:__m128i
glm_i64vec4	src/vendor/glm/simd/platform.h	/^	typedef __m256i			glm_i64vec4;$/;"	t	typeref:typename:__m256i
glm_ivec4	src/vendor/glm/simd/platform.h	/^	typedef glm_i32vec4		glm_ivec4;$/;"	t	typeref:typename:glm_i32vec4
glm_ivec4_abs	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_ivec4 glm_ivec4_abs(glm_ivec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_ivec4
glm_mat4_add	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_add(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_determinant	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_highp	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_highp(glm_vec4 const in[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_lowp	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_lowp(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_inverse	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_inverse_lowp	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse_lowp(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_matrixCompMult	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_matrixCompMult(glm_vec4 const in1[4], glm_vec4 const in2[4], gl/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_mul(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul_vec4	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_mul_vec4(glm_vec4 const m[4], glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_outerProduct	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_outerProduct(__m128 const& c, __m128 const& r, __m128 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_sub	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_sub(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_transpose	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_transpose(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_shared	src/vendor/glm/CMakeLists.txt	/^add_library(glm_shared SHARED ${ROOT_TEXT} ${ROOT_MD} ${ROOT_NAT}$/;"	t
glm_static	src/vendor/glm/CMakeLists.txt	/^add_library(glm_static STATIC ${ROOT_TEXT} ${ROOT_MD} ${ROOT_NAT}$/;"	t
glm_u32vec4	src/vendor/glm/simd/platform.h	/^	typedef __m128i			glm_u32vec4;$/;"	t	typeref:typename:__m128i
glm_u64vec2	src/vendor/glm/simd/platform.h	/^	typedef __m128i			glm_u64vec2;$/;"	t	typeref:typename:__m128i
glm_u64vec4	src/vendor/glm/simd/platform.h	/^	typedef __m256i			glm_u64vec4;$/;"	t	typeref:typename:__m256i
glm_uvec4	src/vendor/glm/simd/platform.h	/^	typedef glm_u32vec4		glm_uvec4;$/;"	t	typeref:typename:glm_u32vec4
glm_vec1_add	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_div	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_dot	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec1_fma	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_mul	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sqrt_lowp	src/vendor/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sub	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4	src/vendor/glm/simd/platform.h	/^	typedef glm_f32vec4		glm_vec4;$/;"	t	typeref:typename:glm_f32vec4
glm_vec4_abs	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_abs(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_add	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_ceil	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_ceil(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_clamp	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_clamp(glm_vec4 v, glm_vec4 minVal, glm_vec4 maxVal)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_cross	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_cross(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_distance	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_distance(glm_vec4 p0, glm_vec4 p1)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_div	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_div_lowp	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div_lowp(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_dot	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_faceforward	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_faceforward(glm_vec4 N, glm_vec4 I, glm_vec4 Nref)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_floor	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_floor(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_fma	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_fract	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_fract(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_inf	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_inf(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_length	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_length(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mix	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mix(glm_vec4 v1, glm_vec4 v2, glm_vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mod	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mod(glm_vec4 x, glm_vec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mul	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_mul_mat4	src/vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_mul_mat4(glm_vec4 v, glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_nan	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_nan(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_normalize	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_normalize(glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_reflect	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_reflect(glm_vec4 I, glm_vec4 N)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_refract	src/vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_refract(glm_vec4 I, glm_vec4 N, glm_vec4 eta)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_round	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_round(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_roundEven	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_roundEven(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sign	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sign(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_smoothstep	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_smoothstep(glm_vec4 edge0, glm_vec4 edge1, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sqrt_lowp	src/vendor/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_step	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_step(glm_vec4 edge, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sub	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_swizzle_xyzw	src/vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_swizzle_xyzw(glm_f32vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glyf	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
golden_ratio	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType golden_ratio()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
gpos	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
grad4	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> grad4(T const& j, vec<4, T, Q> const& ip)$/;"	f	namespace:glm::gtc	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
greaterThan	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThan	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> greaterThan(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
greaterThan	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
greaterThanEqual	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThanEqual	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> greaterThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
greaterThanEqual	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
gsubrs	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
gtc	src/vendor/glm/gtc/noise.inl	/^namespace gtc$/;"	n	namespace:glm	file:
gtx	src/vendor/glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	src/vendor/glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
h	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	src/vendor/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	src/vendor/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon715cafb90808	typeref:typename:int
h	src/vendor/stb_image/stb_image.h	/^      int h,v;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
h	src/vendor/stb_image/stb_image.h	/^   int w,h;$/;"	m	struct:__anona39c15741308	typeref:typename:int
h2	src/vendor/stb_image/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
h_oversample	src/vendor/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon715cafb90508	typeref:typename:unsigned char
h_oversample	src/vendor/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
ha	src/vendor/stb_image/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
half2float	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint half2float(glm::uint h)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
half_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
has_preferred_x	src/vendor/imgui/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
hash_combine	src/vendor/glm/gtx/hash.inl	/^	GLM_INLINE void hash_combine(size_t &seed, size_t hash)$/;"	f	namespace:glm::detail	typeref:typename:GLM_INLINE void
hd	src/vendor/stb_image/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
hdata	src/vendor/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail	typeref:typename:short
head	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	src/vendor/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	src/Texture.h	/^	int				height;$/;"	m	class:Texture	typeref:typename:int
height	src/vendor/imgui/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	src/vendor/imgui/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anona9fd05c20508	typeref:typename:float
height	src/vendor/imgui/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	src/vendor/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon715cafb91108	typeref:typename:int
help	Makefile	/^help:$/;"	t
hermite	src/vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType hermite$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
heuristic	src/vendor/imgui/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
highestBitValue	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType highestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
highestBitValue	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> highestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
highp	src/vendor/glm/detail/qualifier.hpp	/^		highp = packed_highp, \/\/\/< By default highp qualifier is also packed$/;"	e	enum:glm::qualifier
highp_bvec1	src/vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, highp>			highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, bool, highp>		highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec2	src/vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec3	src/vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec4	src/vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_bvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,highp>
highp_dmat2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_dmat2x2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x3	src/vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x4	src/vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_dmat3x2	src/vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x4	src/vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_dmat4x2	src/vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x3	src/vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dquat	src/vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, highp>		highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dquat	src/vendor/glm/fwd.hpp	/^	typedef qua<double, highp>			highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_dvec1	src/vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, highp>		highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,highp>
highp_dvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_dvec2	src/vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, highp>		highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
highp_dvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_dvec3	src/vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, highp>		highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
highp_dvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_dvec4	src/vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, highp>		highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
highp_dvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f32	src/vendor/glm/fwd.hpp	/^	typedef float					highp_f32;$/;"	t	namespace:glm	typeref:typename:float
highp_f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm	typeref:typename:float32
highp_f32mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
highp_f32mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
highp_f32mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
highp_f32mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f32, highp>				highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, highp> highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f32, highp>			highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, highp> highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f32, highp>			highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, highp> highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f32, highp>			highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, highp> highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f32, highp>			highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, highp> highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f64	src/vendor/glm/fwd.hpp	/^	typedef double					highp_f64;$/;"	t	namespace:glm	typeref:typename:double
highp_f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm	typeref:typename:float64
highp_f64mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x2
highp_f64mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, highp>		highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, highp>		highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x3
highp_f64mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, highp>		highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, highp>		highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x4
highp_f64mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, highp>		highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, highp>		highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f64, highp>				highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, highp> highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, highp> highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, highp> highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, highp> highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, highp> highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_float32	src/vendor/glm/fwd.hpp	/^	typedef float					highp_float32;$/;"	t	namespace:glm	typeref:typename:float
highp_float32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32;$/;"	t	namespace:glm	typeref:typename:float32
highp_float32_t	src/vendor/glm/fwd.hpp	/^	typedef float					highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
highp_float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
highp_float64	src/vendor/glm/fwd.hpp	/^	typedef double					highp_float64;$/;"	t	namespace:glm	typeref:typename:double
highp_float64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64;$/;"	t	namespace:glm	typeref:typename:float64
highp_float64_t	src/vendor/glm/fwd.hpp	/^	typedef double					highp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
highp_float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
highp_fmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm	typeref:typename:highp_fmat2x2
highp_fmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm	typeref:typename:highp_fmat3x3
highp_fmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm	typeref:typename:highp_fmat4x4
highp_fmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fquat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_fvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, highp> highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, highp> highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, highp> highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_fvec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, highp> highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_i16	src/vendor/glm/fwd.hpp	/^	typedef int16					highp_i16;$/;"	t	namespace:glm	typeref:typename:int16
highp_i16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_i16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i32	src/vendor/glm/fwd.hpp	/^	typedef int32					highp_i32;$/;"	t	namespace:glm	typeref:typename:int32
highp_i32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_i32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i64	src/vendor/glm/fwd.hpp	/^	typedef int64					highp_i64;$/;"	t	namespace:glm	typeref:typename:int64
highp_i64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_i64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i8	src/vendor/glm/fwd.hpp	/^	typedef int8					highp_i8;$/;"	t	namespace:glm	typeref:typename:int8
highp_i8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_i8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i8, highp>		highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, highp> highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i8, highp>		highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, highp> highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i8, highp>		highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, highp> highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i8, highp>		highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_i8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, highp> highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, highp>				highp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
highp_imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, highp>				highp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
highp_imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, highp>				highp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
highp_imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, highp>				highp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
highp_imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, highp>				highp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
highp_imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, highp>				highp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
highp_imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_int16	src/vendor/glm/fwd.hpp	/^	typedef int16					highp_int16;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16_t	src/vendor/glm/fwd.hpp	/^	typedef int16					highp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int32	src/vendor/glm/fwd.hpp	/^	typedef int32					highp_int32;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32_t	src/vendor/glm/fwd.hpp	/^	typedef int32					highp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int64	src/vendor/glm/fwd.hpp	/^	typedef int64					highp_int64;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64_t	src/vendor/glm/fwd.hpp	/^	typedef int64					highp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int8	src/vendor/glm/fwd.hpp	/^	typedef int8					highp_int8;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8_t	src/vendor/glm/fwd.hpp	/^	typedef int8					highp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_ivec1	src/vendor/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, highp>			highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,highp>
highp_ivec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_ivec2	src/vendor/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
highp_ivec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_ivec3	src/vendor/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
highp_ivec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_ivec4	src/vendor/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
highp_ivec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_mat2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x3	src/vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
highp_mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_mat2x4	src/vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
highp_mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_mat3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x2	src/vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
highp_mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_mat3x3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x4	src/vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
highp_mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_mat4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_mat4x2	src/vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
highp_mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_mat4x3	src/vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
highp_mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_mat4x4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_quat	src/vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, highp>		highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_quat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_u16	src/vendor/glm/fwd.hpp	/^	typedef uint16					highp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_u16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_u16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u32	src/vendor/glm/fwd.hpp	/^	typedef uint32					highp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_u32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_u32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u64	src/vendor/glm/fwd.hpp	/^	typedef uint64					highp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_u64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_u64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u8	src/vendor/glm/fwd.hpp	/^	typedef uint8					highp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_u8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_u8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u8, highp>		highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, highp> highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u8, highp>		highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, highp> highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u8, highp>		highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, highp> highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u8, highp>		highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_u8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, highp> highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_uint16	src/vendor/glm/fwd.hpp	/^	typedef uint16					highp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16_t	src/vendor/glm/fwd.hpp	/^	typedef uint16					highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint32	src/vendor/glm/fwd.hpp	/^	typedef uint32					highp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32_t	src/vendor/glm/fwd.hpp	/^	typedef uint32					highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint64	src/vendor/glm/fwd.hpp	/^	typedef uint64					highp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64_t	src/vendor/glm/fwd.hpp	/^	typedef uint64					highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint8	src/vendor/glm/fwd.hpp	/^	typedef uint8					highp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8_t	src/vendor/glm/fwd.hpp	/^	typedef uint8					highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, highp>				highp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,highp>
highp_umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, highp>				highp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,highp>
highp_umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, highp>				highp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,highp>
highp_umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, highp>				highp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,highp>
highp_umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, highp>				highp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,highp>
highp_umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, highp>				highp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,highp>
highp_umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_uvec1	src/vendor/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, highp>			highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,highp>
highp_uvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_uvec2	src/vendor/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,highp>
highp_uvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_uvec3	src/vendor/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,highp>
highp_uvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_uvec4	src/vendor/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,highp>
highp_uvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_vec1	src/vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec2	src/vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec3	src/vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec4	src/vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
history	src/vendor/stb_image/stb_image.h	/^   stbi_uc *history; $/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc *
hmtx	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hs	src/vendor/stb_image/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anona39c15740a08	typeref:typename:int
hsvColor	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> hsvColor(const vec<3, T, Q>& rgbColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
hsz	src/vendor/stb_image/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anona39c15741008	typeref:typename:int
huff_ac	src/vendor/stb_image/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__huffman[4]
huff_dc	src/vendor/stb_image/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__huffman[4]
i	src/vendor/glm/detail/type_float.hpp	/^		int_type i;$/;"	m	union:glm::detail::float_t	typeref:typename:int_type
i	src/vendor/glm/detail/type_half.inl	/^		unsigned int i;$/;"	m	union:glm::detail::uif32	typeref:typename:unsigned int	file:
i	src/vendor/glm/gtc/bitfield.inl	/^			int16 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int16	file:
i	src/vendor/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int32	file:
i	src/vendor/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:int32	file:
i	src/vendor/glm/gtc/bitfield.inl	/^			int64 i;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:int64	file:
i	src/vendor/glm/gtc/bitfield.inl	/^			int8 i;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:int8	file:
i10i10i10i2	src/vendor/glm/gtc/packing.inl	/^	union i10i10i10i2$/;"	u	namespace:glm::detail	file:
i16	src/vendor/glm/fwd.hpp	/^	typedef int16					i16;$/;"	t	namespace:glm	typeref:typename:int16
i16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
i16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i16, defaultp>	i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,defaultp>
i16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, defaultp> i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,defaultp>
i16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i16, defaultp>	i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,defaultp>
i16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, defaultp> i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,defaultp>
i16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i16, defaultp>	i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,defaultp>
i16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, defaultp> i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,defaultp>
i16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i16, defaultp>	i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,defaultp>
i16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, defaultp> i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,defaultp>
i32	src/vendor/glm/fwd.hpp	/^	typedef int32					i32;$/;"	t	namespace:glm	typeref:typename:int32
i32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
i32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, defaultp>	i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
i32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, defaultp> i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
i32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, defaultp>	i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
i32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, defaultp> i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
i32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, defaultp>	i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
i32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, defaultp> i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
i32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, defaultp>	i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
i32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, defaultp> i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
i64	src/vendor/glm/fwd.hpp	/^	typedef int64					i64;$/;"	t	namespace:glm	typeref:typename:int64
i64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
i64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i64, defaultp>	i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,defaultp>
i64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, defaultp> i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,defaultp>
i64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i64, defaultp>	i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,defaultp>
i64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, defaultp> i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,defaultp>
i64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i64, defaultp>	i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,defaultp>
i64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, defaultp> i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,defaultp>
i64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i64, defaultp>	i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,defaultp>
i64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, defaultp> i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,defaultp>
i8	src/vendor/glm/fwd.hpp	/^	typedef int8					i8;$/;"	t	namespace:glm	typeref:typename:int8
i8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
i8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i8, defaultp>	i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,defaultp>
i8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, defaultp> i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,defaultp>
i8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i8, defaultp>	i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,defaultp>
i8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, defaultp> i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,defaultp>
i8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i8, defaultp>	i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,defaultp>
i8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, defaultp> i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,defaultp>
i8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i8, defaultp>	i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,defaultp>
i8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, defaultp> i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,defaultp>
id	src/vendor/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	typeref:typename:std::locale::id
id	src/vendor/glm/gtx/io.inl	/^	template<typename CTy> std::locale::id format_punct<CTy>::id;$/;"	m	class:glm::io::format_punct<CTy>	typeref:typename:std::locale::id
id	src/vendor/imgui/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	src/vendor/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	src/vendor/stb_image/stb_image.h	/^      int id;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
idata	src/vendor/stb_image/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anona39c15740e08	typeref:typename:stbi_uc *
idct_block_kernel	src/vendor/stb_image/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anona39c15740808	typeref:typename:void (*)(stbi_uc * out,int out_stride,short data[64])
identity	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ieee_double_shape_type	src/vendor/glm/ext/scalar_ulp.inl	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anon3c23ed7f020a	file:
ieee_float_shape_type	src/vendor/glm/ext/scalar_ulp.inl	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anon3c23ed7f010a	file:
imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:highp_imat2
imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2
imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2
imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:highp_imat2x2
imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x2
imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x2
imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:highp_imat2x3
imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x3
imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x3
imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:highp_imat2x4
imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x4
imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x4
imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:highp_imat3
imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3
imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3
imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:highp_imat3x2
imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x2
imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x2
imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:highp_imat3x3
imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x3
imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x3
imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:highp_imat3x4
imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x4
imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x4
imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:highp_imat4
imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4
imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4
imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:highp_imat4x2
imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x2
imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x2
imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:highp_imat4x3
imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x3
imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x3
imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:highp_imat4x4
imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x4
imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x4
img_buffer	src/vendor/stb_image/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_uc *
img_buffer_end	src/vendor/stb_image/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_uc **
img_buffer_original	src/vendor/stb_image/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_uc *
img_buffer_original_end	src/vendor/stb_image/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_uc **
img_comp	src/vendor/stb_image/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anona39c15740808	typeref:struct:__anona39c15740808::__anona39c15740908[4]
img_h_max	src/vendor/stb_image/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_mcu_h	src/vendor/stb_image/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_mcu_w	src/vendor/stb_image/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_mcu_x	src/vendor/stb_image/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_mcu_y	src/vendor/stb_image/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_n	src/vendor/stb_image/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anona39c15740308	typeref:typename:int
img_out_n	src/vendor/stb_image/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anona39c15740308	typeref:typename:int
img_v_max	src/vendor/stb_image/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anona39c15740808	typeref:typename:int
img_x	src/vendor/stb_image/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi__uint32
img_y	src/vendor/stb_image/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi__uint32
imulExtended	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(int x, int y, int& msb, int& lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
imulExtended	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(vec<L, int, Q> const& x, vec<L, int, Q> const& y, vec<L, i/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
in	src/vendor/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToInt::__anon8d42b7cf010a	typeref:typename:float	file:
in	src/vendor/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToUint::__anon8d42b7cf020a	typeref:typename:float	file:
in	src/vendor/glm/detail/func_common.inl	/^			int in;$/;"	m	union:glm::intBitsToFloat::__anon8d42b7cf030a	typeref:typename:int	file:
in	src/vendor/glm/detail/func_common.inl	/^			uint in;$/;"	m	union:glm::uintBitsToFloat::__anon8d42b7cf040a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			double in;$/;"	m	union:glm::unpackDouble2x32::__anon93647ba30a0a	typeref:typename:double	file:
in	src/vendor/glm/detail/func_packing.inl	/^			signed char in[4];$/;"	m	union:glm::packSnorm4x8::__anon93647ba3070a	typeref:typename:signed char[4]	file:
in	src/vendor/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packHalf2x16::__anon93647ba30b0a	typeref:typename:signed short[2]	file:
in	src/vendor/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packSnorm2x16::__anon93647ba3030a	typeref:typename:signed short[2]	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint   in[2];$/;"	m	union:glm::packDouble2x32::__anon93647ba3090a	typeref:typename:uint[2]	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackHalf2x16::__anon93647ba30c0a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm2x16::__anon93647ba3040a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm4x8::__anon93647ba3080a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm2x16::__anon93647ba3020a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm4x8::__anon93647ba3060a	typeref:typename:uint	file:
in	src/vendor/glm/detail/func_packing.inl	/^			unsigned char in[4];$/;"	m	union:glm::packUnorm4x8::__anon93647ba3050a	typeref:typename:unsigned char[4]	file:
in	src/vendor/glm/detail/func_packing.inl	/^			unsigned short in[2];$/;"	m	union:glm::packUnorm2x16::__anon93647ba3010a	typeref:typename:unsigned short[2]	file:
indexBuffer	src/Mesh/Mesh.h	/^		std::vector<int>* indexBuffer;$/;"	m	class:Mesh	typeref:typename:std::vector<int> *
indexToLocFormat	src/vendor/imgui/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	src/vendor/imgui/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:int
index_map	src/vendor/imgui/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
infinitePerspective	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveLH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveLH(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveRH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveRH(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
info_arch	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_language_dialect_default	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
init_mode	src/vendor/imgui/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	src/vendor/imgui/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
insert	src/vendor/imgui/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert_length	src/vendor/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anona9fd05c20108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
insert_mode	src/vendor/imgui/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
int1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compati/;"	t	namespace:glm	typeref:typename:int
int16	src/vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int16_t		int16;$/;"	t	namespace:glm::detail	typeref:typename:std::int16_t
int16	src/vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int16		int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16	src/vendor/glm/fwd.hpp	/^	typedef std::int16_t			int16;$/;"	t	namespace:glm	typeref:typename:std::int16_t
int16_t	src/vendor/glm/fwd.hpp	/^	typedef int16					int16_t;$/;"	t	namespace:glm	typeref:typename:int16
int16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
int1x1	src/vendor/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compa/;"	t	namespace:glm	typeref:typename:int
int2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
int2x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
int2x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
int2x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
int3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
int32	src/vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int32_t		int32;$/;"	t	namespace:glm::detail	typeref:typename:std::int32_t
int32	src/vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int32		int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32	src/vendor/glm/fwd.hpp	/^	typedef std::int32_t			int32;$/;"	t	namespace:glm	typeref:typename:std::int32_t
int32_t	src/vendor/glm/fwd.hpp	/^	typedef int32					int32_t;$/;"	t	namespace:glm	typeref:typename:int32
int32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
int3x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
int3x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
int3x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
int4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
int4x2	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
int4x3	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
int4x4	src/vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
int64	src/vendor/glm/detail/setup.hpp	/^		typedef std::int64_t						int64;$/;"	t	namespace:glm::detail	typeref:typename:std::int64_t
int64	src/vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int64		int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64	src/vendor/glm/fwd.hpp	/^	typedef std::int64_t			int64;$/;"	t	namespace:glm	typeref:typename:std::int64_t
int64_t	src/vendor/glm/fwd.hpp	/^	typedef int64					int64_t;$/;"	t	namespace:glm	typeref:typename:int64
int64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
int8	src/vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int8_t			int8;$/;"	t	namespace:glm::detail	typeref:typename:std::int8_t
int8	src/vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int8		int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8	src/vendor/glm/fwd.hpp	/^	typedef std::int8_t				int8;$/;"	t	namespace:glm	typeref:typename:std::int8_t
int8_t	src/vendor/glm/fwd.hpp	/^	typedef int8					int8_t;$/;"	t	namespace:glm	typeref:typename:int8
int8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
intBitsToFloat	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float intBitsToFloat(int const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
intBitsToFloat	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
int_type	src/vendor/glm/detail/type_float.hpp	/^		typedef detail::int64 int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:detail::int64
int_type	src/vendor/glm/detail/type_float.hpp	/^		typedef int int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:int
intermediate	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> intermediate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
interpolate	src/vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> interpolate(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
intersectLineSphere	src/vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineSphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectLineTriangle	src/vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayPlane	src/vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayPlane$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRaySphere	src/vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRaySphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayTriangle	src/vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
inverse	src/vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> inverse(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
inverse	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> inverse(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
inverse	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> inverse(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
inverseTranspose	src/vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> inverseTranspose(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
inverseTranspose	src/vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> inverseTranspose(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
inverseTranspose	src/vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> inverseTranspose(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
inversesqrt	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType inversesqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
inversesqrt	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> inversesqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
invert	src/vendor/imgui/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
io	src/vendor/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
io	src/vendor/glm/gtx/io.inl	/^namespace io$/;"	n	namespace:glm	file:
io	src/vendor/stb_image/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anona39c15740308	typeref:typename:stbi_io_callbacks
io_user_data	src/vendor/stb_image/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anona39c15740308	typeref:typename:void *
iround	src/vendor/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER int iround(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
iround	src/vendor/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> iround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isCompNull(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isCompNull(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isCompNull(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isCompNull	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isCompNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isIdentity	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isIdentity(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER bool isMultiple(genType Value, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isNormalized	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	src/vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isOrthogonal	src/vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isOrthogonal(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER bool isPowerOfTwo(genType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isPowerOfTwo(vec<L, T, Q> const& Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
is_aligned	src/vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_highp>$/;"	s	namespace:glm::detail
is_aligned	src/vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_lowp>$/;"	s	namespace:glm::detail
is_aligned	src/vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_mediump>$/;"	s	namespace:glm::detail
is_aligned	src/vendor/glm/detail/qualifier.hpp	/^	struct is_aligned$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/detail/setup.hpp	/^	struct is_int$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/detail/setup.hpp	/^	struct is_int<signed int>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/detail/setup.hpp	/^	struct is_int<unsigned int>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int16>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int64>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int8>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint16>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint64>$/;"	s	namespace:glm::detail
is_int	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint8>$/;"	s	namespace:glm::detail
is_mat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_mat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	v	namespace:glm	typeref:struct:type bool const
is_mat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_mat = true;$/;"	v	typeref:struct:type bool const
is_mat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_mat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_mat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_mat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_mat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_mat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_mat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_mat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_mat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_mat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	v	namespace:glm	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	v	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_quat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_quat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_quat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_quat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_quat	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_quat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_separator	src/vendor/imgui/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharI/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_vec	src/vendor/glm/gtx/type_trait.hpp	/^		static bool const is_vec = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_vec	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_vec;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_vec	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_vec;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_vec	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_vec;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_vec	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_vec;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_vec	src/vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_vec;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_word_boundary	src/vendor/imgui/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	src/vendor/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	src/vendor/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
isdenormal	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER bool isdenormal(T const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isdenormal	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<1, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<1,T,Q>::bool_type
isdenormal	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<2, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<2,T,Q>::bool_type
isdenormal	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<3, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<3,T,Q>::bool_type
isdenormal	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<4, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<4,T,Q>::bool_type
isfinite	src/vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER bool isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isfinite	src/vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<1, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,bool,Q>
isfinite	src/vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isfinite	src/vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isfinite	src/vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isinf	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isinf(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isinf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isinf(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isinf	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isinf(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isnan	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isnan(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isnan	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isnan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isnan	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isnan(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
iterator	src/vendor/imgui/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
ivec1	src/vendor/glm/ext/vector_int1.hpp	/^	typedef vec<1, int, defaultp>			ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,defaultp>
ivec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, defaultp>	ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
ivec2	src/vendor/glm/ext/vector_int2.hpp	/^	typedef vec<2, int, defaultp>		ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,defaultp>
ivec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, defaultp>	ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
ivec3	src/vendor/glm/ext/vector_int3.hpp	/^	typedef vec<3, int, defaultp>		ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,defaultp>
ivec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, defaultp>	ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
ivec4	src/vendor/glm/ext/vector_int4.hpp	/^	typedef vec<4, int, defaultp>		ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,defaultp>
ivec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, defaultp>	ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
jfif	src/vendor/stb_image/stb_image.h	/^   int            jfif;$/;"	m	struct:__anona39c15740808	typeref:typename:int
kern	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	src/vendor/imgui/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
l1Norm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l1Norm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ldexp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType ldexp(genType const& x, int const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ldexp	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
leftHanded	src/vendor/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool leftHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
length	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType length(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length	src/vendor/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_quat.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::qua	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 1;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 3;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	src/vendor/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::tdualquat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	src/vendor/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anona9fd05c20508	typeref:typename:int
length	src/vendor/stb_image/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anona39c15740d08	typeref:typename:stbi__uint32
length2	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T length2(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length2	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER genType length2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length2	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T length2(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length_t	src/vendor/glm/detail/setup.hpp	/^		typedef int length_t;$/;"	t	namespace:glm	typeref:typename:int
length_t	src/vendor/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm	typeref:typename:size_t
length_type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_quat.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::qua	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_vec1.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_vec2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_vec3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	src/vendor/glm/detail/type_vec4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	src/vendor/glm/gtx/dual_quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tdualquat	typeref:typename:length_t
lerp	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> lerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
lerp	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> lerp(const vec<2, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
lerp	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> lerp(const vec<3, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
lerp	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> lerp(const vec<4, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
lerp	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}												/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lerp	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> lerp(tdualquat<T, Q> const& x, tdualquat<T, Q> const& y, T c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
lessThan	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThan	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> lessThan(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
lessThan	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
lessThanEqual	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThanEqual	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> lessThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
lessThanEqual	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
levels	src/vendor/glm/gtx/texture.inl	/^	inline T levels(T Extent)$/;"	f	namespace:glm	typeref:typename:T
levels	src/vendor/glm/gtx/texture.inl	/^	inline T levels(vec<L, T, Q> const& Extent)$/;"	f	namespace:glm	typeref:typename:T
lflags	src/vendor/stb_image/stb_image.h	/^   int lflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
line0	src/vendor/stb_image/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anona39c15740a08	typeref:typename:stbi_uc *
line1	src/vendor/stb_image/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anona39c15740a08	typeref:typename:stbi_uc **
line_size	src/vendor/stb_image/stb_image.h	/^   int line_size;$/;"	m	struct:__anona39c15741308	typeref:typename:int
linearGradient	src/vendor/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T linearGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
linearInterpolation	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType linearInterpolation(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType linearRand(genType Min, genType Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> linearRand(vec<L, T, Q> const& Min, vec<L, T, Q> const& Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
linebuf	src/vendor/stb_image/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:stbi_uc *
literal	src/vendor/glm/gtx/string_cast.inl	/^	struct literal$/;"	s	namespace:glm::detail	file:
literal	src/vendor/glm/gtx/string_cast.inl	/^	struct literal<T, true>$/;"	s	namespace:glm::detail	file:
literal	src/vendor/glm/gtx/string_cast.inl	/^	struct literal<int64_t, false>$/;"	s	namespace:glm::detail	file:
literal	src/vendor/glm/gtx/string_cast.inl	/^	struct literal<uint64_t, false>$/;"	s	namespace:glm::detail	file:
ln_ln_two	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_ten	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ten()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_two	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
load_jpeg_image	src/vendor/stb_image/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
loca	src/vendor/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
localBuffer	src/Texture.h	/^	unsigned char* 	localBuffer;$/;"	m	class:Texture	typeref:typename:unsigned char *
locale_	src/vendor/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:locale_type
locale_type	src/vendor/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::locale const
log	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log	src/vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> log(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
log	src/vendor/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER genType log(genType const& x, genType const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log	src/vendor/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x, vec<L, T, Q> const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log2	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType log2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log2	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
lookAt	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtLH	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtLH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtRH	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lowestBitValue	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType lowestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
lowestBitValue	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> lowestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
lowp	src/vendor/glm/detail/qualifier.hpp	/^		lowp = packed_lowp, \/\/\/< By default lowp qualifier is also packed$/;"	e	enum:glm::qualifier
lowp_bvec1	src/vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, lowp>			lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, bool, lowp>		lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec2	src/vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec3	src/vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec4	src/vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_bvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,lowp>
lowp_dmat2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_dmat2x2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x3	src/vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x4	src/vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_dmat3x2	src/vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x4	src/vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_dmat4x2	src/vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x3	src/vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dquat	src/vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, lowp>		lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dquat	src/vendor/glm/fwd.hpp	/^	typedef qua<double, lowp>			lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_dvec1	src/vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, lowp>		lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,lowp>
lowp_dvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_dvec2	src/vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, lowp>		lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,lowp>
lowp_dvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_dvec3	src/vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, lowp>		lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,lowp>
lowp_dvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_dvec4	src/vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, lowp>		lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,lowp>
lowp_dvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f32	src/vendor/glm/fwd.hpp	/^	typedef float					lowp_f32;$/;"	t	namespace:glm	typeref:typename:float
lowp_f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_f32mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
lowp_f32mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
lowp_f32mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
lowp_f32mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f32, lowp>				lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f32, lowp>			lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f32, lowp>			lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f32, lowp>			lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f32, lowp>			lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f64	src/vendor/glm/fwd.hpp	/^	typedef double					lowp_f64;$/;"	t	namespace:glm	typeref:typename:double
lowp_f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_f64mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x2
lowp_f64mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, lowp>		lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, lowp>		lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x3
lowp_f64mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, lowp>		lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, lowp>		lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x4
lowp_f64mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, lowp>		lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, lowp>		lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f64, lowp>				lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_float32	src/vendor/glm/fwd.hpp	/^	typedef float					lowp_float32;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float32_t	src/vendor/glm/fwd.hpp	/^	typedef float					lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float64	src/vendor/glm/fwd.hpp	/^	typedef double					lowp_float64;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_float64_t	src/vendor/glm/fwd.hpp	/^	typedef double					lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
lowp_fmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:lowp_fmat2x2
lowp_fmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:lowp_fmat3x3
lowp_fmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:lowp_fmat4x4
lowp_fmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fquat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_fvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, lowp> lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, lowp> lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, lowp> lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_fvec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, lowp> lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_i16	src/vendor/glm/fwd.hpp	/^	typedef int16					lowp_i16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_i16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_i16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i32	src/vendor/glm/fwd.hpp	/^	typedef int32					lowp_i32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_i32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_i32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i64	src/vendor/glm/fwd.hpp	/^	typedef int64					lowp_i64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_i64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_i64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i8	src/vendor/glm/fwd.hpp	/^	typedef int8					lowp_i8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_i8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_i8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i8, lowp>		lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i8, lowp>		lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i8, lowp>		lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i8, lowp>		lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_i8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,lowp>
lowp_imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,lowp>
lowp_imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,lowp>
lowp_imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,lowp>
lowp_imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,lowp>
lowp_imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,lowp>
lowp_imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_int16	src/vendor/glm/fwd.hpp	/^	typedef int16					lowp_int16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16_t	src/vendor/glm/fwd.hpp	/^	typedef int16					lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int32	src/vendor/glm/fwd.hpp	/^	typedef int32					lowp_int32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32_t	src/vendor/glm/fwd.hpp	/^	typedef int32					lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int64	src/vendor/glm/fwd.hpp	/^	typedef int64					lowp_int64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64_t	src/vendor/glm/fwd.hpp	/^	typedef int64					lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int8	src/vendor/glm/fwd.hpp	/^	typedef int8					lowp_int8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8_t	src/vendor/glm/fwd.hpp	/^	typedef int8					lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_ivec1	src/vendor/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, lowp>			lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,lowp>
lowp_ivec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_ivec2	src/vendor/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,lowp>
lowp_ivec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_ivec3	src/vendor/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,lowp>
lowp_ivec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_ivec4	src/vendor/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,lowp>
lowp_ivec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_mat2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x3	src/vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,lowp>
lowp_mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_mat2x4	src/vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,lowp>
lowp_mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_mat3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x2	src/vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,lowp>
lowp_mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_mat3x3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x4	src/vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,lowp>
lowp_mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_mat4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_mat4x2	src/vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,lowp>
lowp_mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_mat4x3	src/vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,lowp>
lowp_mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_mat4x4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_quat	src/vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, lowp>		lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_quat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_u16	src/vendor/glm/fwd.hpp	/^	typedef uint16					lowp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_u16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_u16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u32	src/vendor/glm/fwd.hpp	/^	typedef uint32					lowp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_u32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_u32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u64	src/vendor/glm/fwd.hpp	/^	typedef uint64					lowp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_u64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_u64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u8	src/vendor/glm/fwd.hpp	/^	typedef uint8					lowp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_u8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_u8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u8, lowp>		lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u8, lowp>		lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u8, lowp>		lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u8, lowp>		lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_u8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_uint16	src/vendor/glm/fwd.hpp	/^	typedef uint16					lowp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16_t	src/vendor/glm/fwd.hpp	/^	typedef uint16					lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint32	src/vendor/glm/fwd.hpp	/^	typedef uint32					lowp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32_t	src/vendor/glm/fwd.hpp	/^	typedef uint32					lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint64	src/vendor/glm/fwd.hpp	/^	typedef uint64					lowp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64_t	src/vendor/glm/fwd.hpp	/^	typedef uint64					lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint8	src/vendor/glm/fwd.hpp	/^	typedef uint8					lowp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8_t	src/vendor/glm/fwd.hpp	/^	typedef uint8					lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,lowp>
lowp_umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,lowp>
lowp_umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,lowp>
lowp_umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,lowp>
lowp_umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,lowp>
lowp_umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,lowp>
lowp_umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_uvec1	src/vendor/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, lowp>			lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,lowp>
lowp_uvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_uvec2	src/vendor/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,lowp>
lowp_uvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_uvec3	src/vendor/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,lowp>
lowp_uvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_uvec4	src/vendor/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,lowp>
lowp_uvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_vec1	src/vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec2	src/vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec3	src/vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec4	src/vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lpal	src/vendor/stb_image/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc[256][4]
lsw	src/vendor/glm/ext/scalar_ulp.inl	/^		int lsw;$/;"	m	struct:__anon3c23ed7f020a::__anon3c23ed7f0308	typeref:typename:int	file:
luminosity	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER T luminosity(const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& v, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	src/vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& x, vec<3, T, Q> const& y, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ma	src/vendor/stb_image/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anona39c15741008	typeref:typename:unsigned int
main	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	src/Application.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	src/Test.cpp	/^int main(){$/;"	f	typeref:typename:int
main_clipboard	src/vendor/imgui/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
make_mat2	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x2	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x3	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, defaultp> make_mat2x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,defaultp>
make_mat2x4	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, defaultp> make_mat2x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,defaultp>
make_mat3	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x2	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, defaultp> make_mat3x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,defaultp>
make_mat3x3	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x4	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, defaultp> make_mat3x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,defaultp>
make_mat4	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_mat4x2	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, defaultp> make_mat4x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,defaultp>
make_mat4x3	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, defaultp> make_mat4x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,defaultp>
make_mat4x4	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_quat	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER qua<T, defaultp> make_quat(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,defaultp>
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<char>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<int64>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<int>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<long>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<short>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<uint64>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned char>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned int>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned long>$/;"	s	namespace:glm::detail
make_unsigned	src/vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned short>$/;"	s	namespace:glm::detail
make_vec1	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec2	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> make_vec2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
make_vec2	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec3	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> make_vec3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
make_vec3	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec4	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, defaultp> make_vec4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,defaultp>
make_vec4	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	src/vendor/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
mantissa	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((1 << 23) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
mantissa	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((int_type(1) << 52) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
marker	src/vendor/stb_image/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anona39c15740808	typeref:typename:unsigned char
mask	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER T mask(T Bits)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
mask	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType mask(genIUType Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
mask	src/vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mask(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
mat	src/vendor/glm/detail/type_mat2x2.hpp	/^	struct mat<2, 2, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(vec<2, V1, Q> const& v1, vec<2, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.hpp	/^	struct mat<2, 3, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR  mat<2, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.hpp	/^	struct mat<2, 4, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.hpp	/^	struct mat<3, 2, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.hpp	/^	struct mat<3, 3, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.hpp	/^	struct mat<3, 4, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(vec<4, V1, Q> const& v0, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.hpp	/^	struct mat<4, 2, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.hpp	/^	struct mat<4, 3, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(T const& s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.hpp	/^	struct mat<4, 4, T, Q>$/;"	s	namespace:glm
mat	src/vendor/glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(T const& s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat2	src/vendor/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x2	src/vendor/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x3	src/vendor/glm/ext/matrix_float2x3.hpp	/^	typedef mat<2, 3, float, defaultp>		mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,defaultp>
mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
mat2x4	src/vendor/glm/ext/matrix_float2x4.hpp	/^	typedef mat<2, 4, float, defaultp>		mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,defaultp>
mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
mat2x4_cast	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat2x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
mat3	src/vendor/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3_cast	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat3_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
mat3x2	src/vendor/glm/ext/matrix_float3x2.hpp	/^	typedef mat<3, 2, float, defaultp>			mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,defaultp>
mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
mat3x3	src/vendor/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3x4	src/vendor/glm/ext/matrix_float3x4.hpp	/^	typedef mat<3, 4, float, defaultp>			mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,defaultp>
mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
mat3x4_cast	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat3x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
mat4	src/vendor/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
mat4_cast	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat4_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
mat4x2	src/vendor/glm/ext/matrix_float4x2.hpp	/^	typedef mat<4, 2, float, defaultp>			mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,defaultp>
mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
mat4x3	src/vendor/glm/ext/matrix_float4x3.hpp	/^	typedef mat<4, 3, float, defaultp>			mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,defaultp>
mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
mat4x4	src/vendor/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
matrixCompMult	src/vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> matrixCompMult(mat<C, R, T, Q> const& x, mat<C, R, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
matrixCross3	src/vendor/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> matrixCross3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
matrixCross4	src/vendor/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> matrixCross4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
max	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType max(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
max	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
max	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max_x	src/vendor/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:stbtt_int32
max_x	src/vendor/stb_image/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
max_y	src/vendor/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:stbtt_int32
max_y	src/vendor/stb_image/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
maxcode	src/vendor/stb_image/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anona39c15740b08	typeref:typename:int[17]
maxcode	src/vendor/stb_image/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anona39c15740708	typeref:typename:unsigned int[18]
mb	src/vendor/stb_image/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anona39c15741008	typeref:typename:unsigned int
mediump	src/vendor/glm/detail/qualifier.hpp	/^		mediump = packed_mediump, \/\/\/< By default mediump qualifier is also packed$/;"	e	enum:glm::qualifier
mediump_bvec1	src/vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, mediump>		mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, bool, mediump>	mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec2	src/vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec3	src/vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec4	src/vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_bvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_ddualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,mediump>
mediump_dmat2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_dmat2x2	src/vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x3	src/vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x4	src/vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_dmat3x2	src/vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x3	src/vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x4	src/vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_dmat4x2	src/vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x3	src/vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x4	src/vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dquat	src/vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, mediump>	mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dquat	src/vendor/glm/fwd.hpp	/^	typedef qua<double, mediump>		mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_dvec1	src/vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,mediump>
mediump_dvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_dvec2	src/vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,mediump>
mediump_dvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_dvec3	src/vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,mediump>
mediump_dvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_dvec4	src/vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,mediump>
mediump_dvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f32	src/vendor/glm/fwd.hpp	/^	typedef float					mediump_f32;$/;"	t	namespace:glm	typeref:typename:float
mediump_f32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_f32mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
mediump_f32mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
mediump_f32mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
mediump_f32mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f32, mediump>			mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f32, mediump>		mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f32, mediump>		mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f32, mediump>		mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f32, mediump>		mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f64	src/vendor/glm/fwd.hpp	/^	typedef double					mediump_f64;$/;"	t	namespace:glm	typeref:typename:double
mediump_f64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_f64mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x2
mediump_f64mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, mediump>		mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, mediump>		mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x3
mediump_f64mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, mediump>		mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, mediump>		mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x4
mediump_f64mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, mediump>		mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, mediump>		mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64quat	src/vendor/glm/fwd.hpp	/^	typedef qua<f64, mediump>			mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64quat	src/vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_fdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_float32	src/vendor/glm/fwd.hpp	/^	typedef float					mediump_float32;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float32_t	src/vendor/glm/fwd.hpp	/^	typedef float					mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float64	src/vendor/glm/fwd.hpp	/^	typedef double					mediump_float64;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_float64_t	src/vendor/glm/fwd.hpp	/^	typedef double					mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
mediump_fmat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mediump_fmat2x2
mediump_fmat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat2x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mediump_fmat3x3
mediump_fmat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat3x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mediump_fmat4x4
mediump_fmat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4x4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fquat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_fvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, mediump> mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, mediump> mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, mediump> mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_fvec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, mediump> mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_i16	src/vendor/glm/fwd.hpp	/^	typedef int16					mediump_i16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_i16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_i16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i16, mediump>	mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i16, mediump>	mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i16, mediump>	mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i16, mediump>	mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i32	src/vendor/glm/fwd.hpp	/^	typedef int32					mediump_i32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_i32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_i32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>	mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>	mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>	mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>	mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i64	src/vendor/glm/fwd.hpp	/^	typedef int64					mediump_i64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_i64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_i64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i64, mediump>	mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i64, mediump>	mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i64, mediump>	mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i64, mediump>	mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i8	src/vendor/glm/fwd.hpp	/^	typedef int8					mediump_i8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_i8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_i8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i8, mediump>		mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i8, mediump>		mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i8, mediump>		mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i8, mediump>		mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_i8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_imat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,mediump>
mediump_imat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,mediump>
mediump_imat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,mediump>
mediump_imat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,mediump>
mediump_imat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_imat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,mediump>
mediump_imat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,mediump>
mediump_imat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_int16	src/vendor/glm/fwd.hpp	/^	typedef int16					mediump_int16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16_t	src/vendor/glm/fwd.hpp	/^	typedef int16					mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int32	src/vendor/glm/fwd.hpp	/^	typedef int32					mediump_int32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32_t	src/vendor/glm/fwd.hpp	/^	typedef int32					mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int64	src/vendor/glm/fwd.hpp	/^	typedef int64					mediump_int64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64_t	src/vendor/glm/fwd.hpp	/^	typedef int64					mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int8	src/vendor/glm/fwd.hpp	/^	typedef int8					mediump_int8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8_t	src/vendor/glm/fwd.hpp	/^	typedef int8					mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_ivec1	src/vendor/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, mediump>		mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,mediump>
mediump_ivec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>	mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_ivec2	src/vendor/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,mediump>
mediump_ivec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_ivec3	src/vendor/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,mediump>
mediump_ivec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_ivec4	src/vendor/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,mediump>
mediump_ivec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_mat2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x2	src/vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2x2	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x3	src/vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, mediump>	mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,mediump>
mediump_mat2x3	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_mat2x4	src/vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, mediump>	mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,mediump>
mediump_mat2x4	src/vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_mat3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x2	src/vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, mediump>	mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,mediump>
mediump_mat3x2	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_mat3x3	src/vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3x3	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x4	src/vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, mediump>	mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,mediump>
mediump_mat3x4	src/vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_mat4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_mat4x2	src/vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, mediump>	mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,mediump>
mediump_mat4x2	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_mat4x3	src/vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, mediump>	mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,mediump>
mediump_mat4x3	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_mat4x4	src/vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4x4	src/vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_quat	src/vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, mediump>		mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_quat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_u16	src/vendor/glm/fwd.hpp	/^	typedef uint16					mediump_u16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_u16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_u16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u16, mediump>	mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u16, mediump>	mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u16, mediump>	mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u16, mediump>	mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u32	src/vendor/glm/fwd.hpp	/^	typedef uint32					mediump_u32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_u32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_u32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>	mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>	mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>	mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>	mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u64	src/vendor/glm/fwd.hpp	/^	typedef uint64					mediump_u64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_u64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_u64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u64, mediump>	mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u64, mediump>	mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u64, mediump>	mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u64, mediump>	mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u8	src/vendor/glm/fwd.hpp	/^	typedef uint8					mediump_u8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_u8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_u8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u8, mediump>		mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u8, mediump>		mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u8, mediump>		mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u8, mediump>		mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_u8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_uint16	src/vendor/glm/fwd.hpp	/^	typedef uint16					mediump_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16_t	src/vendor/glm/fwd.hpp	/^	typedef uint16					mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint32	src/vendor/glm/fwd.hpp	/^	typedef uint32					mediump_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32_t	src/vendor/glm/fwd.hpp	/^	typedef uint32					mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint64	src/vendor/glm/fwd.hpp	/^	typedef uint64					mediump_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64_t	src/vendor/glm/fwd.hpp	/^	typedef uint64					mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint8	src/vendor/glm/fwd.hpp	/^	typedef uint8					mediump_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8_t	src/vendor/glm/fwd.hpp	/^	typedef uint8					mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,mediump>
mediump_umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,mediump>
mediump_umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,mediump>
mediump_umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,mediump>
mediump_umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,mediump>
mediump_umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,mediump>
mediump_umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_uvec1	src/vendor/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, mediump>		mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,mediump>
mediump_uvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>	mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_uvec2	src/vendor/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,mediump>
mediump_uvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_uvec3	src/vendor/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,mediump>
mediump_uvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_uvec4	src/vendor/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,mediump>
mediump_uvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_vec1	src/vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec2	src/vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec3	src/vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec4	src/vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mg	src/vendor/stb_image/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anona39c15741008	typeref:typename:unsigned int
min	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType min(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
min	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	src/vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	src/vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
min	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	src/vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min_x	src/vendor/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:stbtt_int32
min_y	src/vendor/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:stbtt_int32
mirrorClamp	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorClamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorClamp	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorClamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mirrorRepeat	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorRepeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorRepeat	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorRepeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genTypeT mix(genTypeT x, genTypeT y, genTypeU a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genTypeT
mix	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	src/vendor/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, U a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	src/vendor/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, mat</;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> mix(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
mixedProduct	src/vendor/glm/gtx/mixed_product.inl	/^	GLM_FUNC_QUALIFIER T mixedProduct$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
mod	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType mod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mod	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int mod(int x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
mod	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint mod(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
mod289	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
modf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType modf(genType x, genType & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
modf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<1, T, Q> modf(vec<1, T, Q> const& x, vec<1, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
modf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> modf(vec<2, T, Q> const& x, vec<2, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
modf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> modf(vec<3, T, Q> const& x, vec<3, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
modf	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> modf(vec<4, T, Q> const& x, vec<4, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
mr	src/vendor/stb_image/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anona39c15741008	typeref:typename:unsigned int
msw	src/vendor/glm/ext/scalar_ulp.inl	/^		int msw;$/;"	m	struct:__anon3c23ed7f020a::__anon3c23ed7f0308	typeref:typename:int	file:
negative	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR bool negative() const { return i < 0; }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR bool
newline	src/vendor/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
next	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	src/vendor/imgui/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	src/vendor/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T next_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
next_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double next_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
next_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float next_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
next_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextafter	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double nextafter(double x, double y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER double
nextafterf	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float nextafterf(float x, float y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
nlz	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int nlz(unsigned int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
nodes	src/vendor/imgui/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
nomore	src/vendor/stb_image/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anona39c15740808	typeref:typename:int
normalize	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> normalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
normalize	src/vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> normalize(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
normalize	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> normalize(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
normalizeDot	src/vendor/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T normalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
normalized	src/VertexBufferLayout.h	/^	unsigned char normalized;$/;"	m	struct:VertexBufferLayoutElement	typeref:typename:unsigned char
notEqual	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	src/vendor/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> notEqual(mat<C, R, T, Q> const& a, mat<C, R, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
notEqual	src/vendor/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> notEqual(mat<C, R, T, Q> const& x, mat<C, R, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
notEqual	src/vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	src/vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	src/vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, genType cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	src/vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	src/vendor/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool notEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
not_	src/vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> not_(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
not_	src/vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool not_$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
numGlyphs	src/vendor/imgui/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_bits	src/vendor/stb_image/stb_image.h	/^   int num_bits;$/;"	m	struct:__anona39c15740c08	typeref:typename:int
num_channels	src/vendor/stb_image/stb_image.h	/^   int num_channels;$/;"	m	struct:__anona39c15740508	typeref:typename:int
num_chars	src/vendor/imgui/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anona9fd05c20408	typeref:typename:int
num_chars	src/vendor/imgui/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon715cafb90508	typeref:typename:int
num_nodes	src/vendor/imgui/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	src/vendor/imgui/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	src/vendor/imgui/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon715cafb90f08	typeref:typename:int
offset	src/vendor/stb_image/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anona39c15741008	typeref:typename:int
one	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_root_two	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_two_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ones32	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int ones32(unsigned int x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
op_div	src/vendor/glm/detail/_swizzle.hpp	/^		struct op_div$/;"	s	struct:glm::detail::_swizzle_base2
op_equal	src/vendor/glm/detail/_swizzle.hpp	/^		struct op_equal$/;"	s	struct:glm::detail::_swizzle_base2
op_minus	src/vendor/glm/detail/_swizzle.hpp	/^		struct op_minus$/;"	s	struct:glm::detail::_swizzle_base2
op_mul	src/vendor/glm/detail/_swizzle.hpp	/^		struct op_mul$/;"	s	struct:glm::detail::_swizzle_base2
op_plus	src/vendor/glm/detail/_swizzle.hpp	/^		struct op_plus$/;"	s	struct:glm::detail::_swizzle_base2
openBounded	src/vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> openBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
operator !=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator %	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &&	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator &&	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator&&(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator &&	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator &&	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator &=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ()	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<2, T, Q> operator ()()  const { return vec<2, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
operator ()	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<3, T, Q> operator ()()  const { return vec<3, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator ()	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<4, T, Q> operator ()()  const { return vec<4, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator ()	src/vendor/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, float, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
operator ()	src/vendor/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, int, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
operator ()	src/vendor/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, uint, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 2, T, Q>>::operator()(glm::mat<2, 2, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 3, T, Q>>::operator()(glm::mat<2, 3, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 4, T, Q>>::operator()(glm::mat<2, 4, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 2, T, Q>>::operator()(glm::mat<3, 2, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 3, T, Q>>::operator()(glm::mat<3, 3, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 4, T, Q>>::operator()(glm::mat<3, 4, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 2, T,Q>>::operator()(glm::mat<4, 2, T,Q> const& m) c/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 3, T,Q>>::operator()(glm::mat<4, 3, T,Q> const& m) c/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 4, T,Q>>::operator()(glm::mat<4, 4, T, Q> const& m) /;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tdualquat<T, Q>>::operator()(glm::tdualquat<T, Q> const& q)/;"	f	class:std::hash::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tquat<T, Q>>::operator()(glm::tquat<T,Q> const& q) const$/;"	f	class:std::hash::tquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<1, T, Q>>::operator()(glm::vec<1, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<2, T, Q>>::operator()(glm::vec<2, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<3, T, Q>>::operator()(glm::vec<3, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	src/vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<4, T, Q>>::operator()(glm::vec<4, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator () 	src/vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e *= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_mul	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	src/vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e += t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_plus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	src/vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e -= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_minus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	src/vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e = t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_equal	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	src/vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e \/= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_div	typeref:typename:GLM_FUNC_QUALIFIER void
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::col_type operator*(mat<2, 4, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::row_type operator*(typename mat<2, 4, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::col_type operator*(mat<3, 2, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::row_type operator*(typename mat<3, 2, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::col_type operator*(mat<4, 2, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::row_type operator*(typename mat<4, 2, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(T const& s, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::row_type
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T const  & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type
operator *	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::row_type
operator *	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(T const& s, tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& p, tdualquat<T, Q> const& o/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(tdualquat<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(vec<3, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(tdualquat<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(vec<4, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	src/vendor/imgui/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator *=	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator *=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator *=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator *=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator *=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator *=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator *=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator *=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator *=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator *=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator *=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator *=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator *=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator *=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator*=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator *=	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; /;"	f	typeref:typename:ImVec2 &
operator +	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q, tdualquat<T, Q> const& p/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator +	src/vendor/imgui/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator ++	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator ++	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator ++	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator ++	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> mat<2, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator ++	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat<2, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator ++	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator ++	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> mat<3, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator ++	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator ++	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator ++	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator ++	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat<3, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator ++	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator ++	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator ++	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> mat<4, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator ++	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator ++	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> mat<4, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator ++	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator ++	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator ++	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ++	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ++	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ++	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ++	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ++	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ++	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ++	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +=	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator +=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator+=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator +=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator +=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator +=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator +=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x/;"	f	typeref:typename:ImVec2 &
operator -	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator-(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator -	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator -	src/vendor/imgui/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator --	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator --	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator --	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator --	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> mat<2, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator --	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat<2, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator --	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator --	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> mat<3, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator --	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator --	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator --	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator --	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat<3, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator --	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator --	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator --	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> mat<4, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator --	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator --	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> mat<4, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator --	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator --	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator --	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator --	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator --	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator --	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator --	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator --	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator --	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator --	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -=	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator -=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator -=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator -=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator -=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator -=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x/;"	f	typeref:typename:ImVec2 &
operator /	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator\/(mat<2, 2, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type
operator /	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator\/(typename mat<2, 2, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::row_type
operator /	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator\/(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator /	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator\/(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator /	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator\/(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator /	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator\/(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator /	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator\/(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator /	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator\/(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator /	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator\/(mat<3, 3, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type
operator /	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator\/(typename mat<3, 3, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::row_type
operator /	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator\/(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator /	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator\/(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator /	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator\/(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator /	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator\/(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator /	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator\/(T const& s, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator /	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator\/(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator /	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(T const& s,	mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator\/(mat<4, 4, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type
operator /	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator\/(typename mat<4, 4, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::row_type
operator /	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v, T const & scala/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator\/(tdualquat<T, Q> const& q,	T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator /	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2/;"	f	typeref:typename:ImVec2
operator /	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2/;"	f	typeref:typename:ImVec2
operator /=	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator /=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator /=	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator /=	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator /=	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> & mat<2, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator /=	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> & mat<3, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator /=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator /=	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator /=	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> & mat<3, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator /=	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator /=	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator /=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator /=	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator /=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(U v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator\/=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator /=	src/vendor/imgui/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator <<	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER  std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, /;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, o/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, p/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, w/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> & operator<<(std::basic_ostream<CTy,CTr>& os, ma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, mat/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const&) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const T& t)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	src/vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t& operator=(float_t const& x)$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR float_t &
operator =	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator =	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator =	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator =	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator =	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator =	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator =	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q>& mat<4, 2, T, Q>::operator=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator =	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q>& mat<4, 3, T, Q>::operator=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator =	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator =	src/vendor/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	src/vendor/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	src/vendor/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	src/vendor/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<T, Q> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<U, Q> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	src/vendor/imgui/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); memcpy(/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator >>	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ImU32	src/vendor/imgui/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	src/vendor/imgui/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[](size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator []	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& operator[](size_t i)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type const& mat<2, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type& mat<2, 2, T, Q>::operator[](typename mat/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::col_type const& mat<2, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::col_type & mat<2, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::col_type const& mat<2, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::col_type & mat<2, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::col_type const& mat<3, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::col_type & mat<3, 2, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type const& mat<3, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type & mat<3, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::col_type const& mat<3, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::col_type & mat<3, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::col_type const& mat<4, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::col_type & mat<4, 2, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::col_type const& mat<4, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::col_type & mat<4, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type const &
operator []	src/vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type &
operator []	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<1, T, Q>::operator[](typename vec<1, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<2, T, Q>::operator[](typename vec<2, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<2, T, Q>::operator[](typename vec<2, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<3, T, Q>::operator[](typename vec<3, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<4, T, Q>::operator[](typename vec<4, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type & tdualquat<T, Q>::operator[](typename t/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type &
operator []	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type const& tdualquat<T, Q>::operator[](typen/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type const &
operator []	src/vendor/imgui/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i/;"	f	struct:ImVector	typeref:typename:T &
operator []	src/vendor/imgui/imgui.h	/^    inline char         operator[](int i)       { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	src/vendor/imgui/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i < Size); return Data[i/;"	f	struct:ImVector	typeref:typename:const T &
operator [] 	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator [] 	src/vendor/imgui/imgui.h	/^    float  operator[] (size_t idx) const { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We v/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	src/vendor/imgui/imgui.h	/^    float& operator[] (size_t idx)       { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We v/;"	f	struct:ImVec2	typeref:typename:float &
operator ^	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator delete	src/vendor/imgui/imgui.h	/^inline void  operator delete(void*, ImNewDummy, void*)   {} \/\/ This is only required so we can/;"	f	typeref:typename:void
operator new	src/vendor/imgui/imgui.h	/^inline void* operator new(size_t, ImNewDummy, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
operator vec<N,T,Q>	src/vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator vec<N, T, Q> () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle	typeref:typename:GLM_FUNC_QUALIFIER
operator |	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ||	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator ||	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator||(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator ||	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator ||	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator ~	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator~(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ~	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator~(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ~	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator~(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ~	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator~(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
order	src/vendor/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	typeref:typename:order_type
order	src/vendor/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER order::order(order_type a)$/;"	f	class:glm::io::order	typeref:typename:GLM_FUNC_QUALIFIER
order	src/vendor/stb_image/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anona39c15740808	typeref:typename:int[4]
order_type	src/vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
orientate2	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> orientate2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
orientate3	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orientate3	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
orientate4	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientate4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientation	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientedAngle	src/vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
orientedAngle	src/vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<3, T, Q> const& x, vec<3, T, Q> const& y, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ortho	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
ortho	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top, T zNear, T zF/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoNO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoNO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoZO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthonormalize	src/vendor/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orthonormalize(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orthonormalize	src/vendor/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> orthonormalize(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
out	src/vendor/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::intBitsToFloat::__anon8d42b7cf030a	typeref:typename:float	file:
out	src/vendor/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::uintBitsToFloat::__anon8d42b7cf040a	typeref:typename:float	file:
out	src/vendor/glm/detail/func_common.inl	/^			int out;$/;"	m	union:glm::floatBitsToInt::__anon8d42b7cf010a	typeref:typename:int	file:
out	src/vendor/glm/detail/func_common.inl	/^			uint out;$/;"	m	union:glm::floatBitsToUint::__anon8d42b7cf020a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			double out;$/;"	m	union:glm::packDouble2x32::__anon93647ba3090a	typeref:typename:double	file:
out	src/vendor/glm/detail/func_packing.inl	/^			signed char out[4];$/;"	m	union:glm::unpackSnorm4x8::__anon93647ba3080a	typeref:typename:signed char[4]	file:
out	src/vendor/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackHalf2x16::__anon93647ba30c0a	typeref:typename:signed short[2]	file:
out	src/vendor/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackSnorm2x16::__anon93647ba3040a	typeref:typename:signed short[2]	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint   out[2];$/;"	m	union:glm::unpackDouble2x32::__anon93647ba30a0a	typeref:typename:uint[2]	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packHalf2x16::__anon93647ba30b0a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm2x16::__anon93647ba3030a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm4x8::__anon93647ba3070a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm2x16::__anon93647ba3010a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm4x8::__anon93647ba3050a	typeref:typename:uint	file:
out	src/vendor/glm/detail/func_packing.inl	/^			unsigned char out[4];$/;"	m	union:glm::unpackUnorm4x8::__anon93647ba3060a	typeref:typename:unsigned char[4]	file:
out	src/vendor/glm/detail/func_packing.inl	/^			unsigned short out[2];$/;"	m	union:glm::unpackUnorm2x16::__anon93647ba3020a	typeref:typename:unsigned short[2]	file:
out	src/vendor/stb_image/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anona39c15740e08	typeref:typename:stbi_uc ***
out	src/vendor/stb_image/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc *
outerProduct	src/vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA, DB, T, Q>::type outerProduct(vec<DA,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type
outerProduct	src/vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_highp> outerProduct<4, 4, float, aligned_highp>(vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_highp>
outerProduct	src/vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_lowp> outerProduct<4, 4, float, aligned_lowp>(vec<4/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_lowp>
outerProduct	src/vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_mediump> outerProduct<4, 4, float, aligned_mediump>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_mediump>
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	src/vendor/glm/matrix.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
overflow	src/vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float overflow()$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
p	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520408	typeref:typename:T
p	src/vendor/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc806f352070a	typeref:typename:T
p	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30408	typeref:typename:T
p	src/vendor/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc8190bd3070a	typeref:typename:T
pMesh	src/Object.h	/^	const Mesh* pMesh;$/;"	m	class:Object	typeref:typename:const Mesh *
pack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint16, Q> pack(vec<1, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint16,Q>	file:
pack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint16, Q> pack(vec<2, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint16,Q>	file:
pack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint16, Q> pack(vec<3, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint16,Q>	file:
pack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint16, Q> pack(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint16,Q>	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u4u4u4u4	typeref:typename:uint16	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u5u5u1	typeref:typename:uint16	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u6u5	typeref:typename:uint16	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::i10i10i10i2	typeref:typename:uint32	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u10u10u10u2	typeref:typename:uint32	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u9u9u9e5	typeref:typename:uint32	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u3u3u2	typeref:typename:uint8	file:
pack	src/vendor/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u4u4	typeref:typename:uint8	file:
packDouble2x32	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER double packDouble2x32(uvec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
packF2x11_1x10	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF2x11_1x10(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packF3x9_E1x5	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF3x9_E1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packHalf	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint16, Q> packHalf(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>
packHalf1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packHalf1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packHalf2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packHalf2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packHalf4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packHalf4x16(glm::vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packI3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packI3x10_1x2(ivec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packInt2x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int packInt2x16(i16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
packInt2x32	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt2x32(i32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int16 packInt2x8(i8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
packInt4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt4x16(i16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt4x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int32 packInt4x8(i8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
packRGBM	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> packRGBM(vec<3, T, Q> const& rgb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
packSnorm	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, intType, Q> packSnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,intType,Q>
packSnorm1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm1x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packSnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packSnorm2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packSnorm2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packSnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packSnorm4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packSnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packSnorm4x8	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packU3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packU3x10_1x2(uvec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUint2x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint packUint2x16(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUint2x32	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint2x32(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUint2x8(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUint4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint4x16(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint4x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUint4x8(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uintType, Q> packUnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uintType,Q>
packUnorm1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x16(float s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x5_1x6_1x5	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x5_1x6_1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUnorm2x3_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x3_1x2(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x4	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x4(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm3x5_1x1	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm3x5_1x1(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUnorm4x4	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm4x4(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x8	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pack_info	src/vendor/imgui/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
packed	src/vendor/glm/detail/qualifier.hpp	/^		packed = packed_highp, \/\/\/< By default packed qualifier is also high precision$/;"	e	enum:glm::qualifier
packed10ToFloat	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed10ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed10bitToFloat	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed10bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed11ToFloat	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed11ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed11bitToFloat	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed11bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec1			packed_bvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec1
packed_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec2			packed_bvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec2
packed_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec3			packed_bvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec3
packed_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec4			packed_bvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec4
packed_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2
packed_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2
packed_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2		packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2
packed_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x2
packed_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x2			packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x2
packed_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x2
packed_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x3
packed_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x3			packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x3
packed_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x3
packed_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x4
packed_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x4			packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x4
packed_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x4
packed_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3
packed_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3
packed_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3		packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3
packed_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x2
packed_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x2			packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x2
packed_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x2
packed_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x3
packed_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x3			packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x3
packed_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x3
packed_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x4
packed_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x4			packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x4
packed_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x4
packed_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4
packed_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4
packed_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4		packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4
packed_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x2
packed_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x2			packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x2
packed_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x2
packed_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x3
packed_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x3			packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x3
packed_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x3
packed_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x4
packed_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x4			packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x4
packed_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x4
packed_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec1
packed_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec1
packed_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec1		packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec1
packed_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec2
packed_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec2
packed_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec2		packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec2
packed_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec3
packed_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec3
packed_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec3		packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec3
packed_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec4
packed_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec4
packed_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec4		packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec4
packed_highp	src/vendor/glm/detail/qualifier.hpp	/^		packed_highp, \/\/\/< Typed data is tightly packed in memory and operations are executed with /;"	e	enum:glm::qualifier
packed_highp_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_highp>		packed_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_highp>
packed_highp_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_highp>		packed_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_highp>
packed_highp_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_highp>		packed_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_highp>
packed_highp_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_highp>		packed_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_highp>
packed_highp_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_highp>		packed_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_highp>
packed_highp_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_highp>		packed_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_highp>
packed_highp_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_highp>		packed_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_highp>
packed_highp_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_highp>		packed_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_highp>
packed_highp_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_highp>		packed_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_highp>
packed_highp_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_highp>		packed_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_highp>
packed_highp_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_highp>	packed_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_highp>
packed_highp_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_highp>	packed_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_highp>
packed_highp_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_highp>	packed_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_highp>
packed_highp_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_highp>	packed_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_highp>
packed_highp_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_highp>		packed_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_highp>
packed_highp_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_highp>		packed_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_highp>
packed_highp_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_highp>		packed_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_highp>
packed_highp_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_highp>		packed_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_highp>
packed_highp_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_highp>		packed_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_highp>
packed_highp_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_highp>		packed_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_highp>
packed_highp_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_highp>		packed_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_highp>
packed_highp_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_highp>		packed_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_highp>
packed_highp_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_highp>		packed_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_highp>
packed_highp_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_highp>		packed_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_highp>
packed_highp_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_highp>		packed_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_highp>
packed_highp_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_highp>		packed_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_highp>
packed_highp_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_highp>		packed_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_highp>
packed_highp_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_highp>		packed_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_highp>
packed_highp_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_highp>		packed_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_highp>
packed_highp_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_highp>		packed_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_highp>
packed_highp_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_highp>		packed_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_highp>
packed_highp_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_highp>		packed_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_highp>
packed_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec1			packed_ivec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec1
packed_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec2			packed_ivec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec2
packed_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec3			packed_ivec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec3
packed_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec4			packed_ivec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec4
packed_lowp	src/vendor/glm/detail/qualifier.hpp	/^		packed_lowp, \/\/\/< Typed data is tightly packed in memory  and operations are executed with /;"	e	enum:glm::qualifier
packed_lowp_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_lowp>		packed_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_lowp>
packed_lowp_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_lowp>		packed_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_lowp>
packed_lowp_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_lowp>		packed_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_lowp>
packed_lowp_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_lowp>		packed_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_lowp>
packed_lowp_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_lowp>		packed_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_lowp>
packed_lowp_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_lowp>		packed_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_lowp>
packed_lowp_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_lowp>		packed_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_lowp>
packed_lowp_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_lowp>		packed_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_lowp>
packed_lowp_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_lowp>		packed_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_lowp>
packed_lowp_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_lowp>		packed_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_lowp>
packed_lowp_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_lowp>		packed_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_lowp>
packed_lowp_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_lowp>		packed_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_lowp>
packed_lowp_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_lowp>		packed_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_lowp>
packed_lowp_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_lowp>		packed_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_lowp>
packed_lowp_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_lowp>		packed_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_lowp>
packed_lowp_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_lowp>		packed_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_lowp>
packed_lowp_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_lowp>		packed_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_lowp>
packed_lowp_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_lowp>		packed_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_lowp>
packed_lowp_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_lowp>		packed_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_lowp>
packed_lowp_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_lowp>		packed_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_lowp>
packed_lowp_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_lowp>		packed_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_lowp>
packed_lowp_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_lowp>		packed_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_lowp>
packed_lowp_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_lowp>		packed_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_lowp>
packed_lowp_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_lowp>		packed_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_lowp>
packed_lowp_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_lowp>		packed_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_lowp>
packed_lowp_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_lowp>		packed_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_lowp>
packed_lowp_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_lowp>		packed_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_lowp>
packed_lowp_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_lowp>		packed_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_lowp>
packed_lowp_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_lowp>		packed_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_lowp>
packed_lowp_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_lowp>		packed_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_lowp>
packed_lowp_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_lowp>		packed_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_lowp>
packed_lowp_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_lowp>		packed_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_lowp>
packed_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2
packed_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2
packed_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2
packed_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x2
packed_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x2
packed_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x2		packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x2
packed_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x3
packed_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x3
packed_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x3		packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x3
packed_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x4
packed_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x4
packed_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x4		packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x4
packed_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3
packed_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3
packed_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3
packed_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x2
packed_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x2
packed_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x2		packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x2
packed_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x3
packed_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x3
packed_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x3		packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x3
packed_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x4
packed_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x4
packed_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x4		packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x4
packed_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4
packed_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4
packed_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4
packed_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x2
packed_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x2
packed_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x2		packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x2
packed_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x3
packed_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x3
packed_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x3		packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x3
packed_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x4
packed_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x4
packed_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x4		packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x4
packed_mediump	src/vendor/glm/detail/qualifier.hpp	/^		packed_mediump, \/\/\/< Typed data is tightly packed in memory  and operations are executed wi/;"	e	enum:glm::qualifier
packed_mediump_bvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_mediump>	packed_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_mediump>
packed_mediump_bvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_mediump>	packed_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_mediump>
packed_mediump_bvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_mediump>	packed_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_mediump>
packed_mediump_bvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_mediump>	packed_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_mediump>
packed_mediump_dmat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_mediump>	packed_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_mediump>
packed_mediump_dmat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_mediump>	packed_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_mediump>
packed_mediump_dmat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_mediump>	packed_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_mediump>
packed_mediump_dmat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_mediump>	packed_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_mediump>
packed_mediump_dmat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dmat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_mediump>	packed_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_mediump>
packed_mediump_dmat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_mediump>	packed_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_mediump>
packed_mediump_dmat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_mediump>	packed_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_mediump>
packed_mediump_dvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_mediump>	packed_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_mediump>
packed_mediump_dvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_mediump>	packed_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_mediump>
packed_mediump_dvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_mediump>	packed_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_mediump>
packed_mediump_ivec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_mediump>		packed_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_mediump>
packed_mediump_ivec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_mediump>		packed_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_mediump>
packed_mediump_ivec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_mediump>		packed_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_mediump>
packed_mediump_ivec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_mediump>		packed_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_mediump>
packed_mediump_mat2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_mediump>	packed_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_mediump>
packed_mediump_mat2x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_mediump>	packed_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_mediump>
packed_mediump_mat3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_mediump>	packed_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_mediump>
packed_mediump_mat3x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_mediump>	packed_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_mediump>
packed_mediump_mat4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_mat4x2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_mediump>	packed_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_mediump>
packed_mediump_mat4x3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_mediump>	packed_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_mediump>
packed_mediump_mat4x4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_mediump>	packed_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_mediump>
packed_mediump_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_mediump>	packed_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_mediump>
packed_mediump_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_mediump>	packed_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_mediump>
packed_mediump_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_mediump>	packed_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_mediump>
packed_mediump_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_mediump>	packed_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_mediump>
packed_mediump_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_mediump>	packed_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_mediump>
packed_mediump_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_mediump>	packed_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_mediump>
packed_mediump_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_mediump>	packed_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_mediump>
packed_uvec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec1			packed_uvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec1
packed_uvec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec2			packed_uvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec2
packed_uvec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec3			packed_uvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec3
packed_uvec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec4			packed_uvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec4
packed_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec1
packed_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec1
packed_vec1	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec1
packed_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec2
packed_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec2
packed_vec2	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec2
packed_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec3
packed_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec3
packed_vec3	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec3
packed_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec4
packed_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec4
packed_vec4	src/vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec4
padding	src/vendor/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon715cafb90708	typeref:typename:unsigned char
padding	src/vendor/imgui/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	src/vendor/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
padding2	src/vendor/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
padding3	src/vendor/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
pal	src/vendor/stb_image/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anona39c15741308	typeref:typename:stbi_uc[256][4]
parse	src/vendor/stb_image/stb_image.h	/^   int parse, step;$/;"	m	struct:__anona39c15741308	typeref:typename:int
part_type	src/vendor/glm/gtx/dual_quaternion.hpp	/^		typedef qua<T, Q> part_type;$/;"	t	struct:glm::tdualquat	typeref:typename:qua<T,Q>
parts	src/vendor/glm/ext/scalar_ulp.inl	/^	} parts;$/;"	m	union:__anon3c23ed7f020a	typeref:struct:__anon3c23ed7f020a::__anon3c23ed7f0308	file:
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position, vec<2, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position, vec<3, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position, vec<4, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
permute	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
permute	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> permute(vec<2, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
permute	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> permute(vec<3, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
permute	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> permute(vec<4, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
perp	src/vendor/glm/gtx/perpendicular.inl	/^	GLM_FUNC_QUALIFIER genType perp(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
perspective	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFov	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFov(T fov, T width, T height, T zNear, T z/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovNO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovNO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovZO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveNO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveNO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_NO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_ZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveZO	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
pi	src/vendor/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
pickMatrix	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> pickMatrix(vec<2, T, Q> const& center, vec<2, T, Q> const& d/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
pitch	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T pitch(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
pixels	src/vendor/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon715cafb90808	typeref:typename:unsigned char *
pixels	src/vendor/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
polar	src/vendor/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> polar$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
pop_back	src/vendor/imgui/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	src/vendor/imgui/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
position	src/Object.h	/^	double position[3];$/;"	m	class:Object	typeref:typename:double[3]
pow	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> pow(vec<L, T, Q> const& base, vec<L, T, Q> const& exponent)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
pow	src/vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> pow(qua<T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
pow	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int pow(int x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
pow	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint pow(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pow2	src/vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow2(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow3	src/vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow3(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow4	src/vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow4(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoAbove(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoAbove(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoBelow	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoBelow(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoBelow	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoBelow(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoNearest	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoNearest(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoNearest	src/vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoNearest(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
precision	src/vendor/glm/detail/qualifier.hpp	/^	typedef qualifier precision;$/;"	t	namespace:glm	typeref:typename:qualifier
precision	src/vendor/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
precision	src/vendor/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER precision::precision(unsigned a)$/;"	f	class:glm::io::precision	typeref:typename:GLM_FUNC_QUALIFIER
precision_	src/vendor/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
preferred_x	src/vendor/imgui/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anona9fd05c20308	typeref:typename:float
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<bool>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<double>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<float>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<int16_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<int32_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<int64_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<int8_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint16_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint32_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint64_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint8_t>$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/glm/gtx/string_cast.inl	/^	struct prefix{};$/;"	s	namespace:glm::detail	file:
prefix	src/vendor/stb_image/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anona39c15741208	typeref:typename:stbi__int16
preinstall	Makefile	/^preinstall: all$/;"	t
preinstall/fast	Makefile	/^preinstall\/fast:$/;"	t
prev_first	src/vendor/imgui/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anona9fd05c20508	typeref:typename:int
prev_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T prev_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prev_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double prev_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prev_float	src/vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float prev_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prev_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	src/vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_link	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon59f071e40308	typeref:typename:stbrp_node **
print_matrix_on	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_on(std::basic_ostream<CTy, CTr>& /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_matrix_pair_on	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_pair_on(std::basic_ostream<CTy, C/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_vector_on	src/vendor/glm/gtx/io.inl	/^	print_vector_on(std::basic_ostream<CTy, CTr>& os, V const& a)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
proggy_clean_ttf_compressed_data_base85	src/vendor/imgui/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v	typeref:typename:const char[]	file:
progressive	src/vendor/stb_image/stb_image.h	/^   int            progressive;$/;"	m	struct:__anona39c15740808	typeref:typename:int
proj	src/vendor/glm/gtx/projection.inl	/^	GLM_FUNC_QUALIFIER genType proj(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
proj2D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> proj2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
proj3D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> proj3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
project	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> project(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectNO	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectNO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectZO	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectZO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
push_back	src/vendor/imgui/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	src/vendor/imgui/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	src/vendor/imgui/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon715cafb90f08	typeref:typename:stbtt_vertex *
q	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30408	typeref:typename:T
q	src/vendor/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anonc8190bd3080a	typeref:typename:T
qnxnto	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	CMakeFiles/3.18.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qr_decompose	src/vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void qr_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/glm.cpp	/^template struct qua<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
qua	src/vendor/glm/detail/type_quat.hpp	/^	struct qua$/;"	s	namespace:glm
quadraticEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qualifier	src/vendor/glm/detail/qualifier.hpp	/^	enum qualifier$/;"	g	namespace:glm
quarter_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType quarter_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
quarticEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quat	src/vendor/glm/ext/quaternion_float.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quat	src/vendor/glm/fwd.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quatLookAt	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAt(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtLH	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtLH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtRH	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtRH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<4, 4, T, Q> const& m4)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_identity	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quinticEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qword	src/vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm	typeref:typename:detail::uint64
r	src/vendor/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::vec::__anonc7e2c250010a	typeref:typename:T
r	src/vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7e2c250020a	typeref:typename:T
r	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10308	typeref:typename:T
r	src/vendor/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7f4dad1050a	typeref:typename:T
r	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520308	typeref:typename:T
r	src/vendor/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc806f352050a	typeref:typename:T
r	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30308	typeref:typename:T
r	src/vendor/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc8190bd3050a	typeref:typename:T
radialGradient	src/vendor/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T radialGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
radians	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType radians(genType degrees)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
radians	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> radians(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
ratio	src/vendor/stb_image/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
raw_coeff	src/vendor/stb_image/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:void **
raw_data	src/vendor/stb_image/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:void *
read	src/vendor/stb_image/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  re/;"	m	struct:__anona39c15740208	typeref:typename:int (*)(void * user,char * data,int size)
read_from_callbacks	src/vendor/stb_image/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anona39c15740308	typeref:typename:int
real	src/vendor/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
rebuild_cache	Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rect_height_compare	src/vendor/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	src/vendor/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
redo_char_point	src/vendor/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anona9fd05c20208	typeref:typename:int
redo_point	src/vendor/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anona9fd05c20208	typeref:typename:short
reflect	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType reflect(genType const& I, genType const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
reflect	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> reflect(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
reflect2D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> reflect2D(mat<3, 3, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
reflect3D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> reflect3D(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
refract	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType refract(genType const& I, genType const& N, genType eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
refract	src/vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> refract(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
rendererID	src/IndexBuffer.h	/^	unsigned int rendererID;$/;"	m	class:IndexBuffer	typeref:typename:unsigned int
rendererID	src/VertexBuffer.h	/^	unsigned int rendererID;$/;"	m	class:VertexBuffer	typeref:typename:unsigned int
rendererId	src/Shader.h	/^	unsigned int rendererId;$/;"	m	class:Shader	typeref:typename:unsigned int
rendererId	src/Texture.h	/^	unsigned int 	rendererId;$/;"	m	class:Texture	typeref:typename:unsigned int
rendererId	src/VertexArray.h	/^		unsigned int rendererId;$/;"	m	class:VertexArray	typeref:typename:unsigned int
repeat	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType repeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
repeat	src/vendor/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> repeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
resample	src/vendor/stb_image/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anona39c15740a08	typeref:typename:resample_row_func
resample_row_1	src/vendor/stb_image/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	typeref:typename:stbi_uc *
resample_row_func	src/vendor/stb_image/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in0,stbi_uc * in1,int w,int hs)
resample_row_hv_2_kernel	src/vendor/stb_image/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	m	struct:__anona39c15740808	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in_near,stbi_uc * in_far,int w,int hs)
reserve	src/vendor/imgui/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	src/vendor/imgui/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
resize	src/vendor/imgui/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	src/vendor/imgui/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_grip_def	src/vendor/imgui/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
restart_interval	src/vendor/stb_image/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anona39c15740808	typeref:typename:int
return_type_scalar_multiplication	src/vendor/glm/gtx/scalar_multiplication.hpp	/^	using return_type_scalar_multiplication = typename std::enable_if<$/;"	t	namespace:glm	typeref:typename:std::enable_if<!std::is_same<T,float>::value && std::is_arithmetic<T>::value,Vec>::type
rgb	src/vendor/stb_image/stb_image.h	/^   int            rgb;$/;"	m	struct:__anona39c15740808	typeref:typename:int
rgb2YCoCg	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCg$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgb2YCoCgR	src/vendor/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
rgb2YCoCgR	src/vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgbColor	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgbColor(const vec<3, T, Q>& hsvColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rightHanded	src/vendor/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool rightHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
roll	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T roll(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
root_five	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_five()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_half_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_ln_four	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_ln_four()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_three	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_three()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
rotate	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotate	src/vendor/glm/ext/quaternion_transform.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotate	src/vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rotate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rotate	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate(qua<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
rotate	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	src/vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(T angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateNormalizedAxis	src/vendor/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateNormalizedAxis	src/vendor/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotateX	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateX	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateY	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateY	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateZ	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateZ	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate_slow	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate_slow(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotation	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotation(vec<3, T, Q> const& orig, vec<3, T, Q> const& dest)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
round	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType round(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
round	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> round(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundEven	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType roundEven(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundEven	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundEven(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType roundMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundMultiple	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genIUType roundPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
roundPowerOfTwo	src/vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
row	src/vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
row	src/vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::row_type row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::row_type
rowMajor2	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor2	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor3	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rowMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rowMajor4	src/vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rowMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
row_major	src/vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
rows	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const rows = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
rows	src/vendor/glm/gtx/type_trait.hpp	/^		static length_t const rows = R;$/;"	v	typeref:typename:length_t const
rows	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::rows;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
rows	src/vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::rows;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
rq_decompose	src/vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void rq_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
s	src/vendor/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::vec::__anonc7e2c250010a	typeref:typename:T
s	src/vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7e2c250020a	typeref:typename:T
s	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10408	typeref:typename:T
s	src/vendor/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7f4dad1050a	typeref:typename:T
s	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520408	typeref:typename:T
s	src/vendor/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc806f352050a	typeref:typename:T
s	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30408	typeref:typename:T
s	src/vendor/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc8190bd3050a	typeref:typename:T
s	src/vendor/stb_image/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anona39c15740808	typeref:typename:stbi__context *
s	src/vendor/stb_image/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anona39c15740e08	typeref:typename:stbi__context *
s0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon715cafb90308	typeref:typename:float
s1	src/vendor/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon715cafb90308	typeref:typename:float
saturate	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1)/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
saturate	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> saturate(const vec<2, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
saturate	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> saturate(const vec<3, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturate	src/vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> saturate(const vec<4, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
saturation	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> saturation(T const s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
saturation	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> saturation(const T s, const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturation	src/vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> saturation(const T s, const vec<4, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
scale	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scale	src/vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> scale(vec<3, T, Q> const& v, T desiredLength)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
scale	src/vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> scale($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
scale	src/vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(mat<4, 4, T, Q> const& m, T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scale_slow	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale_slow(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scan_n	src/vendor/stb_image/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anona39c15740808	typeref:typename:int
sec	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sec(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sec	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sech	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sech(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sech	src/vendor/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
select_end	src/vendor/imgui/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anona9fd05c20308	typeref:typename:int
select_start	src/vendor/imgui/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anona9fd05c20308	typeref:typename:int
separator	src/vendor/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
shearX	src/vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX2D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX3D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearX3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearY	src/vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY2D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY3D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearY3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearZ3D	src/vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearZ3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shortMix	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> shortMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
sign	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genFIType sign(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genFIType
sign	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sign(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sign16	src/vendor/glm/gtc/bitfield.inl	/^		union sign16$/;"	u	function:glm::bitfieldInterleave	file:
sign32	src/vendor/glm/gtc/bitfield.inl	/^		union sign32$/;"	u	function:glm::bitfieldInterleave	file:
sign64	src/vendor/glm/gtc/bitfield.inl	/^		union sign64$/;"	u	function:glm::bitfieldInterleave	file:
sign8	src/vendor/glm/gtc/bitfield.inl	/^		union sign8$/;"	u	function:glm::bitfieldInterleave	file:
simplex	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(glm::vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	src/vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
sin	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sineEaseIn	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseInOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseOut	src/vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
single_line	src/vendor/imgui/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anona9fd05c20308	typeref:typename:unsigned char
sinh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sint	src/vendor/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm	typeref:typename:signed int
size	src/vendor/imgui/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	src/vendor/imgui/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	src/vendor/imgui/imstb_truetype.h	/^   int size;$/;"	m	struct:__anon715cafb90108	typeref:typename:int
size	src/vendor/stb_image/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anona39c15740708	typeref:typename:stbi_uc[257]
size	src/vendor/stb_image/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anona39c15740b08	typeref:typename:stbi_uc[288]
size	src/vendor/stb_image/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anona39c15741108	typeref:typename:stbi_uc
size1	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size1_t	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size2	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size2_t	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size3	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size3_t	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size4	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size4_t	src/vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size_in_bytes	src/vendor/imgui/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
skip	src/vendor/stb_image/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget/;"	m	struct:__anona39c15740208	typeref:typename:void (*)(void * user,int n)
skip_missing	src/vendor/imgui/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
slerp	src/vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
slerp	src/vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> slerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
smoothstep	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType smoothstep(genType edge0, genType edge1, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
smoothstep	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
smoothstep	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
snprintf	src/vendor/imgui/imgui_demo.cpp	/^#define snprintf /;"	d	file:
space	src/vendor/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
spec_end	src/vendor/stb_image/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anona39c15740808	typeref:typename:int
spec_start	src/vendor/stb_image/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anona39c15740808	typeref:typename:int
sphericalRand	src/vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> sphericalRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
split	src/vendor/imgui/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
sqrt	src/vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sqrt	src/vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> sqrt(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
sqrt	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int sqrt(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
sqrt	src/vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint sqrt(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
squad	src/vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> squad$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
src/Application.cpp.i	Makefile	/^src\/Application.cpp.i:$/;"	t
src/Application.cpp.o	Makefile	/^src\/Application.cpp.o:$/;"	t
src/Application.cpp.s	Makefile	/^src\/Application.cpp.s:$/;"	t
src/Application.i	Makefile	/^src\/Application.i: src\/Application.cpp.i$/;"	t
src/Application.o	Makefile	/^src\/Application.o: src\/Application.cpp.o$/;"	t
src/Application.s	Makefile	/^src\/Application.s: src\/Application.cpp.s$/;"	t
src/IndexBuffer.cpp.i	Makefile	/^src\/IndexBuffer.cpp.i:$/;"	t
src/IndexBuffer.cpp.o	Makefile	/^src\/IndexBuffer.cpp.o:$/;"	t
src/IndexBuffer.cpp.s	Makefile	/^src\/IndexBuffer.cpp.s:$/;"	t
src/IndexBuffer.i	Makefile	/^src\/IndexBuffer.i: src\/IndexBuffer.cpp.i$/;"	t
src/IndexBuffer.o	Makefile	/^src\/IndexBuffer.o: src\/IndexBuffer.cpp.o$/;"	t
src/IndexBuffer.s	Makefile	/^src\/IndexBuffer.s: src\/IndexBuffer.cpp.s$/;"	t
src/Mesh/Mesh.cpp.i	Makefile	/^src\/Mesh\/Mesh.cpp.i:$/;"	t
src/Mesh/Mesh.cpp.o	Makefile	/^src\/Mesh\/Mesh.cpp.o:$/;"	t
src/Mesh/Mesh.cpp.s	Makefile	/^src\/Mesh\/Mesh.cpp.s:$/;"	t
src/Mesh/Mesh.i	Makefile	/^src\/Mesh\/Mesh.i: src\/Mesh\/Mesh.cpp.i$/;"	t
src/Mesh/Mesh.o	Makefile	/^src\/Mesh\/Mesh.o: src\/Mesh\/Mesh.cpp.o$/;"	t
src/Mesh/Mesh.s	Makefile	/^src\/Mesh\/Mesh.s: src\/Mesh\/Mesh.cpp.s$/;"	t
src/Mesh/MeshPrimitiveFactory.cpp.i	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.cpp.i:$/;"	t
src/Mesh/MeshPrimitiveFactory.cpp.o	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.cpp.o:$/;"	t
src/Mesh/MeshPrimitiveFactory.cpp.s	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.cpp.s:$/;"	t
src/Mesh/MeshPrimitiveFactory.i	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.i: src\/Mesh\/MeshPrimitiveFactory.cpp.i$/;"	t
src/Mesh/MeshPrimitiveFactory.o	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.o: src\/Mesh\/MeshPrimitiveFactory.cpp.o$/;"	t
src/Mesh/MeshPrimitiveFactory.s	Makefile	/^src\/Mesh\/MeshPrimitiveFactory.s: src\/Mesh\/MeshPrimitiveFactory.cpp.s$/;"	t
src/Mesh/MeshStore.cpp.i	Makefile	/^src\/Mesh\/MeshStore.cpp.i:$/;"	t
src/Mesh/MeshStore.cpp.o	Makefile	/^src\/Mesh\/MeshStore.cpp.o:$/;"	t
src/Mesh/MeshStore.cpp.s	Makefile	/^src\/Mesh\/MeshStore.cpp.s:$/;"	t
src/Mesh/MeshStore.i	Makefile	/^src\/Mesh\/MeshStore.i: src\/Mesh\/MeshStore.cpp.i$/;"	t
src/Mesh/MeshStore.o	Makefile	/^src\/Mesh\/MeshStore.o: src\/Mesh\/MeshStore.cpp.o$/;"	t
src/Mesh/MeshStore.s	Makefile	/^src\/Mesh\/MeshStore.s: src\/Mesh\/MeshStore.cpp.s$/;"	t
src/Object.cpp.i	Makefile	/^src\/Object.cpp.i:$/;"	t
src/Object.cpp.o	Makefile	/^src\/Object.cpp.o:$/;"	t
src/Object.cpp.s	Makefile	/^src\/Object.cpp.s:$/;"	t
src/Object.i	Makefile	/^src\/Object.i: src\/Object.cpp.i$/;"	t
src/Object.o	Makefile	/^src\/Object.o: src\/Object.cpp.o$/;"	t
src/Object.s	Makefile	/^src\/Object.s: src\/Object.cpp.s$/;"	t
src/OpenGLRenderer.cpp.i	Makefile	/^src\/OpenGLRenderer.cpp.i:$/;"	t
src/OpenGLRenderer.cpp.o	Makefile	/^src\/OpenGLRenderer.cpp.o:$/;"	t
src/OpenGLRenderer.cpp.s	Makefile	/^src\/OpenGLRenderer.cpp.s:$/;"	t
src/OpenGLRenderer.i	Makefile	/^src\/OpenGLRenderer.i: src\/OpenGLRenderer.cpp.i$/;"	t
src/OpenGLRenderer.o	Makefile	/^src\/OpenGLRenderer.o: src\/OpenGLRenderer.cpp.o$/;"	t
src/OpenGLRenderer.s	Makefile	/^src\/OpenGLRenderer.s: src\/OpenGLRenderer.cpp.s$/;"	t
src/Shader.cpp.i	Makefile	/^src\/Shader.cpp.i:$/;"	t
src/Shader.cpp.o	Makefile	/^src\/Shader.cpp.o:$/;"	t
src/Shader.cpp.s	Makefile	/^src\/Shader.cpp.s:$/;"	t
src/Shader.i	Makefile	/^src\/Shader.i: src\/Shader.cpp.i$/;"	t
src/Shader.o	Makefile	/^src\/Shader.o: src\/Shader.cpp.o$/;"	t
src/Shader.s	Makefile	/^src\/Shader.s: src\/Shader.cpp.s$/;"	t
src/Texture.cpp.i	Makefile	/^src\/Texture.cpp.i:$/;"	t
src/Texture.cpp.o	Makefile	/^src\/Texture.cpp.o:$/;"	t
src/Texture.cpp.s	Makefile	/^src\/Texture.cpp.s:$/;"	t
src/Texture.i	Makefile	/^src\/Texture.i: src\/Texture.cpp.i$/;"	t
src/Texture.o	Makefile	/^src\/Texture.o: src\/Texture.cpp.o$/;"	t
src/Texture.s	Makefile	/^src\/Texture.s: src\/Texture.cpp.s$/;"	t
src/VertexArray.cpp.i	Makefile	/^src\/VertexArray.cpp.i:$/;"	t
src/VertexArray.cpp.o	Makefile	/^src\/VertexArray.cpp.o:$/;"	t
src/VertexArray.cpp.s	Makefile	/^src\/VertexArray.cpp.s:$/;"	t
src/VertexArray.i	Makefile	/^src\/VertexArray.i: src\/VertexArray.cpp.i$/;"	t
src/VertexArray.o	Makefile	/^src\/VertexArray.o: src\/VertexArray.cpp.o$/;"	t
src/VertexArray.s	Makefile	/^src\/VertexArray.s: src\/VertexArray.cpp.s$/;"	t
src/VertexBuffer.cpp.i	Makefile	/^src\/VertexBuffer.cpp.i:$/;"	t
src/VertexBuffer.cpp.o	Makefile	/^src\/VertexBuffer.cpp.o:$/;"	t
src/VertexBuffer.cpp.s	Makefile	/^src\/VertexBuffer.cpp.s:$/;"	t
src/VertexBuffer.i	Makefile	/^src\/VertexBuffer.i: src\/VertexBuffer.cpp.i$/;"	t
src/VertexBuffer.o	Makefile	/^src\/VertexBuffer.o: src\/VertexBuffer.cpp.o$/;"	t
src/VertexBuffer.s	Makefile	/^src\/VertexBuffer.s: src\/VertexBuffer.cpp.s$/;"	t
src/VertexBufferLayout.cpp.i	Makefile	/^src\/VertexBufferLayout.cpp.i:$/;"	t
src/VertexBufferLayout.cpp.o	Makefile	/^src\/VertexBufferLayout.cpp.o:$/;"	t
src/VertexBufferLayout.cpp.s	Makefile	/^src\/VertexBufferLayout.cpp.s:$/;"	t
src/VertexBufferLayout.i	Makefile	/^src\/VertexBufferLayout.i: src\/VertexBufferLayout.cpp.i$/;"	t
src/VertexBufferLayout.o	Makefile	/^src\/VertexBufferLayout.o: src\/VertexBufferLayout.cpp.o$/;"	t
src/VertexBufferLayout.s	Makefile	/^src\/VertexBufferLayout.s: src\/VertexBufferLayout.cpp.s$/;"	t
src/vendor/imgui/imgui.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui.cpp.i:$/;"	t
src/vendor/imgui/imgui.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui.cpp.o:$/;"	t
src/vendor/imgui/imgui.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui.cpp.s:$/;"	t
src/vendor/imgui/imgui.i	Makefile	/^src\/vendor\/imgui\/imgui.i: src\/vendor\/imgui\/imgui.cpp.i$/;"	t
src/vendor/imgui/imgui.o	Makefile	/^src\/vendor\/imgui\/imgui.o: src\/vendor\/imgui\/imgui.cpp.o$/;"	t
src/vendor/imgui/imgui.s	Makefile	/^src\/vendor\/imgui\/imgui.s: src\/vendor\/imgui\/imgui.cpp.s$/;"	t
src/vendor/imgui/imgui_demo.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui_demo.cpp.i:$/;"	t
src/vendor/imgui/imgui_demo.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui_demo.cpp.o:$/;"	t
src/vendor/imgui/imgui_demo.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui_demo.cpp.s:$/;"	t
src/vendor/imgui/imgui_demo.i	Makefile	/^src\/vendor\/imgui\/imgui_demo.i: src\/vendor\/imgui\/imgui_demo.cpp.i$/;"	t
src/vendor/imgui/imgui_demo.o	Makefile	/^src\/vendor\/imgui\/imgui_demo.o: src\/vendor\/imgui\/imgui_demo.cpp.o$/;"	t
src/vendor/imgui/imgui_demo.s	Makefile	/^src\/vendor\/imgui\/imgui_demo.s: src\/vendor\/imgui\/imgui_demo.cpp.s$/;"	t
src/vendor/imgui/imgui_draw.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui_draw.cpp.i:$/;"	t
src/vendor/imgui/imgui_draw.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui_draw.cpp.o:$/;"	t
src/vendor/imgui/imgui_draw.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui_draw.cpp.s:$/;"	t
src/vendor/imgui/imgui_draw.i	Makefile	/^src\/vendor\/imgui\/imgui_draw.i: src\/vendor\/imgui\/imgui_draw.cpp.i$/;"	t
src/vendor/imgui/imgui_draw.o	Makefile	/^src\/vendor\/imgui\/imgui_draw.o: src\/vendor\/imgui\/imgui_draw.cpp.o$/;"	t
src/vendor/imgui/imgui_draw.s	Makefile	/^src\/vendor\/imgui\/imgui_draw.s: src\/vendor\/imgui\/imgui_draw.cpp.s$/;"	t
src/vendor/imgui/imgui_impl_glfw.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.cpp.i:$/;"	t
src/vendor/imgui/imgui_impl_glfw.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.cpp.o:$/;"	t
src/vendor/imgui/imgui_impl_glfw.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.cpp.s:$/;"	t
src/vendor/imgui/imgui_impl_glfw.i	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.i: src\/vendor\/imgui\/imgui_impl_glfw.cpp.i$/;"	t
src/vendor/imgui/imgui_impl_glfw.o	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.o: src\/vendor\/imgui\/imgui_impl_glfw.cpp.o$/;"	t
src/vendor/imgui/imgui_impl_glfw.s	Makefile	/^src\/vendor\/imgui\/imgui_impl_glfw.s: src\/vendor\/imgui\/imgui_impl_glfw.cpp.s$/;"	t
src/vendor/imgui/imgui_impl_opengl3.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.cpp.i:$/;"	t
src/vendor/imgui/imgui_impl_opengl3.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.cpp.o:$/;"	t
src/vendor/imgui/imgui_impl_opengl3.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.cpp.s:$/;"	t
src/vendor/imgui/imgui_impl_opengl3.i	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.i: src\/vendor\/imgui\/imgui_impl_opengl3.cpp.i$/;"	t
src/vendor/imgui/imgui_impl_opengl3.o	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.o: src\/vendor\/imgui\/imgui_impl_opengl3.cpp.o$/;"	t
src/vendor/imgui/imgui_impl_opengl3.s	Makefile	/^src\/vendor\/imgui\/imgui_impl_opengl3.s: src\/vendor\/imgui\/imgui_impl_opengl3.cpp.s$/;"	t
src/vendor/imgui/imgui_widgets.cpp.i	Makefile	/^src\/vendor\/imgui\/imgui_widgets.cpp.i:$/;"	t
src/vendor/imgui/imgui_widgets.cpp.o	Makefile	/^src\/vendor\/imgui\/imgui_widgets.cpp.o:$/;"	t
src/vendor/imgui/imgui_widgets.cpp.s	Makefile	/^src\/vendor\/imgui\/imgui_widgets.cpp.s:$/;"	t
src/vendor/imgui/imgui_widgets.i	Makefile	/^src\/vendor\/imgui\/imgui_widgets.i: src\/vendor\/imgui\/imgui_widgets.cpp.i$/;"	t
src/vendor/imgui/imgui_widgets.o	Makefile	/^src\/vendor\/imgui\/imgui_widgets.o: src\/vendor\/imgui\/imgui_widgets.cpp.o$/;"	t
src/vendor/imgui/imgui_widgets.s	Makefile	/^src\/vendor\/imgui\/imgui_widgets.s: src\/vendor\/imgui\/imgui_widgets.cpp.s$/;"	t
src/vendor/stb_image/stb_image.cpp.i	Makefile	/^src\/vendor\/stb_image\/stb_image.cpp.i:$/;"	t
src/vendor/stb_image/stb_image.cpp.o	Makefile	/^src\/vendor\/stb_image\/stb_image.cpp.o:$/;"	t
src/vendor/stb_image/stb_image.cpp.s	Makefile	/^src\/vendor\/stb_image\/stb_image.cpp.s:$/;"	t
src/vendor/stb_image/stb_image.i	Makefile	/^src\/vendor\/stb_image\/stb_image.i: src\/vendor\/stb_image\/stb_image.cpp.i$/;"	t
src/vendor/stb_image/stb_image.o	Makefile	/^src\/vendor\/stb_image\/stb_image.o: src\/vendor\/stb_image\/stb_image.cpp.o$/;"	t
src/vendor/stb_image/stb_image.s	Makefile	/^src\/vendor\/stb_image\/stb_image.s: src\/vendor\/stb_image\/stb_image.cpp.s$/;"	t
start_x	src/vendor/stb_image/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
start_y	src/vendor/stb_image/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anona39c15741308	typeref:typename:int
started	src/vendor/imgui/imstb_truetype.h	/^   int started;$/;"	m	struct:__anon715cafb90f08	typeref:typename:int
state_	src/vendor/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:state_type &
state_saver	src/vendor/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<char>
state_type	src/vendor/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::basic_ios<CTy,CTr>
stb__barrier_in_b	src/vendor/imgui/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	src/vendor/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char **	file:
stb__barrier_out_e	src/vendor/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	src/vendor/imgui/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	src/vendor/imgui/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	src/vendor/imgui/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	src/vendor/imgui/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	src/vendor/imgui/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	src/vendor/imgui/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	src/vendor/imgui/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	src/vendor/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	src/vendor/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	src/vendor/imgui/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	src/vendor/imgui/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	src/vendor/imgui/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, /;"	f	typeref:typename:STB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	src/vendor/imgui/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	src/vendor/imgui/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int whe/;"	f	typeref:typename:void
stb_text_makeundo_insert	src/vendor/imgui/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	src/vendor/imgui/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int wh/;"	f	typeref:typename:void
stb_text_redo	src/vendor/imgui/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	src/vendor/imgui/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, floa/;"	f	typeref:typename:void
stb_textedit_cut	src/vendor/imgui/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, i/;"	f	typeref:typename:void
stb_textedit_delete_selection	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float/;"	f	typeref:typename:void
stb_textedit_find_charpos	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int s/;"	f	typeref:typename:void
stb_textedit_flush_redo	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KE/;"	f	typeref:typename:void
stb_textedit_move_to_first	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	src/vendor/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	src/vendor/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	src/vendor/imgui/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_C/;"	f	typeref:typename:int
stb_textedit_paste_internal	src/vendor/imgui/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_T/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_sortselection	src/vendor/imgui/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stbi__DNL	src/vendor/stb_image/stb_image.h	/^#define stbi__DNL(/;"	d
stbi__EOI	src/vendor/stb_image/stb_image.h	/^#define stbi__EOI(/;"	d
stbi__SOF	src/vendor/stb_image/stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOF_progressive	src/vendor/stb_image/stb_image.h	/^#define stbi__SOF_progressive(/;"	d
stbi__SOI	src/vendor/stb_image/stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	src/vendor/stb_image/stb_image.h	/^#define stbi__SOS(/;"	d
stbi__YCbCr_to_RGB_row	src/vendor/stb_image/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stb/;"	f	typeref:typename:void
stbi__YCbCr_to_RGB_simd	src/vendor/stb_image/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc /;"	f	typeref:typename:void
stbi__addsizes_valid	src/vendor/stb_image/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__at_eof	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	typeref:typename:stbi_inline int
stbi__bit_reverse	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	typeref:typename:stbi_inline int
stbi__bitcount	src/vendor/stb_image/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	typeref:typename:int
stbi__bitreverse16	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	typeref:typename:stbi_inline int
stbi__blinn_8x8	src/vendor/stb_image/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f	typeref:typename:stbi_uc
stbi__bmask	src/vendor/stb_image/stb_image.h	/^static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,1638/;"	v	typeref:typename:const stbi__uint32[17]
stbi__bmp_data	src/vendor/stb_image/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anona39c15741008
stbi__bmp_info	src/vendor/stb_image/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__bmp_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__bmp_parse_header	src/vendor/stb_image/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f	typeref:typename:void *
stbi__bmp_test	src/vendor/stb_image/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__bmp_test_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__build_fast_ac	src/vendor/stb_image/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f	typeref:typename:void
stbi__build_huffman	src/vendor/stb_image/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	typeref:typename:int
stbi__check_png_header	src/vendor/stb_image/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	typeref:typename:int
stbi__clamp	src/vendor/stb_image/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__cleanup_jpeg	src/vendor/stb_image/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__compute_huffman_codes	src/vendor/stb_image/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__compute_transparency	src/vendor/stb_image/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_transparency16	src/vendor/stb_image/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_y	src/vendor/stb_image/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	typeref:typename:stbi_uc
stbi__compute_y_16	src/vendor/stb_image/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f	typeref:typename:stbi__uint16
stbi__context	src/vendor/stb_image/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anona39c15740308
stbi__convert_16_to_8	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f	typeref:typename:stbi_uc *
stbi__convert_8_to_16	src/vendor/stb_image/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f	typeref:typename:stbi__uint16 *
stbi__convert_format	src/vendor/stb_image/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:unsigned char *
stbi__convert_format16	src/vendor/stb_image/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:stbi__uint16 *
stbi__copyval	src/vendor/stb_image/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	typeref:typename:void
stbi__cpuid3	src/vendor/stb_image/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f	typeref:typename:int
stbi__create_png_image	src/vendor/stb_image/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len/;"	f	typeref:typename:int
stbi__create_png_image_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_/;"	f	typeref:typename:int
stbi__de_iphone	src/vendor/stb_image/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	typeref:typename:void
stbi__de_iphone_flag	src/vendor/stb_image/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v	typeref:typename:int
stbi__decode_jpeg_header	src/vendor/stb_image/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__decode_jpeg_image	src/vendor/stb_image/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f	typeref:typename:int
stbi__depth_scale_table	src/vendor/stb_image/stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v	typeref:typename:const stbi_uc[9]
stbi__div16	src/vendor/stb_image/stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	src/vendor/stb_image/stb_image.h	/^#define stbi__div4(/;"	d
stbi__do_png	src/vendor/stb_image/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info /;"	f	typeref:typename:void *
stbi__do_zlib	src/vendor/stb_image/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	typeref:typename:int
stbi__err	src/vendor/stb_image/stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	src/vendor/stb_image/stb_image.h	/^static int stbi__err(const char *str)$/;"	f	typeref:typename:int
stbi__errpf	src/vendor/stb_image/stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	src/vendor/stb_image/stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	src/vendor/stb_image/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	typeref:typename:int
stbi__extend_receive	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__f2f	src/vendor/stb_image/stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	src/vendor/stb_image/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	typeref:typename:void
stbi__float2fixed	src/vendor/stb_image/stb_image.h	/^#define stbi__float2fixed(/;"	d
stbi__float2int	src/vendor/stb_image/stb_image.h	/^#define stbi__float2int(/;"	d
stbi__float_postprocess	src/vendor/stb_image/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:void
stbi__fopen	src/vendor/stb_image/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	typeref:typename:FILE *
stbi__free_jpeg_components	src/vendor/stb_image/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f	typeref:typename:int
stbi__fsh	src/vendor/stb_image/stb_image.h	/^#define stbi__fsh(/;"	d
stbi__g_failure_reason	src/vendor/stb_image/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v	typeref:typename:const char *
stbi__get16be	src/vendor/stb_image/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get16le	src/vendor/stb_image/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get32be	src/vendor/stb_image/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get32le	src/vendor/stb_image/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get8	src/vendor/stb_image/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__get_chunk_header	src/vendor/stb_image/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	typeref:typename:stbi__pngchunk
stbi__get_marker	src/vendor/stb_image/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_uc
stbi__getn	src/vendor/stb_image/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	typeref:typename:int
stbi__gif	src/vendor/stb_image/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anona39c15741308
stbi__gif_header	src/vendor/stb_image/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	typeref:typename:int
stbi__gif_info	src/vendor/stb_image/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_info_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__gif_load_next	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stb/;"	f	typeref:typename:stbi_uc *
stbi__gif_lzw	src/vendor/stb_image/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anona39c15741208
stbi__gif_parse_colortable	src/vendor/stb_image/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, i/;"	f	typeref:typename:void
stbi__gif_test	src/vendor/stb_image/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__gif_test_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__grow_buffer_unsafe	src/vendor/stb_image/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__h2l_gamma_i	src/vendor/stb_image/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__h2l_scale_i	src/vendor/stb_image/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__hdr_convert	src/vendor/stb_image/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	typeref:typename:void
stbi__hdr_gettoken	src/vendor/stb_image/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	typeref:typename:char *
stbi__hdr_info	src/vendor/stb_image/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__hdr_load	src/vendor/stb_image/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:float *
stbi__hdr_test	src/vendor/stb_image/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	typeref:typename:int
stbi__hdr_test_core	src/vendor/stb_image/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f	typeref:typename:int
stbi__hdr_to_ldr	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	typeref:typename:stbi_uc *
stbi__high_bit	src/vendor/stb_image/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	typeref:typename:int
stbi__huffman	src/vendor/stb_image/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anona39c15740708
stbi__idct_block	src/vendor/stb_image/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__idct_simd	src/vendor/stb_image/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__info_main	src/vendor/stb_image/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__int16	src/vendor/stb_image/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t	typeref:typename:signed short
stbi__int16	src/vendor/stb_image/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t	typeref:typename:int16_t
stbi__int32	src/vendor/stb_image/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t	typeref:typename:signed int
stbi__int32	src/vendor/stb_image/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t	typeref:typename:int32_t
stbi__is_16_main	src/vendor/stb_image/stb_image.h	/^static int stbi__is_16_main(stbi__context *s)$/;"	f	typeref:typename:int
stbi__jbias	src/vendor/stb_image/stb_image.h	/^static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-819/;"	v	typeref:typename:const int[16]
stbi__jpeg	src/vendor/stb_image/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anona39c15740808
stbi__jpeg_decode_block	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huff/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_ac	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, st/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_dc	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, in/;"	f	typeref:typename:int
stbi__jpeg_dequantize	src/vendor/stb_image/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f	typeref:typename:void
stbi__jpeg_dezigzag	src/vendor/stb_image/stb_image.h	/^static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v	typeref:typename:const stbi_uc[]
stbi__jpeg_finish	src/vendor/stb_image/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f	typeref:typename:void
stbi__jpeg_get_bit	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_get_bits	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_huff_decode	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_info	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_info_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:void *
stbi__jpeg_reset	src/vendor/stb_image/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__jpeg_test	src/vendor/stb_image/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__l2h_gamma	src/vendor/stb_image/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__l2h_scale	src/vendor/stb_image/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__ldr_to_hdr	src/vendor/stb_image/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	typeref:typename:float *
stbi__load_and_postprocess_16bit	src/vendor/stb_image/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *com/;"	f	typeref:typename:stbi__uint16 *
stbi__load_and_postprocess_8bit	src/vendor/stb_image/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *com/;"	f	typeref:typename:unsigned char *
stbi__load_gif_main	src/vendor/stb_image/stb_image.h	/^static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *co/;"	f	typeref:typename:void *
stbi__load_main	src/vendor/stb_image/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:void *
stbi__loadf_main	src/vendor/stb_image/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi__mad2sizes_valid	src/vendor/stb_image/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f	typeref:typename:int
stbi__mad3sizes_valid	src/vendor/stb_image/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f	typeref:typename:int
stbi__mad4sizes_valid	src/vendor/stb_image/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f	typeref:typename:int
stbi__malloc	src/vendor/stb_image/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	typeref:typename:void *
stbi__malloc_mad2	src/vendor/stb_image/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f	typeref:typename:void *
stbi__malloc_mad3	src/vendor/stb_image/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f	typeref:typename:void *
stbi__malloc_mad4	src/vendor/stb_image/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f	typeref:typename:void *
stbi__mul2sizes_valid	src/vendor/stb_image/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__out_gif_code	src/vendor/stb_image/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	typeref:typename:void
stbi__paeth	src/vendor/stb_image/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	typeref:typename:int
stbi__parse_entropy_coded_data	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__parse_huffman_block	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_png_file	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	typeref:typename:int
stbi__parse_uncompressed_block	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_zlib	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	typeref:typename:int
stbi__parse_zlib_header	src/vendor/stb_image/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__pic_info	src/vendor/stb_image/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pic_is4	src/vendor/stb_image/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	typeref:typename:int
stbi__pic_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__resul/;"	f	typeref:typename:void *
stbi__pic_load_core	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *re/;"	f	typeref:typename:stbi_uc *
stbi__pic_packet	src/vendor/stb_image/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anona39c15741108
stbi__pic_test	src/vendor/stb_image/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pic_test_core	src/vendor/stb_image/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png	src/vendor/stb_image/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anona39c15740e08
stbi__png_info	src/vendor/stb_image/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_info_raw	src/vendor/stb_image/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_is16	src/vendor/stb_image/stb_image.h	/^static int stbi__png_is16(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__png_test	src/vendor/stb_image/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pngchunk	src/vendor/stb_image/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anona39c15740d08
stbi__pnm_getinteger	src/vendor/stb_image/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f	typeref:typename:int
stbi__pnm_info	src/vendor/stb_image/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pnm_isdigit	src/vendor/stb_image/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f	typeref:typename:int
stbi__pnm_isspace	src/vendor/stb_image/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f	typeref:typename:int
stbi__pnm_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__pnm_skip_whitespace	src/vendor/stb_image/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f	typeref:typename:void
stbi__pnm_test	src/vendor/stb_image/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__process_frame_header	src/vendor/stb_image/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__process_gif_raster	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	typeref:typename:stbi_uc *
stbi__process_marker	src/vendor/stb_image/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	typeref:typename:int
stbi__process_scan_header	src/vendor/stb_image/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__psd_decode_rle	src/vendor/stb_image/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f	typeref:typename:int
stbi__psd_info	src/vendor/stb_image/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__psd_is16	src/vendor/stb_image/stb_image.h	/^static int stbi__psd_is16(stbi__context *s)$/;"	f	typeref:typename:int
stbi__psd_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__psd_test	src/vendor/stb_image/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__readval	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	typeref:typename:stbi_uc *
stbi__refill_buffer	src/vendor/stb_image/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	typeref:typename:void
stbi__resample	src/vendor/stb_image/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anona39c15740a08
stbi__resample_row_generic	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_h_2	src/vendor/stb_image/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2_simd	src/vendor/stb_image/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, in/;"	f	typeref:typename:stbi_uc *
stbi__resample_row_v_2	src/vendor/stb_image/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, i/;"	f	typeref:typename:stbi_uc *
stbi__result_info	src/vendor/stb_image/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anona39c15740508
stbi__rewind	src/vendor/stb_image/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	typeref:typename:void
stbi__setup_jpeg	src/vendor/stb_image/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__shiftsigned	src/vendor/stb_image/stb_image.h	/^static int stbi__shiftsigned(unsigned int v, int shift, int bits)$/;"	f	typeref:typename:int
stbi__skip	src/vendor/stb_image/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	typeref:typename:void
stbi__sse2_available	src/vendor/stb_image/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f	typeref:typename:int
stbi__start_callbacks	src/vendor/stb_image/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	typeref:typename:void
stbi__start_file	src/vendor/stb_image/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	typeref:typename:void
stbi__start_mem	src/vendor/stb_image/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	typeref:typename:void
stbi__stdio_callbacks	src/vendor/stb_image/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v	typeref:typename:stbi_io_callbacks
stbi__stdio_eof	src/vendor/stb_image/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	typeref:typename:int
stbi__stdio_read	src/vendor/stb_image/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	typeref:typename:int
stbi__stdio_skip	src/vendor/stb_image/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	typeref:typename:void
stbi__tga_get_comp	src/vendor/stb_image/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f	typeref:typename:int
stbi__tga_info	src/vendor/stb_image/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__tga_load	src/vendor/stb_image/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__tga_read_rgb16	src/vendor/stb_image/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f	typeref:typename:void
stbi__tga_test	src/vendor/stb_image/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__uint16	src/vendor/stb_image/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t	typeref:typename:uint16_t
stbi__uint16	src/vendor/stb_image/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t	typeref:typename:unsigned short
stbi__uint32	src/vendor/stb_image/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t	typeref:typename:uint32_t
stbi__uint32	src/vendor/stb_image/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t	typeref:typename:unsigned int
stbi__unpremultiply_on_load	src/vendor/stb_image/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v	typeref:typename:int
stbi__vertical_flip	src/vendor/stb_image/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f	typeref:typename:void
stbi__vertical_flip_slices	src/vendor/stb_image/stb_image.h	/^static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f	typeref:typename:void
stbi__vertically_flip_on_load	src/vendor/stb_image/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v	typeref:typename:int
stbi__zbuf	src/vendor/stb_image/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anona39c15740c08
stbi__zbuild_huffman	src/vendor/stb_image/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f	typeref:typename:int
stbi__zdefault_distance	src/vendor/stb_image/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v	typeref:typename:const stbi_uc[32]
stbi__zdefault_length	src/vendor/stb_image/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v	typeref:typename:const stbi_uc[288]
stbi__zdist_base	src/vendor/stb_image/stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	typeref:typename:const int[32]
stbi__zdist_extra	src/vendor/stb_image/stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v	typeref:typename:const int[32]
stbi__zexpand	src/vendor/stb_image/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f	typeref:typename:int
stbi__zget8	src/vendor/stb_image/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__zhuffman	src/vendor/stb_image/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anona39c15740b08
stbi__zhuffman_decode	src/vendor/stb_image/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:stbi_inline int
stbi__zhuffman_decode_slowpath	src/vendor/stb_image/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:int
stbi__zlength_base	src/vendor/stb_image/stb_image.h	/^static const int stbi__zlength_base[31] = {$/;"	v	typeref:typename:const int[31]
stbi__zlength_extra	src/vendor/stb_image/stb_image.h	/^static const int stbi__zlength_extra[31]=$/;"	v	typeref:typename:const int[31]
stbi__zreceive	src/vendor/stb_image/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	typeref:typename:stbi_inline unsigned int
stbi_convert_iphone_png_to_rgb	src/vendor/stb_image/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	typeref:typename:STBIDEF void
stbi_convert_wchar_to_utf8	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)$/;"	f	typeref:typename:STBIDEF int
stbi_failure_reason	src/vendor/stb_image/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	typeref:typename:STBIDEF const char *
stbi_hdr_to_ldr_gamma	src/vendor/stb_image/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_hdr_to_ldr_scale	src/vendor/stb_image/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_image_free	src/vendor/stb_image/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	typeref:typename:STBIDEF void
stbi_info	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int/;"	f	typeref:typename:STBIDEF int
stbi_info_from_file	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_inline	src/vendor/stb_image/stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	src/vendor/stb_image/stb_image.h	/^   #define stbi_inline$/;"	d
stbi_io_callbacks	src/vendor/stb_image/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anona39c15740208
stbi_is_16_bit	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_file	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr	src/vendor/stb_image/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_file	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:STBIDEF int
stbi_ldr_to_hdr_gamma	src/vendor/stb_image/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_ldr_to_hdr_scale	src/vendor/stb_image/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_load	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_16	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_16_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, /;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_16_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *c/;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file_16	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi__uint16 *
stbi_load_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_gif_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x,/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_loadf	src/vendor/stb_image/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_callbacks	src/vendor/stb_image/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int /;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_file	src/vendor/stb_image/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_memory	src/vendor/stb_image/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp,/;"	f	typeref:typename:STBIDEF float *
stbi_lrot	src/vendor/stb_image/stb_image.h	/^   #define stbi_lrot(/;"	d
stbi_set_flip_vertically_on_load	src/vendor/stb_image/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f	typeref:typename:STBIDEF void
stbi_set_unpremultiply_on_load	src/vendor/stb_image/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	typeref:typename:STBIDEF void
stbi_uc	src/vendor/stb_image/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t	typeref:typename:unsigned char
stbi_us	src/vendor/stb_image/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t	typeref:typename:unsigned short
stbi_zlib_decode_buffer	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_malloc	src/vendor/stb_image/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize	src/vendor/stb_image/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, i/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize_headerflag	src/vendor/stb_image/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int init/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_noheader_buffer	src/vendor/stb_image/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int i/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_noheader_malloc	src/vendor/stb_image/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbrp__findresult	src/vendor/imgui/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon59f071e40308
stbrp__skyline_find_best_pos	src/vendor/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	src/vendor/imgui/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	src/vendor/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	src/vendor/imgui/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	src/vendor/imgui/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	src/vendor/imgui/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon715cafb91108
stbrp_coord	src/vendor/imgui/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	src/vendor/imgui/imstb_rectpack.h	/^typedef unsigned short stbrp_coord;$/;"	t	typeref:typename:unsigned short
stbrp_coord	src/vendor/imgui/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	src/vendor/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	src/vendor/imgui/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	src/vendor/imgui/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	src/vendor/imgui/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	src/vendor/imgui/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon715cafb91208
stbrp_pack_rects	src/vendor/imgui/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	src/vendor/imgui/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	src/vendor/imgui/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	src/vendor/imgui/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	src/vendor/imgui/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	src/vendor/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	src/vendor/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2) $/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FlattenCurves	src/vendor/imgui/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointShape	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphShape	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	src/vendor/imgui/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	src/vendor/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int g/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	src/vendor/imgui/imstb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	src/vendor/imgui/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	src/vendor/imgui/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon715cafb90808
stbtt__buf	src/vendor/imgui/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon715cafb90108
stbtt__buf_get	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	src/vendor/imgui/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	src/vendor/imgui/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	src/vendor/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	src/vendor/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	src/vendor/imgui/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon715cafb90f08
stbtt__csctx_close_shape	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	src/vendor/imgui/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	src/vendor/imgui/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__h_prefilter	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	src/vendor/imgui/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	src/vendor/imgui/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	src/vendor/imgui/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	src/vendor/imgui/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	src/vendor/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	src/vendor/imgui/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	src/vendor/imgui/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon715cafb91008
stbtt__rasterize	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__solve_cubic	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	src/vendor/imgui/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	src/vendor/imgui/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	src/vendor/imgui/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	src/vendor/imgui/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon715cafb90308
stbtt_bakedchar	src/vendor/imgui/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon715cafb90208
stbtt_fontinfo	src/vendor/imgui/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	src/vendor/imgui/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	src/vendor/imgui/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	src/vendor/imgui/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_pack_context	src/vendor/imgui/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	src/vendor/imgui/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	src/vendor/imgui/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon715cafb90508
stbtt_packedchar	src/vendor/imgui/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon715cafb90408
stbtt_setvertex	src/vendor/imgui/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	src/vendor/imgui/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	src/vendor/imgui/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	src/vendor/imgui/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	src/vendor/imgui/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	src/vendor/imgui/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	src/vendor/imgui/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon715cafb90708
stbtt_vertex_type	src/vendor/imgui/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
std	src/vendor/glm/gtx/hash.hpp	/^namespace std$/;"	n
std	src/vendor/glm/gtx/hash.inl	/^namespace std$/;"	n	file:
step	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType step(genType edge, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
step	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(T edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
step	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
step	src/vendor/stb_image/stb_image.h	/^   int parse, step;$/;"	m	struct:__anona39c15741308	typeref:typename:int
storage	src/vendor/glm/detail/qualifier.hpp	/^		struct storage<3, T, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^		struct storage<L, T, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<2, detail::int64, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<2, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<2, double, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, detail::int64, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, double, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, float, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, int, true>$/;"	s	namespace:glm::detail
storage	src/vendor/glm/detail/qualifier.hpp	/^	struct storage<4, unsigned int, true>$/;"	s	namespace:glm::detail
streamsize_type	src/vendor/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::streamsize
stride	src/VertexBufferLayout.h	/^	unsigned int stride;$/;"	m	class:VertexBufferLayout	typeref:typename:unsigned int
stride	src/vendor/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon715cafb90808	typeref:typename:int
stride_in_bytes	src/vendor/imgui/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	src/vendor/imgui/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
succ_high	src/vendor/stb_image/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anona39c15740808	typeref:typename:int
succ_low	src/vendor/stb_image/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anona39c15740808	typeref:typename:int
suffix	src/vendor/stb_image/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anona39c15741208	typeref:typename:stbi_uc
swap	src/vendor/imgui/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
sy	src/vendor/imgui/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10408	typeref:typename:T
t	src/vendor/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anonc7f4dad1060a	typeref:typename:T
t	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520408	typeref:typename:T
t	src/vendor/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc806f352060a	typeref:typename:T
t	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30408	typeref:typename:T
t	src/vendor/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc8190bd3060a	typeref:typename:T
t0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon715cafb90308	typeref:typename:float
t1	src/vendor/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon715cafb90308	typeref:typename:float
tan	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
tanh	src/vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
taylorCos	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> taylorCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
taylorInvSqrt	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
taylorInvSqrt	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> taylorInvSqrt(vec<2, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
taylorInvSqrt	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> taylorInvSqrt(vec<3, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
taylorInvSqrt	src/vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> taylorInvSqrt(vec<4, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	src/vendor/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat()$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, Q> const& d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& q, vec<3, T, Q> co/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r, qua<T, Q> const/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, P> const& d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	src/vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<U, P> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
test	src/vendor/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	g	struct:glm::detail::is_int
test	src/vendor/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	src/vendor/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	src/vendor/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
textureLocation	src/Object.h	/^	std::string textureLocation;$/;"	m	class:Object	typeref:typename:std::string
third	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType third()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
three_over_two_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType three_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
tmat2x2	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x2 = mat<2, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,2,T,Q>
tmat2x3	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x3 = mat<2, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,3,T,Q>
tmat2x4	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x4 = mat<2, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,4,T,Q>
tmat3x2	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x2 = mat<3, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,2,T,Q>
tmat3x3	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x3 = mat<3, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,3,T,Q>
tmat3x4	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x4 = mat<3, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,4,T,Q>
tmat4x2	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x2 = mat<4, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,2,T,Q>
tmat4x3	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x3 = mat<4, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,3,T,Q>
tmat4x4	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x4 = mat<4, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,4,T,Q>
toFloat16	src/vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER hdata toFloat16(float const& f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER hdata
toFloat32	src/vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float toFloat32(hdata value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
toMat3	src/vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<3, 3, T, Q> toMat3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL mat<3,3,T,Q>
toMat4	src/vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<4, 4, T, Q> toMat4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL mat<4,4,T,Q>
toQuat	src/vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL qua<T, Q> toQuat($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL qua<T,Q>
todo	src/vendor/stb_image/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anona39c15740808	typeref:typename:int
tq	src/vendor/stb_image/stb_image.h	/^      int tq;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
tquat	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tquat = qua<T, Q>;$/;"	t	namespace:glm	typeref:typename:qua<T,Q>
translate	src/vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
translate	src/vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> translate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
translate	src/vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
transparent	src/vendor/stb_image/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anona39c15741308	typeref:typename:int
transpose	src/vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename mat<C, R, T, Q>::transpose_type transpose(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<C,R,T,Q>::transpose_type
transpose_type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
transpose_type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef mat<3, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
transpose_type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef mat<4, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
transpose_type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef mat<2, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
transpose_type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
transpose_type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef mat<4, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
transpose_type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef mat<2, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
transpose_type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef mat<3, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
transpose_type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
triangleNormal	src/vendor/glm/gtx/normal.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> triangleNormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
trunc	src/vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType trunc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
trunc	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> trunc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ttBYTE	src/vendor/imgui/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	src/vendor/imgui/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	src/vendor/imgui/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	src/vendor/imgui/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	src/vendor/imgui/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
tvec1	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec1 = vec<1, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<1,T,Q>
tvec2	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec2 = vec<2, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<2,T,Q>
tvec3	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec3 = vec<3, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<3,T,Q>
tvec4	src/vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec4 = vec<4, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<4,T,Q>
tweakedInfinitePerspective	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
tweakedInfinitePerspective	src/vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
two_over_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_over_root_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_pi	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_thirds	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_thirds()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
type	src/VertexBufferLayout.h	/^	unsigned int type;$/;"	m	struct:VertexBufferLayoutElement	typeref:typename:unsigned int
type	src/vendor/glm/detail/qualifier.hpp	/^			typedef struct alignas(4 * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	src/vendor/glm/detail/qualifier.hpp	/^			typedef struct alignas(L * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	src/vendor/glm/detail/qualifier.hpp	/^			} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_f32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f32vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_f64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec2
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_f64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_i32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i32vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_i64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec2
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_i64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_u32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u32vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_u64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec2
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef glm_u64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec4
type	src/vendor/glm/detail/qualifier.hpp	/^		typedef struct type {$/;"	s	struct:glm::detail::storage
type	src/vendor/glm/detail/qualifier.hpp	/^		} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	src/vendor/glm/detail/setup.hpp	/^		typedef uint64 type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:uint64
type	src/vendor/glm/detail/setup.hpp	/^		typedef unsigned char type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned char
type	src/vendor/glm/detail/setup.hpp	/^		typedef unsigned int type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned int
type	src/vendor/glm/detail/setup.hpp	/^		typedef unsigned long type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned long
type	src/vendor/glm/detail/setup.hpp	/^		typedef unsigned short type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned short
type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
type	src/vendor/glm/detail/type_quat.hpp	/^		typedef qua<T, Q> type;$/;"	t	struct:glm::qua	typeref:typename:qua<T,Q>
type	src/vendor/glm/detail/type_vec1.hpp	/^		typedef vec<1, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,T,Q>
type	src/vendor/glm/detail/type_vec2.hpp	/^		typedef vec<2, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,T,Q>
type	src/vendor/glm/detail/type_vec3.hpp	/^		typedef vec<3, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,T,Q>
type	src/vendor/glm/detail/type_vec4.hpp	/^		typedef vec<4, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,T,Q>
type	src/vendor/glm/gtx/type_trait.hpp	/^	struct type$/;"	s	namespace:glm
type	src/vendor/glm/matrix.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,2,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,3,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,4,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,2,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,3,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,4,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,2,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,3,T,Q>
type	src/vendor/glm/matrix.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,4,T,Q>
type	src/vendor/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon715cafb90708	typeref:typename:unsigned char
type	src/vendor/stb_image/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anona39c15740d08	typeref:typename:stbi__uint32
type	src/vendor/stb_image/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anona39c15741108	typeref:typename:stbi_uc
u	src/vendor/glm/gtc/bitfield.inl	/^			uint16 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint16	file:
u	src/vendor/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint32	file:
u	src/vendor/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:uint32	file:
u	src/vendor/glm/gtc/bitfield.inl	/^			uint64 u;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:uint64	file:
u	src/vendor/glm/gtc/bitfield.inl	/^			uint8 u;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:uint8	file:
u10u10u10u2	src/vendor/glm/gtc/packing.inl	/^	union u10u10u10u2$/;"	u	namespace:glm::detail	file:
u16	src/vendor/glm/fwd.hpp	/^	typedef uint16					u16;$/;"	t	namespace:glm	typeref:typename:uint16
u16	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
u16vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u16, defaultp>	u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,defaultp>
u16vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, defaultp> u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,defaultp>
u16vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u16
u16vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u16, defaultp>	u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,defaultp>
u16vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, defaultp> u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,defaultp>
u16vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u16, defaultp>	u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,defaultp>
u16vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, defaultp> u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,defaultp>
u16vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u16, defaultp>	u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,defaultp>
u16vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, defaultp> u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,defaultp>
u32	src/vendor/glm/fwd.hpp	/^	typedef uint32					u32;$/;"	t	namespace:glm	typeref:typename:uint32
u32	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
u32vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, defaultp>	u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
u32vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, defaultp> u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
u32vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u32
u32vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, defaultp>	u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
u32vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, defaultp> u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
u32vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, defaultp>	u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
u32vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, defaultp> u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
u32vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, defaultp>	u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
u32vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, defaultp> u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
u3u3u2	src/vendor/glm/gtc/packing.inl	/^	union u3u3u2$/;"	u	namespace:glm::detail	file:
u4u4	src/vendor/glm/gtc/packing.inl	/^	union u4u4$/;"	u	namespace:glm::detail	file:
u4u4u4u4	src/vendor/glm/gtc/packing.inl	/^	union u4u4u4u4$/;"	u	namespace:glm::detail	file:
u5u5u5u1	src/vendor/glm/gtc/packing.inl	/^	union u5u5u5u1$/;"	u	namespace:glm::detail	file:
u5u6u5	src/vendor/glm/gtc/packing.inl	/^	union u5u6u5$/;"	u	namespace:glm::detail	file:
u64	src/vendor/glm/fwd.hpp	/^	typedef uint64					u64;$/;"	t	namespace:glm	typeref:typename:uint64
u64	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
u64vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u64, defaultp>	u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,defaultp>
u64vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, defaultp> u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,defaultp>
u64vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u64
u64vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u64, defaultp>	u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,defaultp>
u64vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, defaultp> u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,defaultp>
u64vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u64, defaultp>	u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,defaultp>
u64vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, defaultp> u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,defaultp>
u64vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u64, defaultp>	u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,defaultp>
u64vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, defaultp> u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,defaultp>
u8	src/vendor/glm/fwd.hpp	/^	typedef uint8					u8;$/;"	t	namespace:glm	typeref:typename:uint8
u8	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
u8vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u8, defaultp>	u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,defaultp>
u8vec1	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, defaultp> u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,defaultp>
u8vec1	src/vendor/glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precisi/;"	t	namespace:glm::gtx	typeref:typename:u8
u8vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u8, defaultp>	u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,defaultp>
u8vec2	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, defaultp> u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,defaultp>
u8vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u8, defaultp>	u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,defaultp>
u8vec3	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, defaultp> u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,defaultp>
u8vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u8, defaultp>	u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,defaultp>
u8vec4	src/vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, defaultp> u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,defaultp>
u9u9u9e5	src/vendor/glm/gtc/packing.inl	/^	union u9u9u9e5$/;"	u	namespace:glm::detail	file:
uaddCarry	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint uaddCarry(uint const& x, uint const& y, uint & Carry)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uaddCarry	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uaddCarry(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uif32	src/vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32() :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	src/vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(float f_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	src/vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(unsigned int i_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	src/vendor/glm/detail/type_half.inl	/^	union uif32$/;"	u	namespace:glm::detail	file:
uint	src/vendor/glm/detail/setup.hpp	/^	typedef unsigned int	uint;$/;"	t	namespace:glm	typeref:typename:unsigned int
uint16	src/vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint16_t		uint16;$/;"	t	namespace:glm::detail	typeref:typename:std::uint16_t
uint16	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint16		uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16	src/vendor/glm/fwd.hpp	/^	typedef std::uint16_t			uint16;$/;"	t	namespace:glm	typeref:typename:std::uint16_t
uint16_t	src/vendor/glm/fwd.hpp	/^	typedef uint16					uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
uint16_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint32	src/vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint32_t		uint32;$/;"	t	namespace:glm::detail	typeref:typename:std::uint32_t
uint32	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint32		uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32	src/vendor/glm/fwd.hpp	/^	typedef std::uint32_t			uint32;$/;"	t	namespace:glm	typeref:typename:std::uint32_t
uint32_t	src/vendor/glm/fwd.hpp	/^	typedef uint32					uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
uint32_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint64	src/vendor/glm/detail/setup.hpp	/^		typedef std::uint64_t						uint64;$/;"	t	namespace:glm::detail	typeref:typename:std::uint64_t
uint64	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint64		uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64	src/vendor/glm/fwd.hpp	/^	typedef std::uint64_t			uint64;$/;"	t	namespace:glm	typeref:typename:std::uint64_t
uint64_t	src/vendor/glm/fwd.hpp	/^	typedef uint64					uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
uint64_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint8	src/vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint8_t		uint8;$/;"	t	namespace:glm::detail	typeref:typename:std::uint8_t
uint8	src/vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint8		uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8	src/vendor/glm/fwd.hpp	/^	typedef std::uint8_t			uint8;$/;"	t	namespace:glm	typeref:typename:std::uint8_t
uint8_t	src/vendor/glm/fwd.hpp	/^	typedef uint8					uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
uint8_t	src/vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uintBitsToFloat	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float uintBitsToFloat(uint const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
uintBitsToFloat	src/vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:highp_umat2
umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2
umat2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2
umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:highp_umat2x2
umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x2
umat2x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x2
umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:highp_umat2x3
umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x3
umat2x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x3
umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:highp_umat2x4
umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x4
umat2x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x4
umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:highp_umat3
umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3
umat3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3
umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:highp_umat3x2
umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x2
umat3x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x2
umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:highp_umat3x3
umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x3
umat3x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x3
umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:highp_umat3x4
umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x4
umat3x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x4
umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:highp_umat4
umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4
umat4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4
umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:highp_umat4x2
umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x2
umat4x2	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x2
umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:highp_umat4x3
umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x3
umat4x3	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x3
umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:highp_umat4x4
umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x4
umat4x4	src/vendor/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x4
umulExtended	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(uint const& x, uint const& y, uint & msb, uint & lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
umulExtended	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
unProject	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProject(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectNO	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectNO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectZO	src/vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectZO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
undo_char	src/vendor/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anona9fd05c20208	typeref:typename:STB_TEXTEDIT_CHARTYPE[]
undo_char_point	src/vendor/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anona9fd05c20208	typeref:typename:int
undo_point	src/vendor/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anona9fd05c20208	typeref:typename:short
undo_rec	src/vendor/imgui/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anona9fd05c20208	typeref:typename:StbUndoRecord[]
undostate	src/vendor/imgui/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anona9fd05c20308	typeref:typename:StbUndoState
unformatted	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& unformatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
uniformLocationCache	src/Shader.h	/^	std::unordered_map<std::string, int> uniformLocationCache;$/;"	m	class:Shader	typeref:typename:std::unordered_map<std::string,int>
unpack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, float, Q> unpack(vec<1, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,float,Q>	file:
unpack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, float, Q> unpack(vec<2, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,float,Q>	file:
unpack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> unpack(vec<3, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
unpack	src/vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> unpack(vec<4, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
unpackDouble2x32	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uvec2 unpackDouble2x32(double v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec2
unpackF2x11_1x10	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF2x11_1x10(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackF3x9_E1x5	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF3x9_E1x5(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackHalf	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> unpackHalf(vec<L, uint16, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
unpackHalf1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackHalf1x16(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackHalf2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackHalf2x16(uint v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackHalf4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackHalf4x16(uint64 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackI3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER ivec4 unpackI3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER ivec4
unpackInt2x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec2 unpackInt2x16(int p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec2
unpackInt2x32	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i32vec2 unpackInt2x32(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i32vec2
unpackInt2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec2 unpackInt2x8(int16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec2
unpackInt4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec4 unpackInt4x16(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec4
unpackInt4x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec4 unpackInt4x8(int32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec4
unpackRGBM	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unpackRGBM(vec<4, T, Q> const& rgbm)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unpackSnorm	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackSnorm(vec<L, intType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackSnorm1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm1x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x8	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackSnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackU3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uvec4 unpackU3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec4
unpackUint2x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec2 unpackUint2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec2
unpackUint2x32	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u32vec2 unpackUint2x32(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u32vec2
unpackUint2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec2 unpackUint2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
unpackUint4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec4 unpackUint4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec4
unpackUint4x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec4 unpackUint4x8(uint32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec4
unpackUnorm	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackUnorm(vec<L, uintType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackUnorm1x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm1x5_1x6_1x5	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm1x5_1x6_1x5(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm1x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm2x16	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x3_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm2x3_1x2(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm2x4	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x4(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x8	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm3x10_1x2	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm3x5_1x1	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x5_1x1(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x16	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x4	src/vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x4(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x8	src/vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
uround	src/vendor/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER uint uround(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uround	src/vendor/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
user_allocator_context	src/vendor/imgui/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	src/vendor/imgui/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
usubBorrow	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint usubBorrow(uint const& x, uint const& y, uint & Borrow)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
usubBorrow	src/vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> usubBorrow(vec<L, uint, Q> const& x, vec<L, uint, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uv	src/vendor/imgui/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
uvec1	src/vendor/glm/ext/vector_uint1.hpp	/^	typedef vec<1, unsigned int, defaultp>			uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,defaultp>
uvec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, u32, defaultp>	uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
uvec2	src/vendor/glm/ext/vector_uint2.hpp	/^	typedef vec<2, unsigned int, defaultp>		uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,defaultp>
uvec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, u32, defaultp>	uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
uvec3	src/vendor/glm/ext/vector_uint3.hpp	/^	typedef vec<3, unsigned int, defaultp>		uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,defaultp>
uvec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, u32, defaultp>	uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
uvec4	src/vendor/glm/ext/vector_uint4.hpp	/^	typedef vec<4, unsigned int, defaultp>		uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,defaultp>
uvec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, u32, defaultp>	uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
v	src/vendor/stb_image/stb_image.h	/^      int h,v;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
v_oversample	src/vendor/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon715cafb90508	typeref:typename:unsigned char
v_oversample	src/vendor/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	src/vendor/imgui/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	src/vendor/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonc2d48c14010a	typeref:typename:float
val_i	src/vendor/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonc2d48c14010a	typeref:typename:int
val_p	src/vendor/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonc2d48c14010a	typeref:typename:void *
validate_uint32	src/vendor/stb_image/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t	typeref:typename:unsigned char[sizeof (stbi__uint32)==4?1:-1]
value	src/vendor/glm/detail/qualifier.hpp	/^			static const bool value = true;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	src/vendor/glm/detail/qualifier.hpp	/^		static const bool value = false;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	src/vendor/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	e	enum:glm::detail::is_int::test
value	src/vendor/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	src/vendor/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	src/vendor/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	src/vendor/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	src/vendor/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	src/vendor/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	src/vendor/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	src/vendor/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	src/vendor/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	src/vendor/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	src/vendor/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	src/vendor/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	src/vendor/glm/ext/scalar_ulp.inl	/^	double value;$/;"	m	union:__anon3c23ed7f020a	typeref:typename:double	file:
value	src/vendor/glm/ext/scalar_ulp.inl	/^	float value;$/;"	m	union:__anon3c23ed7f010a	typeref:typename:float	file:
value	src/vendor/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	typeref:typename:CTy[3]
value	src/vendor/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	typeref:typename:order_type
value	src/vendor/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	typeref:typename:unsigned
value	src/vendor/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	typeref:typename:unsigned
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%d";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%f";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%lld";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "b";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "d";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	src/vendor/stb_image/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anona39c15740b08	typeref:typename:stbi__uint16[288]
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T * value_ptr(mat<4, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(qua<T, Q>& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<2, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<3, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	src/vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<4, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_type	src/vendor/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	src/vendor/glm/detail/type_quat.hpp	/^		typedef T value_type;$/;"	t	struct:glm::qua	typeref:typename:T
value_type	src/vendor/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	src/vendor/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	src/vendor/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	src/vendor/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	src/vendor/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	typeref:typename:T
value_type	src/vendor/glm/gtx/string_cast.inl	/^		typedef T value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:T	file:
value_type	src/vendor/glm/gtx/string_cast.inl	/^		typedef double value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:double	file:
value_type	src/vendor/imgui/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
values	src/vendor/stb_image/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anona39c15740708	typeref:typename:stbi_uc[256]
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
vec	src/vendor/glm/detail/type_vec1.hpp	/^	struct vec<1, T, Q>$/;"	s	namespace:glm
vec	src/vendor/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1,-1,-2> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.hpp	/^	struct vec<2, T, Q>$/;"	s	namespace:glm
vec	src/vendor/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, vec<1, B, Q> const& _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T _x, T _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, vec<1, B, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& scalar, detail::_swizzle<2, T, Q, E0, E1, -1, -2> co/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.hpp	/^	struct vec<3, T, Q>$/;"	s	namespace:glm
vec	src/vendor/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(A _x, vec<2, B, P> const& _yz)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T _x, T _y, T _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, B _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, T const& y, detail::_swizzle<2, T, Q, E0, E1, -1,/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, detail::_/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<4, T, Q, E0, E1, E2, E3> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.hpp	/^	struct vec<4, T, Q>$/;"	s	namespace:glm
vec	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, B _y, vec<2, C, P> const& _zw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<3, B, P> const& _yzw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T _x, T _y, T _z, T _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<1, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<3, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<2, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, B _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, vec<1, B, P> const/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_highp>::vec(detail::int64 _s) :$/;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_lowp>::vec(detail::int64 _s) :$/;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_mediump>::vec(detail::int64 _s) /;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_highp>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_lowp>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_mediump>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _x, float _y, float _z/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(int _x, int _y, int _z, int /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _x, float _y, float _z,/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(int _x, int _y, int _z, int _/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _x, float _y, float /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(int _x, int _y, int _z, in/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _x, int _y, int _z, int _w/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _x, int _y, int _z, int _w)/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	src/vendor/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _x, int _y, int _z, int /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec1	src/vendor/glm/ext/vector_float1.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec1	src/vendor/glm/fwd.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec2	src/vendor/glm/ext/vector_float2.hpp	/^	typedef vec<2, float, defaultp>	vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec2	src/vendor/glm/fwd.hpp	/^	typedef vec<2, float, defaultp>		vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec3	src/vendor/glm/ext/vector_float3.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec3	src/vendor/glm/fwd.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec4	src/vendor/glm/ext/vector_float4.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vec4	src/vendor/glm/fwd.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vertexBuffer	src/Mesh/Mesh.h	/^		std::vector<float>* vertexBuffer;$/;"	m	class:Mesh	typeref:typename:std::vector<float> *
volatile	CMakeFiles/3.18.2/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vs	src/vendor/stb_image/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anona39c15740a08	typeref:typename:int
vsnprintf	src/vendor/imgui/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	src/vendor/imgui/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	src/vendor/glm/detail/type_quat.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::qua::__anonfa4f7e7c010a::__anonfa4f7e7c0208	typeref:typename:T
w	src/vendor/glm/detail/type_quat.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
w	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30208	typeref:typename:T
w	src/vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
w	src/vendor/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anonc8190bd3080a	typeref:typename:T
w	src/vendor/glm/gtc/packing.inl	/^			int w : 2;$/;"	m	struct:glm::detail::i10i10i10i2::__anon7920d4230708	typeref:typename:int:2	file:
w	src/vendor/glm/gtc/packing.inl	/^			uint w : 1;$/;"	m	struct:glm::detail::u5u5u5u1::__anon7920d4230508	typeref:typename:uint:1	file:
w	src/vendor/glm/gtc/packing.inl	/^			uint w : 2;$/;"	m	struct:glm::detail::u10u10u10u2::__anon7920d4230608	typeref:typename:uint:2	file:
w	src/vendor/glm/gtc/packing.inl	/^			uint w : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon7920d4230308	typeref:typename:uint:4	file:
w	src/vendor/glm/gtc/packing.inl	/^			uint w : 5;$/;"	m	struct:glm::detail::u9u9u9e5::__anon7920d4230808	typeref:typename:uint:5	file:
w	src/vendor/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	src/vendor/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	src/vendor/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon715cafb90808	typeref:typename:int
w	src/vendor/stb_image/stb_image.h	/^   int w,h;$/;"	m	struct:__anona39c15741308	typeref:typename:int
w2	src/vendor/stb_image/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
w_lores	src/vendor/stb_image/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anona39c15740a08	typeref:typename:int
was_packed	src/vendor/imgui/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	src/vendor/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
wformat_saver	src/vendor/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<wchar_t>
where	src/vendor/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anona9fd05c20108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
width	src/Texture.h	/^	int 			width;$/;"	m	class:Texture	typeref:typename:int
width	src/vendor/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
width	src/vendor/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER width::width(unsigned a)$/;"	f	class:glm::io::width	typeref:typename:GLM_FUNC_QUALIFIER
width	src/vendor/imgui/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	src/vendor/imgui/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	src/vendor/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon715cafb91108	typeref:typename:int
width_	src/vendor/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
word	src/vendor/glm/ext/scalar_ulp.inl	/^	unsigned int word;$/;"	m	union:__anon3c23ed7f010a	typeref:typename:unsigned int	file:
word	src/vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm	typeref:typename:detail::uint16
wrapAngle	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T wrapAngle(T angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
wrapAngle	src/vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> wrapAngle(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
wstate_saver	src/vendor/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<wchar_t>
ww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> ww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
www	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> www(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
x	src/vendor/glm/detail/type_quat.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::qua::__anonfa4f7e7c010a::__anonfa4f7e7c0208	typeref:typename:T
x	src/vendor/glm/detail/type_quat.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
x	src/vendor/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::vec::__anonc7e2c250010a	typeref:typename:T
x	src/vendor/glm/detail/type_vec1.hpp	/^			T x;$/;"	m	struct:glm::vec	typeref:typename:T
x	src/vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7e2c250020a	typeref:typename:T
x	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10208	typeref:typename:T
x	src/vendor/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
x	src/vendor/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anonc7f4dad1050a	typeref:typename:T
x	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520208	typeref:typename:T
x	src/vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
x	src/vendor/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc806f352050a	typeref:typename:T
x	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30208	typeref:typename:T
x	src/vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
x	src/vendor/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anonc8190bd3050a	typeref:typename:T
x	src/vendor/glm/gtc/packing.inl	/^			int x : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon7920d4230708	typeref:typename:int:10	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon7920d4230608	typeref:typename:uint:10	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 3;$/;"	m	struct:glm::detail::u3u3u2::__anon7920d4230108	typeref:typename:uint:3	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4::__anon7920d4230208	typeref:typename:uint:4	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon7920d4230308	typeref:typename:uint:4	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon7920d4230508	typeref:typename:uint:5	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u6u5::__anon7920d4230408	typeref:typename:uint:5	file:
x	src/vendor/glm/gtc/packing.inl	/^			uint x : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon7920d4230808	typeref:typename:uint:9	file:
x	src/vendor/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	src/vendor/imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	src/vendor/imgui/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	src/vendor/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon59f071e40308	typeref:typename:int
x	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	src/vendor/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anona9fd05c20508	typeref:typename:float
x	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
x	src/vendor/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:float
x	src/vendor/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon715cafb91008	typeref:typename:float
x	src/vendor/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	src/vendor/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon715cafb91108	typeref:typename:int
x	src/vendor/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	src/vendor/imgui/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon715cafb91208	typeref:typename:unsigned char
x	src/vendor/stb_image/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
x0	src/vendor/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anona9fd05c20408	typeref:typename:float
x0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon715cafb90308	typeref:typename:float
x0	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90208	typeref:typename:unsigned short
x0	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90408	typeref:typename:unsigned short
x1	src/vendor/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anona9fd05c20408	typeref:typename:float
x1	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	src/vendor/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon715cafb90308	typeref:typename:float
x1	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90208	typeref:typename:unsigned short
x1	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90408	typeref:typename:unsigned short
xadvance	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90208	typeref:typename:float
xadvance	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90408	typeref:typename:float
xoff	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90208	typeref:typename:float
xoff	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90408	typeref:typename:float
xoff2	src/vendor/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon715cafb90408	typeref:typename:float
xw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
y	src/vendor/glm/detail/type_quat.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::qua::__anonfa4f7e7c010a::__anonfa4f7e7c0208	typeref:typename:T
y	src/vendor/glm/detail/type_quat.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
y	src/vendor/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anonc7f4dad1010a::__anonc7f4dad10208	typeref:typename:T
y	src/vendor/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
y	src/vendor/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anonc7f4dad1060a	typeref:typename:T
y	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520208	typeref:typename:T
y	src/vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
y	src/vendor/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc806f352060a	typeref:typename:T
y	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30208	typeref:typename:T
y	src/vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
y	src/vendor/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anonc8190bd3060a	typeref:typename:T
y	src/vendor/glm/gtc/packing.inl	/^			int y : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon7920d4230708	typeref:typename:int:10	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon7920d4230608	typeref:typename:uint:10	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 3;$/;"	m	struct:glm::detail::u3u3u2::__anon7920d4230108	typeref:typename:uint:3	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4::__anon7920d4230208	typeref:typename:uint:4	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon7920d4230308	typeref:typename:uint:4	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon7920d4230508	typeref:typename:uint:5	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 6;$/;"	m	struct:glm::detail::u5u6u5::__anon7920d4230408	typeref:typename:uint:6	file:
y	src/vendor/glm/gtc/packing.inl	/^			uint y : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon7920d4230808	typeref:typename:uint:9	file:
y	src/vendor/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	src/vendor/imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	src/vendor/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon59f071e40308	typeref:typename:int
y	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	src/vendor/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	src/vendor/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anona9fd05c20508	typeref:typename:float
y	src/vendor/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon715cafb90708	typeref:typename:stbtt_vertex_type
y	src/vendor/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon715cafb90f08	typeref:typename:float
y	src/vendor/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon715cafb91008	typeref:typename:float
y	src/vendor/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon715cafb91108	typeref:typename:int
y	src/vendor/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	src/vendor/stb_image/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anona39c15740808::__anona39c15740908	typeref:typename:int
y0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon715cafb90308	typeref:typename:float
y0	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90208	typeref:typename:unsigned short
y0	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90408	typeref:typename:unsigned short
y1	src/vendor/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	src/vendor/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon715cafb90308	typeref:typename:float
y1	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90208	typeref:typename:unsigned short
y1	src/vendor/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon715cafb90408	typeref:typename:unsigned short
yaw	src/vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T yaw(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
yawPitchRoll	src/vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> yawPitchRoll$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
ymax	src/vendor/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anona9fd05c20408	typeref:typename:float
ymin	src/vendor/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anona9fd05c20408	typeref:typename:float
yoff	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90208	typeref:typename:float
yoff	src/vendor/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon715cafb90408	typeref:typename:float
yoff2	src/vendor/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon715cafb90408	typeref:typename:float
ypos	src/vendor/stb_image/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anona39c15740a08	typeref:typename:int
ystep	src/vendor/stb_image/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anona39c15740a08	typeref:typename:int
yw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
z	src/vendor/glm/detail/type_quat.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::qua::__anonfa4f7e7c010a::__anonfa4f7e7c0208	typeref:typename:T
z	src/vendor/glm/detail/type_quat.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
z	src/vendor/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anonc806f352010a::__anonc806f3520208	typeref:typename:T
z	src/vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
z	src/vendor/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc806f352070a	typeref:typename:T
z	src/vendor/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anonc8190bd3010a::__anonc8190bd30208	typeref:typename:T
z	src/vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
z	src/vendor/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anonc8190bd3070a	typeref:typename:T
z	src/vendor/glm/gtc/packing.inl	/^			int z : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon7920d4230708	typeref:typename:int:10	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon7920d4230608	typeref:typename:uint:10	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 2;$/;"	m	struct:glm::detail::u3u3u2::__anon7920d4230108	typeref:typename:uint:2	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon7920d4230308	typeref:typename:uint:4	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon7920d4230508	typeref:typename:uint:5	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u6u5::__anon7920d4230408	typeref:typename:uint:5	file:
z	src/vendor/glm/gtc/packing.inl	/^			uint z : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon7920d4230808	typeref:typename:uint:9	file:
z	src/vendor/imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
z_distance	src/vendor/stb_image/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anona39c15740c08	typeref:typename:stbi__zhuffman
z_expandable	src/vendor/stb_image/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anona39c15740c08	typeref:typename:int
z_length	src/vendor/stb_image/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anona39c15740c08	typeref:typename:stbi__zhuffman
zbuffer	src/vendor/stb_image/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anona39c15740c08	typeref:typename:stbi_uc *
zbuffer_end	src/vendor/stb_image/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anona39c15740c08	typeref:typename:stbi_uc **
zero	src/vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType zero()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
zout	src/vendor/stb_image/stb_image.h	/^   char *zout;$/;"	m	struct:__anona39c15740c08	typeref:typename:char *
zout_end	src/vendor/stb_image/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anona39c15740c08	typeref:typename:char *
zout_start	src/vendor/stb_image/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anona39c15740c08	typeref:typename:char *
zw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzww	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzxw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzyw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzzw	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzx	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzy	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzz	src/vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
~ExampleAppConsole	src/vendor/imgui/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~ImDrawData	src/vendor/imgui/imgui.h	/^    ~ImDrawData()   { Clear(); }$/;"	f	struct:ImDrawData
~ImDrawList	src/vendor/imgui/imgui.h	/^    ~ImDrawList() { ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	src/vendor/imgui/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	src/vendor/imgui/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	src/vendor/imgui/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	src/vendor/imgui/imgui.h	/^    ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount =/;"	f	struct:ImGuiListClipper
~ImGuiWindow	src/vendor/imgui/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	src/vendor/imgui/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	src/vendor/imgui/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); }$/;"	f	struct:ImVector
~IndexBuffer	src/IndexBuffer.cpp	/^IndexBuffer::~IndexBuffer(){$/;"	f	class:IndexBuffer
~Mesh	src/Mesh/Mesh.cpp	/^Mesh::~Mesh() $/;"	f	class:Mesh
~MeshStore	src/Mesh/MeshStore.cpp	/^MeshStore::~MeshStore() {}$/;"	f	class:MeshStore
~Object	src/Object.cpp	/^Object::~Object()$/;"	f	class:Object
~Shader	src/Shader.cpp	/^Shader::~Shader(){}$/;"	f	class:Shader
~Texture	src/Texture.cpp	/^Texture::~Texture(){$/;"	f	class:Texture
~VertexArray	src/VertexArray.cpp	/^VertexArray::~VertexArray(){$/;"	f	class:VertexArray
~VertexBuffer	src/VertexBuffer.cpp	/^VertexBuffer::~VertexBuffer(){$/;"	f	class:VertexBuffer
~VertexBufferLayout	src/VertexBufferLayout.cpp	/^VertexBufferLayout::~VertexBufferLayout() {}$/;"	f	class:VertexBufferLayout
~basic_format_saver	src/vendor/glm/gtx/io.inl	/^	basic_format_saver<CTy, CTr>::~basic_format_saver()$/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
~basic_state_saver	src/vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::~basic_state_saver()$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
